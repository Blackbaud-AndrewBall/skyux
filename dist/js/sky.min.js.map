{"version":3,"sources":["js/sky/src/alert/alert.module.js","js/sky/src/avatar/avatar.module.js","js/sky/src/error/error.module.js","js/sky/src/pagesummary/pagesummary.module.js","js/sky/src/actionbar/actionbar.js","js/sky/src/alert/alert.directive.js","js/sky/src/autofocus/autofocus.js","js/sky/src/autonumeric/autonumeric.js","js/sky/src/avatar/avatar.config.js","js/sky/src/avatar/avatar.directive.js","js/sky/src/check/check.js","js/sky/src/checklist/checklist.js","js/sky/src/checklist/checklistcolumn.js","js/sky/src/checklist/checklistcolumns.js","js/sky/src/checklist/checklistmodel.js","js/sky/src/checklist/checklistutility.js","js/sky/src/contextmenu/contextmenu.js","js/sky/src/data/data.js","js/sky/src/datepicker/datepicker.js","js/sky/src/daterangepicker/daterangepicker.js","js/sky/src/error/error.directive.js","js/sky/src/error/errormodal.controller.js","js/sky/src/error/errormodal.service.js","js/sky/src/fileattachments/fileattachments.js","js/sky/src/fileattachments/filedrop.js","js/sky/src/fileattachments/fileitem.js","js/sky/src/fileattachments/filesize.js","js/sky/src/format/format.js","js/sky/src/grids/columnpicker.js","js/sky/src/grids/gridactionbar.js","js/sky/src/grids/gridfilters.js","js/sky/src/grids/grids.js","js/sky/src/grids/gridtoolbar.js","js/sky/src/help/help.js","js/sky/src/helpbutton/helpbutton.js","js/sky/src/highlight/highlight.js","js/sky/src/mediabreakpoints/mediabreakpoints.js","js/sky/src/modal/modal.js","js/sky/src/moment/moment.js","js/sky/src/navbar/navbar.js","js/sky/src/omnibar/omnibar.js","js/sky/src/page/page.js","js/sky/src/pagesummary/pagesummary.directive.js","js/sky/src/pagination/pagination.js","js/sky/src/palette/config.js","js/sky/src/palette/palette.js","js/sky/src/popover/popover.js","js/sky/src/resources/resources.js","js/sky/src/scrollintoview/scrollintoview.js","js/sky/src/searchfield/searchfield.js","js/sky/src/tabscroll/tabscroll.js","js/sky/src/tabset/tabset.js","js/sky/src/tabsref/tabsref.js","js/sky/src/templating/templating.js","js/sky/src/textexpand/textexpand.js","js/sky/src/tiles/tiles.js","js/sky/src/toast/toast.js","js/sky/src/tooltip/tooltip.js","js/sky/src/utilities/utilities.js","js/sky/src/validation/validation.js","js/sky/src/viewkeeper/viewkeeper.js","js/sky/src/wait/wait.js","js/sky/src/window/window.js","js/sky/src/wizard/wizard.js","js/sky/src/module.js","dist/js/locales/sky-locale-en-US.js","js/sky/templates/templates.js.tmp","../../js/sky/src/alert/alert.module.js","../../js/sky/src/avatar/avatar.module.js","../../js/sky/src/error/error.module.js","../../js/sky/src/pagesummary/pagesummary.module.js","../../js/sky/src/actionbar/actionbar.js","../../js/sky/src/alert/alert.directive.js","../../js/sky/src/autofocus/autofocus.js","../../js/sky/src/autonumeric/autonumeric.js","../../js/sky/src/avatar/avatar.config.js","../../js/sky/src/avatar/avatar.directive.js","../../js/sky/src/check/check.js","../../js/sky/src/checklist/checklist.js","../../js/sky/src/checklist/checklistcolumn.js","../../js/sky/src/checklist/checklistcolumns.js","../../js/sky/src/checklist/checklistmodel.js","../../js/sky/src/checklist/checklistutility.js","../../js/sky/src/contextmenu/contextmenu.js","../../js/sky/src/data/data.js","../../js/sky/src/datepicker/datepicker.js","../../js/sky/src/daterangepicker/daterangepicker.js","../../js/sky/src/error/error.directive.js","../../js/sky/src/error/errormodal.controller.js","../../js/sky/src/error/errormodal.service.js","../../js/sky/src/fileattachments/fileattachments.js","../../js/sky/src/fileattachments/filedrop.js","../../js/sky/src/fileattachments/fileitem.js","../../js/sky/src/fileattachments/filesize.js","../../js/sky/src/format/format.js","../../js/sky/src/grids/columnpicker.js","../../js/sky/src/grids/gridactionbar.js","../../js/sky/src/grids/gridfilters.js","../../js/sky/src/grids/grids.js","../../js/sky/src/grids/gridtoolbar.js","../../js/sky/src/help/help.js","../../js/sky/src/helpbutton/helpbutton.js","../../js/sky/src/highlight/highlight.js","../../js/sky/src/mediabreakpoints/mediabreakpoints.js","../../js/sky/src/modal/modal.js","../../js/sky/src/moment/moment.js","../../js/sky/src/navbar/navbar.js","../../js/sky/src/omnibar/omnibar.js","../../js/sky/src/page/page.js","../../js/sky/src/pagesummary/pagesummary.directive.js","../../js/sky/src/pagination/pagination.js","../../js/sky/src/palette/config.js","../../js/sky/src/palette/palette.js","../../js/sky/src/popover/popover.js","../../js/sky/src/resources/resources.js","../../js/sky/src/scrollintoview/scrollintoview.js","../../js/sky/src/searchfield/searchfield.js","../../js/sky/src/tabscroll/tabscroll.js","../../js/sky/src/tabset/tabset.js","../../js/sky/src/tabsref/tabsref.js","../../js/sky/src/templating/templating.js","../../js/sky/src/textexpand/textexpand.js","../../js/sky/src/tiles/tiles.js","../../js/sky/src/toast/toast.js","../../js/sky/src/tooltip/tooltip.js","../../js/sky/src/utilities/utilities.js","../../js/sky/src/validation/validation.js","../../js/sky/src/viewkeeper/viewkeeper.js","../../js/sky/src/wait/wait.js","../../js/sky/src/window/window.js","../../js/sky/src/wizard/wizard.js","../../js/sky/src/module.js","../../dist/js/locales/sky-locale-en-US.js","../../js/sky/templates/templates.js.tmp"],"names":["angular","module","bbActionBar","controller","noop","controllerAs","bindToController","scope","transclude","restrict","templateUrl","bbActionBarItemGroup","bbResources","bbMediaBreakpoints","replace","vm","this","title","isUndefined","action_bar_actions","link","$scope","el","mediaBreakpointHandler","breakpoints","xs","find","appendTo","register","$on","unregister","bbActionBarItem","require","attrs","groupCtrl","parent","is","wrap","unwrap","$inject","directive","bbAlert","Controller","close","bbAlertClosed","bbAlertType","bbAlertCloseable","$timeout","$element","focus","$","getBaseSettings","bbAutoNumericConfig","configType","baseSettings","configSettings","extend","fn","autoNumeric","defaults","number","constant","aSep","dGroup","aDec","pSign","mDec","money","aSign","bbWindow","ngModel","applySettings","bbAutonumeric","customSettings","applyCssSettings","addClass","autonumericChange","$apply","value","parseFloat","isNaN","$setViewValue","isIosUserAgent","bbAutonumericSettings","$watch","newValue","oldValue","getValue","selectionStart","undefined","val","isFunction","setSelectionRange","isDefined","on","event","which","select","filter","bbAutonumericConfig","input","abbreviate","dividend","formatted","settings","suffix","tempEl","Math","round","autonumeric_abbr_billions","autonumeric_abbr_millions","autonumeric_abbr_thousands","floor","text","jQuery","bbAvatarConfig","maxFileSize","bbAvatar","$filter","$templateCache","$window","bbErrorModal","bbFormat","bbPalette","setImageUrl","url","css","getInitial","name","charAt","toUpperCase","getInitials","initials","nameSplit","split","length","getPlaceholderColor","colorIndex","seed","colors","getColorSequence","charCodeAt","abs","drawPlaceolderImage","canvas","context","devicePixelRatio","fontSize","size","bbAvatarName","getContext","attr","scale","fillStyle","fillRect","width","height","font","textAlign","fillText","revokeBlobUrl","blobUrl","URL","revokeObjectURL","loadPhoto","src","templateLoaded","bbAvatarSrc","File","createObjectURL","handleInvalidFileDrop","rejectedFile","errorDescription","errorTitle","maxFileSizeFormatted","type","indexOf","avatar_error_not_image_description","avatar_error_not_image_title","formatText","avatar_error_too_large_description","avatar_error_too_large_title","open","onTemplateLoad","photoDrop","files","rejectedFiles","isArray","bbAvatarChange","file","showInitials","canChange","template","dropEl","html","get","createEl","element","styledEl","typeClass","labelEl","after","bbChecklist","bbChecklistUtility","bbChecklistItems","bbChecklistSelectedItems","bbChecklistFilterCallback","bbChecklistIncludeSearch","bbChecklistSearchDebounce","bbChecklistSearchPlaceholder","bbChecklistNoItemsMessage","bbChecklistAutomationField","bbChecklistCategories","bbChecklistMode","locals","setColumns","columns","itemMatchesCategory","item","category","itemMatchesFilter","searchTextUpper","p","i","len","SEARCH_PROPS","hasOwnProperty","isString","invokeFilterLocal","filteredItems","n","items","searchText","selectedCategory","push","slice","invokeFilter","filterLocal","bbChecklistFilterLocal","selectAll","selected","contains","add","clear","remove","rowClicked","filterByCategory","highlightRefresh","Date","getTime","bbChecklistColumn","bbChecklistColumnCaption","bbChecklistColumnField","bbChecklistColumnClass","bbChecklistColumnWidth","bbChecklistColumnAutomationId","bbChecklistColumns","column","caption","field","class","automationId","addColumn","checklistModel","$compile","$parse","postLinkFn","elem","getter","setter","assign","checklistValue","$parent","current","newArr","checked","priority","terminal","compile","tElement","tAttrs","tagName","removeAttr","factory","arr","equals","splice","getTemplateUrl","bbContextMenu","contextButtonStopPropagation","$event","stopPropagation","bbContextMenuItem","clickItem","bbContextMenuButton","toggleAccordion","preventDefault","accordionLocals","accordionOpen","BBSubmenuController","self","bbSubmenu","heading","staticHeader","bbSubmenuHeading","submenuCtrl","fillUrls","option","props","urls","BB_DATA_POST","DEFAULT_PROP","loadManager","options","cancelWaiting","waitForFirstItem","nonblockWaitForAdditionalItems","nonblockingForAdditionalItems","$emit","nonblocking","waitingForFirstItem","startNonblockingForAdditionalItems","markCompleted","loadingItems","result","isLoading","isFirstItemLoaded","registerItem","load","loaded","isAggregate","e","bbData","$http","$q","bbDataConfig","ajaxUrl","requestType","parts","define","amd","shift","toUrl","join","REQUEST_TYPE_DATA","dataUrlFilter","REQUEST_TYPE_RESOURCES","resourceUrlFilter","REQUEST_TYPE_TEXT","textUrlFilter","createAjaxPromise","isPost","timeoutPromise","data","httpOptions","isGet","textContent","resolve","method","cache","JSON","stringify","dataType","withCredentials","timeout","FormData","transformRequest","identity","headers","Content-Type","addPromises","nextId","index","trackHTTPTimeoutForPromise","clearPromiseId","id","promise","httpTimeout","defer","_id","then","loadData","reject","success","args","addResult","resultData","httpResult","resultItem","resultItemHttpResults","argIndex","httpResults","dataProps","resourcesProps","textProps","failure","apply","arguments","dataOption","dataUrls","resourcesOption","resourcesUrls","textOption","textUrls","promises","resources","all","cancel","query","params","param","post","save","currentCultureDateFormatString","showWeeks","startingDay","minDate","maxDate","bbDatepickerConfig","bbDatepickerParser","date","dateOptions","customValidation","format","placeholderText","getInputNgModel","getBodyDatepicker","positionAbsoluteDatepicker","inputWidth","buttonWidth","datepickerWidth","calendarButtonEl","inputEl","datepickerScope","isolateScope","datepickerEl","innerWidth","position","left","appendToBody","opened","setDate","inputNgModel","isDate","hasCustomValidation","parsedDate","runParsers","$validators","invalidFormatMessage","date_field_invalid_date_message","$setValidity","runValidators","$validate","hasRequiredError","$error","required","hasMinMaxError","dateFormatValidator","resolveValidation","deferred","setInvalidFormatMessage","errorMessage","handleCustomFormattingValidation","formattingErrorMessage","formattedValue","skipValidation","dateChangeInternal","datepickerIsPristine","$pristine","customFormattingResult","formatValue","showButtonBar","closeOnSelection","inputName","bbDatepickerName","closeOnDateSelection","datepickerAppendToBody","toLowerCase","$asyncValidators","dateFormat","controllers","uibDatepickerPopup","bbDatepickerCustomValidate","$parsers","unshift","viewValue","newDate","$viewValue","modelValue","bbMoment","parseUTCString","dateArray","datePart","parseNoSeparatorDateString","yearIndex","monthIndex","dayIndex","yearBegin","monthBegin","dayBegin","substr","matchSeparator","match","dateHasSeparator","separator","valueArray","separatorAtEnd","separatorAtBeginning","hasTwoSeparators","anyPartIsZero","some","Number","isMomentParsable","yearParts","parseMoment","momentDate","isValid","toDate","bbDateRangePickerFactory","getTypeInfoFromDateRangePickerValue","dateRangePickerValue","getDateRangeTypeInfo","info","dateRangeType","getDateRangeTypeCaption","isNumber","dateRangeTypes","AT_ANY_TIME","dateRangeMap","getDateRangeFilterDescription","description","getDateRangeOptions","optionTypes","dateRangeOptions","includeDefault","YESTERDAY","TODAY","TOMORROW","LAST_WEEK","THIS_WEEK","NEXT_WEEK","LAST_MONTH","THIS_MONTH","NEXT_MONTH","LAST_QUARTER","THIS_QUARTER","NEXT_QUARTER","LAST_CALENDAR_YEAR","THIS_CALENDAR_YEAR","NEXT_CALENDAR_YEAR","LAST_FISCAL_YEAR","THIS_FISCAL_YEAR","NEXT_FISCAL_YEAR","includePast","includeSpecific","SPECIFIC_RANGE","defaultDateRangeOptions","specificDateRangeOptions","pastDateRangeOptions","concat","date_range_picker_at_any_time","date_range_picker_filter_description_at_any_time","date_range_picker_yesterday","date_range_picker_filter_description_yesterday","date_range_picker_today","date_range_picker_filter_description_today","date_range_picker_tomorrow","date_range_picker_filter_description_tomorrow","date_range_picker_last_week","date_range_picker_filter_description_last_week","date_range_picker_this_week","date_range_picker_filter_description_this_week","date_range_picker_next_week","date_range_picker_filter_description_next_week","date_range_picker_last_quarter","date_range_picker_filter_description_last_quarter","date_range_picker_this_quarter","date_range_picker_filter_description_this_quarter","date_range_picker_next_quarter","date_range_picker_filter_description_next_quarter","date_range_picker_last_calendar_year","date_range_picker_filter_description_last_calendar_year","date_range_picker_this_calendar_year","date_range_picker_filter_description_this_calendar_year","date_range_picker_next_calendar_year","date_range_picker_filter_description_next_calendar_year","date_range_picker_last_fiscal_year","date_range_picker_filter_description_last_fiscal_year","date_range_picker_this_fiscal_year","date_range_picker_filter_description_this_fiscal_year","date_range_picker_next_fiscal_year","date_range_picker_filter_description_next_fiscal_year","date_range_picker_this_month","date_range_picker_filter_description_this_month","date_range_picker_next_month","date_range_picker_filter_description_next_month","date_range_picker_last_month","date_range_picker_filter_description_last_month","date_range_picker_specific_range","date_range_picker_filter_description_specific_range","bbDateRangePickerDirective","bbDateRangePicker","bbDateRangePickerValue","bbDateRangePickerAutomationId","bbDateRangePickerOptions","fromDate","pickerLabel","dateRangeTypeValue","infoFunction","dateRangeForm","$valid","newVal","copy","specificRangeIsVisible","noLabels","bbDateRangePickerNoLabels","toPlaceholder","date_range_picker_to_date","fromPlaceholder","date_range_picker_from_date","makeErrorComponent","component","onDestroy","componentFn","ctrls","bbError","controllerName","getCtrlPropName","BBErrorController","addComponentSetter","ctrl","propName","components","forEach","watchForComponent","cls","empty","append","BBErrorModalController","$uibModalInstance","bbModal","run","target","hasClass","bbFileDrop","hasTranscludeContents","trim","allowLinks","bbFileDropLink","addLink","bbFileDropLinkChange","fileChange","$files","$rejectedFiles","bbFileDropChange","ngf-allow-dir","bbFileDropAllowDir","ngf-accept","bbFileDropAccept","ngf-multiple","bbFileDropMultiple","ngf-min-size","bbFileDropMinSize","ngf-max-size","bbFileDropMaxSize","bbFileDropNoclick","bbFileItem","getFileTypeUpper","fileType","getFileExtensionUpper","extension","lastIndexOf","isFile","isImg","slashIndex","fileTypeUpper","extensionUpper","otherCls","itemDelete","bbFileSize","formattedSize","roundedSize","decimalPlaces","file_size_b_singular","file_size_b_plural","file_size_kb","file_size_mb","file_size_gb","pow","replaceTag","tag","tagsToReplace","isEmpty","str","&","<",">","String","capture","parseInt","escape","buildCategoryList","categories","columnCompare","a","b","toLocaleLowerCase","getInitialSelectedColumns","selectedIds","selectedColumns","BBGridColumnPickerController","availableColumns","initialSelectedColumnIds","columnPickerHelpKey","listMode","initialSelectedColumns","sort","applyChanges","scopeColumns","columnIds","columnId","$close","bbMultiselectActions","bbSelectionsUpdated","actions","showActionBar","mobileButtons","showMobileActions","bbGrid","updateActionBar","action","visibleSelected","getVisibleSelections","selections","syncActionBarViewKeeper","newBreakpoints","$watchCollection","selectedRows","clearSelection","resetMultiselect","toggleMultiselectRows","chooseAction","cancelChooseAction","bbHelp","bbOptions","applyFilters","updateFilters","filters","getCurrent","expanded","clearFilters","animateFilters","isExpanded","animationDuration","box","filtersContainer","show","animate","duration","complete","hide","viewKeeperOptions","viewKeeperChangedHandler","viewKeeperOffsetElId","toggleFilterMenu","isOpen","openFilterMenu","parents","prepend","setFilters","bbGridFiltersGroupLabel","isCollapsed","toolbarContainer","syncViewKeepers","arrayObjectIndexOf","array","obj","DEFAULT_ITEMS_PER_PAGE","DEFAULT_MAX_PAGES","DEFAULT_COLUMN_SIZE","MULTISELECT_COLUMN_SIZE","DROPDOWN_TOGGLE_COLUMN_SIZE","DROPDOWN_TOGGLE_COLUMN_NAME","MULTISELECT_COLUMN_NAME","toggleDropdown","is_open","getContextMenuItems","rowData","bbViewKeeperBuilder","bbHighlight","$controller","multiselectActions","updateMultiselectActions","paginationOptions","visibleSelectedRows","syncGridHeaderScrollToTopScrollbar","topScrollbarScroll","gridId","$id","hasAdd","hasColPicker","hasFilters","applySearchText","customToolbar","hasCustomToolbar","bbGridCustomToolbar","getTopScrollbar","getTopScrollbarDiv","updateGridLoadedTimestampAndRowCount","count","timestamp","rowcount","reInitGrid","selectedColumnIds","tableEl","grid","initGrid","setRows","buildColumnClasses","classes","exclude_from_search","getEmptyString","buildCellAttribute","rowId","cellValue","rawObject","getInd","getColumnById","resetExtendedColumn","extendedColumnName","currentExtendedColumnWidth","originalExtendedColumnWidth","extendedColumnIndex","needsExtendedColumnResize","getBreakpointsWidth","columnDefault","width_all","width_xs","sm","width_sm","md","width_md","lg","width_lg","buildColumnModel","colWidth","gridColumn","colModel","hasTemplatedColumns","fixed","sortable","label","hidedlg","resizable","search","template_url","dropdown_template","cellattr","formatter","is_context_menu","compiledTemplates","totalColumnWidth","tableWrapper","multiselect","toString","align","right_align","center_align","jsonmap","allow_see_more","seemore_template","colFormatter","getColumnElementIdFromName","columnName","getColumnNameFromElementId","getDesiredGridWidth","setScrollbarHeight","topScrollbar","topScrollbarDiv","scrollbarWidth","resetTopScrollbar","setColumnSize","columnSize","totalWidth","gridHeaders","bodyScrollLeft","colSizePx","tableGrid","bDiv","scrollLeft","style","cols","tblwidth","hDiv","resizeExtendedColumn","changedWidth","isIncreasing","extendedShrinkWidth","setGridWidth","resetGridWidth","oldWidth","newWidth","getLastIndex","lastIndex","resizeStart","jqGridEl","thEls","hasPristineColumns","tableWrapperWidth","fullGrid","resizeStartColWidth","syncHeaderToTableWrapper","vkHeader","isFixed","header","resizeStop","setSortStyles","className","headerElId","sortOptions","removeClass","descending","columnIsSortable","excludedColumns","highlightSearchText","not","linkCellValue","cell","linkFunction","cloned","afterInsertRow","rowid","rowdata","rowelem","columnData","itemScope","row","rowIndex","tableBody","columnModel","$new","skyResources","cellScopes","setSelection","setColumnHeaderAlignment","alignmentClass","setLabel","gridComplete","gridColumnsReordered","orderedColumns","oldIndex","offset","newSelectedColumnIds","reorderingColumns","getSortable","update","exclude","clearSelectedRowsObject","resetSelection","onSelectAll","rowIds","status","allRowData","localRowSelect","getDataIDs","onSelectRow","setMultiselectRow","beforeSelectRow","endIndex","lastSelectedRow","startIndex","shiftKey","getGridParam","pageChanged","skip","currentPage","itemsPerPage","top","initializePagination","maxPages","fancyCheckOff","off","wrapCheckboxEl","checkboxEl","setUpFancyCheckHeader","headerCheckEl","setUpFancyCheckCell","checkCellEl","getIdPrefix","jqGridOptions","useGridView","hoverrows","jqGrid","tableDomEl","columnCount","autoencode","datatype","gridView","idPrefix","multiselectWidth","rowNum","shrinktofit","destroy","showToolbar","fixedToolbar","create","boundaryEl","verticalOffSetElId","toolbarContainerId","setWidth","onStateChanged","gridCreated","destroyCellScopes","$destroy","loadColumnTemplates","callback","templateUrlsToLoad","handleTableWrapperResize","rows","addJSONData","setupToolbarViewKeepers","vkToolbars","vkActionBarAndBackToTop","isScrolled","fixToBottom","backToTop","scrollToTop","loadMore","loadMorePromise","moreRows","addRowData","doNotResetRows","windowEventId","windowEl","getScrollbarWidth","columnChangedData","willResetData","newSelections","syncElPosition","$watchGroup","f","$broadcast","hasWaitAndEmpty","loading","BBGridToolbar","searchEl","eq","openColumnPicker","columnPickerMode","hasInlineFilters","toolbarLocals","filtersVisible","moveInlineFilters","topScrollbarEl","onAddClick","onHelpLoaded","productId","customLocales","$state","bbHelpConfig","helpwidgetLoaded","BBHELP","HelpWidget","init","configOnHelpLoaded","initPromise","Error","ajax","done","config","getCurrentHelpKey","helpKeyOverride","pageData","helpKey","oldHelpKeyOverride","bbSetHelpKeyOverride","bbHelpKey","click","highlight","pat","classn","innerHighlight","node","pos","spannode","middlebit","middleclone","DEFAULT_CLASS_NAME","DATA_CLASS_NAME","nodeType","document","createElement","splitText","cloneNode","appendChild","parentNode","replaceChild","childNodes","test","each","removeHighlight","firstChild","normalize","end","highlightText","$eval","bbHighlightBeacon","$evalAsync","ngBind","runRegisterEnquire","registerEnquire","enquire","updateStatus","newSize","handler","bp","handlers","registerQuery","queries","mediaQueries","mediaBreakpointsConfig","mediaBreakpoints","openModalCount","$uibModal","opts","modalClosed","isIOS","bodyEl","scrollTop","modalInstance","navigator","userAgent","body","backdrop","windowClass","getPixelValue","getModalBodyWrapperMargin","margin","outerHeight","setBodyEl","fitToWindow","modalParentEl","newMaxHeight","reservedHeight","resizeTimeout","window","modalCtrl","bbModalHelpKey","children","modal_footer_primary_button","modal_footer_cancel_button","moment","runRegisterMoment","registerMoment","toggleOpen","appLookupUrl","enableHelp","enableSearch","searchPlaceholder","serviceName","signOutUrl","tenantId","bbOmnibarConfig","afterLoad","searchValue","searchBox","omnibarEl","searchContainer","keyCode","searching","userLoaded","userData","omnibarIndicatesNullUserTime","authenticationUserId","localStorage","parse","location","href","omnibarMenuEl","loadOptions","menuEl","BBAUTH","Omnibar","redirectUrl","notFoundUrl","pageStatuses","LOADING","LOADED","NOT_AUTHORIZED","NOT_FOUND","bbPage","bbPageConfig","$location","navigateAway","origin","noPageStatusSpecified","onShowing","bbPageUsesLoadManager","path","bbPageStatus","makePageSummaryComponent","bbPageSummary","pageSummaryModule","BBPageSummaryController","getPageSummaryLeftCls","col-sm-9","keyInfoCtrl","breakpoint","toEl","keyInfoEl","evtNsPos","paginationConfig","maxSize","nextText","previousText","sourceData","setPageData","startingIndex","paging","disabled","totalItems","paginationDisabled","pagedData","bbPagination","paginationDummyEl","paginationEl","clone","before","$animate","removeWindowResizeHandler","evtNs","trySetMinHeight","changePage","pageNumber","enabled","maxHeight","tries","pageCount","max","windowResizeTimeout","ceil","bbPaletteConfig","multi","mono","getPaletteByType","paletteType","getColorByIndex","palette","requestedLength","paletteLength","r","bbPopoverTemplate","bbPopoverOpenAttr","bbPopoverAttr","bbUibPopoverTemplate","$uibTooltip","tooltip","useContentExp","bbUibPopoverTemplatePopup","contentExp","placement","popupClass","animation","originScope","closePopover","origScope","popoverIsOpenAttr","scopeId","has","bbResoucesFilter","serviceModules","CLS_HIGHLIGHTING","RETRY_INTERVAL","RETRY_MAX","reservedBottom","reservedTop","bbScrollIntoViewConfig","highlightEl","one","getScrollableParentEl","overflowY","parentEl","getHtmlOrBodyScrollTop","scrollIntoView","currentScrollTop","elBottom","elHeight","elOffset","elTop","elToScroll","isScrolledOffBottom","isScrolledOffTop","newScrollTop","parentElIsBody","parentHeight","viewportHeight","always","bbScrollIntoView","doScroll","firstTry","previousTimeout","retryCount","bbScrollIntoViewHighlight","$select","sizeMatchItems","updateIfVisible","containerOffsetWidth","visible","selectContainerEl","matchEl","overflow","textOverflow","maxWidth","offsetWidth","origSizeSearchInputFunc","multiple","sizeSearchInput","updateUIForSearch","showSearchingMsg","msg","msgEl","searchfield_searching","searchfield_no_records","clearResults","refresh","tabScrollId","getNavTabsEl","getScrollLeftForEl","navTabsEl","selector","elWidth","tabEl","tabLeft","tabPosition","tabRight","getScrollLeft","stopAnimateTabScroll","stop","animateTabScroll","showTabsCanScroll","force","hasOverflow","overflowOccurred","previousHadOverflow","scrollWidth","lastWindowResizeTimeout","lastWindowWidth","bbTabScrollReady","windowWidth","getTemplate","tabset","ulEl","liEl","bbTabsetAdd","bbTabsetOpen","bbTabAdd","bbTabOpen","BBTabsetCollapsibleController","updateCollapsibleHeader","bbTabsetOptions","selectedTabHeader","tabAdded","isSmallScreen","tabCount","setupCollapsibleTabs","tabRemoved","bbTabsetCollapsible","getBootstrapTabs","getDropdownEl","setTabMaxWidth","setDropdownMaxWidth","availableWidth","addOpenButtonEl","dropdownTextMaxWidth","addOpenWidth","DROPDOWN_CARET_WIDTH","TAB_PADDING","tabsEl","dropdownContainerEl","dropdownButtonsEl","tabCollapseId","collapsibleTabTitle","bbTabsetCollapsibleCtrl","getTabHeading","tabScope","active","collapseTitle","bbTabCollapseHeader","tab","$rootScope","checkCurrentState","sref","tabsetCtrl","stateChangeDeregistration","bbTabSref","go","createItemClassName","insertTemplateItems","templateEl","BB_TEMPLATE_RESULT","createTemplateHtml","addItem","newEl","templateHtml","oldEl","bbFormatCtrl","getNewlineCount","matches","templateName","BBTextExpandController","textExpandContent","headerContent","closeText","modules","bbTextExpandRepeaterData","maxToShow","seeMoreEl","seeMoreText","text_expand_see_more","seeLessText","text_expand_see_less","bbTextExpandRepeaterMax","siblings","toggle","toggleClass","getTruncatedText","newlines","maxLength","bbTextExpandMaxLength","maxExpandedLength","bbTextExpandMaxExpandedLength","maxNewlines","maxExpandedNewlines","bbTexExpandMaxExpandedNewlines","bbTextExpand","animateText","newText","newExpandText","showEllipsis","currentHeight","containerEl","expandEl","textEl","newHeight","ellipsisEl","collapsedText","expandedText","spaceEl","bbTextExpandModalTitle","text_expand_modal_title","text_expand_close_text","moveTilesToContainer","sourceContainer","targetContainer","tiles","tileId","tile","parseTileOrder","container","dashboardCtrl","tileIsCollapsed","smallTileDisplayMode","collapsed_small","collapsed","updateTileState","oldCollapsed","displayModeChanging","tileInitialized","contentEl","updateHeaderContent","wrapperEl","hasHeaderContent","headerContentEl","initializeTile","dashboardState","bbTileCollapsed","titleClick","hasSettings","bbTileSettingsClick","dashboardInitialized","getDashboardState","layoutTiles","tileHeader","setHeaderContentEl","tileCtrl","layout","allCollapsed","parseColumnTiles","singleColumnMode","one_column_layout","column1","two_column_layout","column2","fireDisplayModeChanged","mediabreakpointChangeHandler","breakPoints","sortableOptions","connectWith","opacity","handle","placeholder","forcePlaceholderSize","revert","collapsedProp","bbTileDashboardAllCollapsed","validateOptions","message","toastrConfig","closeButton","newestOnTop","positionClass","tapToDismiss","timeOut","toastr","$injector","getResolvePromises","resolves","promisesArr","when","invoke","iconClass","openMessage","openWithTemplate","insertTemplateInToast","toast","elId","controllerLocals","resolvesPromise","toastScope","resolveIter","resolvedVars","key","allowHtml","bbTooltip","encodeURIComponent","EMAIL_REGEXP","elm","email","$isEmpty","getSpacerId","vk","setElPosition","elQ","bottom","unfixEl","CLS_VIEWKEEPER_FIXED","currentElFixedLeft","currentElFixedTop","currentElFixedBottom","currentElFixedWidth","calculateVerticalOffset","verticalOffSetElTop","verticalOffSet","verticalOffSetEl","ViewKeeper","viewportMarginTop","setPlaceholderHeight","prototype","anchorTop","anchorHeight","isCurrentlyFixed","documentQ","fixEl","boundaryBottom","boundaryOffset","boundaryQ","boundaryTop","elFixedLeft","elFixedTop","elFixedBottom","elFixedWidth","needsUpdating","spacerHeight","spacerId","spacerQ","min","innerHeight","trigger","verticalOffset","isDestroyed","$document","bbViewKeeperConfig","destroyVk","bbBoundaryElId","bbScrollingViewKeeper","scroll","elementStart","scrollPos","scrollY","pageYOffset","scrollingDown","prevScroll","offsetHeight","tempTop","isBlockUISupported","blockUI","isFullPage","getWaitCount","nonBlockWaitCountAttr","waitCountAttr","setWaitCount","removeData","nonblockEl","childOptions","nonblock","addWait","unNonblockEl","removeWait","blockEl","showFullBlock","$el","showingWaitAttr","fullPageVisibleBlockOptions","customBlockOptions","block","visibleBlockOptions","visualBlockDelay","fadeIn","fullPageClearBlockOptions","clearBlockOptions","unblockEl","unblockUI","unblock","clearAllWaits","fullPageZIndex","fadeOut","overlayCSS","z-index","beginElWait","beginPageWait","clearElWait","clearPageWait","endElWait","endPageWait","bbWait","firstScopeLoad","productName","bbWindowConfig","calculateScrollbarWidth","inner","outer","w1","w2","clientWidth","setWindowTitle","textToAppend","bbWizardStepComplete","stepIsDisabled","step","getPreviousStep","previousStep","steps","getNextStep","nextStep","setActiveStep","lastStepIsActive","finish","wizard_navigator_previous","wizard_navigator_finish","wizard_navigator_next","goToPrevious","goToNext","previousDisabled","nextDisabled","ignore","bbResourcesOverrides","alert_close","checklist_select_all","checklist_clear_all","checklist_no_items","grid_back_to_top","grid_column_picker_all_categories","grid_column_picker_description_header","grid_column_picker_header","grid_column_picker_name_header","grid_column_picker_search_placeholder","grid_column_picker_submit","grid_columns_button","grid_filters_apply","grid_filters_button","grid_filters_clear","grid_filters_header","grid_filters_hide","grid_filters_summary_header","grid_load_more","grid_search_placeholder","grid_column_picker_search_no_columns","month_short_april","month_short_august","month_short_december","month_short_february","month_short_january","month_short_july","month_short_june","month_short_march","month_short_may","month_short_november","month_short_october","month_short_september","page_noaccess_button","page_noaccess_description","page_noaccess_header","grid_action_bar_clear_selection","grid_action_bar_cancel_mobile_actions","grid_action_bar_choose_action","date_range_picker_min_date_error","date_range_picker_max_date_error","errormodal_ok","file_upload_drag_file_here","file_upload_drop_files_here","file_upload_invalid_file","file_upload_link_placeholder","file_upload_or_click_to_browse","file_upload_paste_link","file_upload_paste_link_done","datepicker_today","datepicker_clear","datepicker_close","put"],"mappings":"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,eAAA+jD,IAAA,qCACA,+CAEA/jD,eAAA+jD,IAAA,gCACA,+hCAmBA/jD,eAAA+jD,IAAA,yCACA,maASA/jD,eAAA+jD,IAAA,2CACA,oDACA/jD,eAAA+jD,IAAA,6CACA;A;ApI5qtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AClprNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACnrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACvbhpnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxvlxxvplpjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACnpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACplzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACllhtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACpdlRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACdfile":"sky.js","sourceRoot":"../..","sourcesContent":["/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.alert', ['sky.alert.directive']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.avatar', ['sky.avatar.config', 'sky.avatar.directive']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.error', ['sky.error.directive', 'sky.errormodal.service']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.pagesummary', []);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbActionBar() {\n        return {\n            controller: angular.noop,\n            controllerAs: 'bbActionBar',\n            bindToController: true,\n            scope: {},\n            transclude: true,\n            restrict: 'E',\n            templateUrl: 'sky/templates/actionbar/actionbar.html'\n        };\n    }\n\n    function bbActionBarItemGroup(bbResources, bbMediaBreakpoints) {\n        return {\n            replace: true,\n            transclude: true,\n            controller: function () {\n                var vm = this;\n\n                if (vm.title === null || angular.isUndefined(vm.title)) {\n                    vm.title = bbResources.action_bar_actions;\n                }\n            },\n            controllerAs: 'bbActionBarItemGroup',\n            bindToController: {\n                title: '=?bbActionBarItemGroupTitle'\n            },\n            restrict: 'E',\n            scope: {},\n            link: function ($scope, el) {\n                function mediaBreakpointHandler(breakpoints) {\n                    if (breakpoints.xs) {\n                        el.find('.bb-action-bar-buttons > ng-transclude').appendTo(el.find('.bb-action-bar-dropdown > .dropdown > ul'));\n                    } else {\n                        el.find('.bb-action-bar-dropdown .dropdown > ul > ng-transclude').appendTo(el.find('.bb-action-bar-buttons'));\n                    }\n                }\n\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                $scope.$on('$destroy', function () {\n                    bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                });\n            },\n            templateUrl: 'sky/templates/actionbar/actionbaritemgroup.html'\n        };\n    }\n\n    bbActionBarItemGroup.$inject = ['bbResources', 'bbMediaBreakpoints'];\n\n    function bbActionBarItem(bbMediaBreakpoints) {\n        return {\n            replace: true,\n            controller: angular.noop,\n            controllerAs: 'bbActionBarItem',\n            bindToController: true,\n            scope: {},\n            require: '?^bbActionBarItemGroup',\n            transclude: true,\n            restrict: 'E',\n            link: function ($scope, el, attrs, groupCtrl) {\n\n                function mediaBreakpointHandler(breakpoints) {\n                    if (breakpoints.xs) {\n                        if (!el.parent().is('li')) {\n                            el.wrap('<li></li>');\n                        }\n\n                    } else {\n                        if (el.parent().is('li')) {\n                            el.unwrap();\n                        }\n                    }\n                }\n\n                if (groupCtrl !== null) {\n                    bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                    $scope.$on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                        //get rid of wrapper on destroy\n                        if (el.parent().is('li')) {\n                            el.unwrap();\n                        }\n                    });\n                }\n            },\n            templateUrl: 'sky/templates/actionbar/actionbaritem.html'\n        };\n    }\n\n    bbActionBarItem.$inject = ['bbMediaBreakpoints'];\n\n    angular.module('sky.actionbar', ['sky.resources', 'sky.mediabreakpoints', 'ui.bootstrap.dropdown'])\n        .directive('bbActionBar', bbActionBar)\n        .directive('bbActionBarItemGroup', bbActionBarItemGroup)\n        .directive('bbActionBarItem', bbActionBarItem);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbAlert() {\n        function Controller() {\n\n        }\n\n        function link(scope, el, attrs, vm) {\n            vm.close = function () {\n                vm.bbAlertClosed = true;\n            };\n        }\n\n        return {\n            restrict: 'E',\n            controller: Controller,\n            controllerAs: 'bbAlert',\n            bindToController: {\n                bbAlertType: '@',\n                bbAlertCloseable: '@',\n                bbAlertClosed: '='\n            },\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/alert/alert.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.alert.directive', ['sky.resources'])\n        .directive('bbAlert', bbAlert);\n}());\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.autofocus', [])\n        .directive('bbAutofocus', ['$timeout', function ($timeout) {\n            return {\n                restrict: 'A',\n                link: function ($scope, $element) {\n                    /*jslint unparam: true */\n                    $timeout(function () {\n                        $element.focus();\n                    }, 500);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function getBaseSettings(bbAutoNumericConfig, configType) {\n        var baseSettings,\n            configSettings;\n\n        baseSettings = angular.extend(\n            {},\n            $.fn.autoNumeric.defaults,\n            bbAutoNumericConfig.number\n        );\n\n        if (configType) {\n            configSettings = bbAutoNumericConfig[configType];\n        }\n\n        if (configSettings) {\n            angular.extend(baseSettings, configSettings);\n        }\n\n        return baseSettings;\n    }\n\n    angular.module('sky.autonumeric', ['sky.resources', 'sky.window'])\n        .constant('bbAutonumericConfig', {\n            number: {\n                aSep: ',',\n                dGroup: 3,\n                aDec: '.',\n                pSign: 'p',\n                mDec: 2\n            },\n            money: {\n                aSign: '$'\n            }\n        })\n        .directive('bbAutonumeric', ['$timeout', 'bbAutonumericConfig', 'bbWindow', function ($timeout, bbAutoNumericConfig, bbWindow) {\n            return {\n                require: 'ngModel',\n                restrict: 'A',\n                link: function ($scope, el, attrs, ngModel) {\n                    var customSettings = {},\n                        isIosUserAgent = bbWindow.isIosUserAgent();\n\n                    function applySettings() {\n                        el.autoNumeric('update', angular.extend({}, getBaseSettings(bbAutoNumericConfig, attrs.bbAutonumeric), customSettings));\n                    }\n\n                    function applyCssSettings(el) {\n                        if (attrs.bbAutonumeric) {\n                            el.addClass('bb-autonumeric-' + attrs.bbAutonumeric);\n                        }\n                    }\n\n                    function autonumericChange() {\n                        return $scope.$apply(function () {\n\n                            var value = parseFloat(el.autoNumeric('get'));\n\n                            if (isNaN(value)) {\n                                value = null;\n                            }\n                            return ngModel.$setViewValue(value);\n                        });\n                    }\n\n                    if (attrs.bbAutonumericSettings) {\n                        $scope.$watch(attrs.bbAutonumericSettings, function (newValue) {\n                            customSettings = newValue || {};\n                            applySettings();\n                        }, true);\n                    }\n\n                    el.autoNumeric(getBaseSettings(bbAutoNumericConfig, attrs.bbAutonumeric));\n                    applyCssSettings(el);\n\n                    // If a valid number, update the autoNumeric value.\n                    // Also handles the model being updated, but being in correct (usually a paste).\n                    // In that case, updates the model to what the autoNumeric plugin's value.\n                    $scope.$watch(attrs.ngModel, function (newValue, oldValue) {\n                        var getValue,\n                            selectionStart;\n                        if (newValue !== undefined && newValue !== null && !isNaN(newValue)) {\n\n                            if (parseFloat(newValue) !== parseFloat(oldValue)) {\n\n                                selectionStart = el[0].selectionStart;\n                            }\n\n                            el.autoNumeric('set', newValue);\n                            getValue = el.autoNumeric('get');\n                            if (parseFloat(getValue) !== parseFloat(newValue)) {\n                                $timeout(autonumericChange);\n                            } else if (el[0] && angular.isFunction(el[0].setSelectionRange) && angular.isDefined(selectionStart)) {\n                                $timeout(function () {\n                                    el[0].setSelectionRange(selectionStart, selectionStart);\n                                });\n                            }\n                        } else if (newValue === null) {\n                            el.val(null);\n\n                        }\n                    });\n\n                    el.on('keydown', function (event) {\n                        if (event.which === 13) {\n                            autonumericChange();\n                        }\n                    });\n\n                    el.on('change paste onpaste', function () {\n                        autonumericChange();\n\n                    });\n\n                    // When focusing in textbox, select all.  This is to workaround not having placeholder text for autonumeric.\n                    /*\n                        istanbul ignore next: the test for this code isn't passing on IE 10 on BrowserStack in automated mode.\n                        This isn't mission-critical so I'm just ignoring it for now.\n                    */\n                    el.on('focusin.bbAutonumeric', function () {\n                        $timeout(function () {\n                            // Check to ensure the field still has focus once the $timeout callback is executed.\n                            // https://github.com/blackbaud/skyux/issues/64\n                            if (el.is(':focus')) {\n                                if (!isIosUserAgent) {\n                                    el.select();\n                                } else {\n                                    //use setSelectionRange instead of select because select in a timeout does not work with iOS\n                                    el[0].setSelectionRange(0, 9999);\n                                }\n                            }\n                        });\n                    });\n\n                }\n            };\n        }])\n        .filter('bbAutonumeric', ['bbAutonumericConfig', 'bbResources', function (bbAutonumericConfig, bbResources) {\n            return function (input, configType, abbreviate) {\n                var aSign,\n                    dividend,\n                    mDec,\n                    formatted,\n                    settings,\n                    suffix,\n                    tempEl;\n\n                if (input === null || angular.isUndefined(input)) {\n                    return '';\n                }\n\n                if (isNaN(input)) {\n                    return input;\n                }\n\n\n                tempEl = $('<span></span>');\n\n                settings = getBaseSettings(bbAutonumericConfig, configType);\n\n                if (abbreviate) {\n                    if (settings.pSign === 's') {\n                        // The suffix needs to go between the number and the currency symbol, so the currency\n                        // symbol has to be left off and appended after the number is formatted.\n                        aSign = settings.aSign;\n                        settings.aSign = '';\n                    }\n\n                    input = Math.round(input);\n\n                    if (input >= 1000000000) {\n                        dividend = 100000000;\n                        suffix = bbResources.autonumeric_abbr_billions;\n                    } else if (input >= 1000000) {\n                        dividend = 100000;\n                        suffix = bbResources.autonumeric_abbr_millions;\n                    } else if (input >= 10000) {\n                        dividend = 100;\n                        suffix = bbResources.autonumeric_abbr_thousands;\n                    }\n\n                    if (suffix) {\n                        input = Math.floor(input / dividend) / 10;\n                        mDec = Math.floor(input) === input ? 0 : 1;\n                    } else {\n                        mDec = 0;\n                    }\n\n                    settings.mDec = mDec;\n                }\n\n                tempEl.autoNumeric(settings);\n                tempEl.autoNumeric('set', input);\n\n                formatted = tempEl.text();\n\n                if (suffix) {\n                    formatted += suffix;\n                }\n\n                if (abbreviate && settings.pSign === 's' && aSign) {\n                    formatted += aSign;\n                }\n\n                return formatted;\n            };\n        }]);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var bbAvatarConfig = {\n        maxFileSize: 500000\n    };\n\n    angular.module('sky.avatar.config', [])\n        .constant('bbAvatarConfig', bbAvatarConfig);\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function bbAvatar($filter, $templateCache, $window, bbAvatarConfig, bbErrorModal, bbFormat, bbPalette, bbResources) {\n        function link(scope, el, attrs, vm) {\n            var blobUrl,\n                templateLoaded;\n\n            function setImageUrl(url) {\n                el.find('.bb-avatar-image').css('background-image', 'url(' + url + ')');\n            }\n\n            function getInitial(name) {\n                return name.charAt(0).toUpperCase();\n            }\n\n            function getInitials(name) {\n                var initials,\n                    nameSplit;\n\n                if (name) {\n                    nameSplit = name.split(' ');\n                    initials = getInitial(nameSplit[0]);\n\n                    /* istanbul ignore else this is tested through a visual regression test */\n                    if (nameSplit.length > 1) {\n                        initials += getInitial(nameSplit[nameSplit.length - 1]);\n                    }\n                }\n\n                return initials;\n            }\n\n            function getPlaceholderColor(name) {\n                var colorIndex,\n                    colors = bbPalette.getColorSequence(6),\n                    seed;\n\n                if (name) {\n                    // Generate a unique-ish color based on the record name.  This is deterministic\n                    // so that a given name will always generate the same color.\n                    seed = name.charCodeAt(0) + name.charCodeAt(name.length - 1) + name.length;\n                    colorIndex = Math.abs(seed % colors.length);\n                } else {\n                    colorIndex = 0;\n                }\n\n                return colors[colorIndex];\n            }\n\n            function drawPlaceolderImage() {\n                var canvas,\n                    context,\n                    devicePixelRatio,\n                    fontSize = \"46px\",\n                    initials,\n                    name,\n                    size = 100;\n\n                name = vm.bbAvatarName;\n                initials = getInitials(name);\n\n                canvas = el.find('.bb-avatar-initials')[0];\n                context = canvas.getContext('2d');\n\n                devicePixelRatio = $window.devicePixelRatio;\n\n                /* istanbul ignore else */\n                if (devicePixelRatio) {\n                    $(canvas)\n                        .attr('width', size * devicePixelRatio)\n                        .attr('height', size * devicePixelRatio);\n\n                    context.scale(devicePixelRatio, devicePixelRatio);\n                }\n\n                context.fillStyle = getPlaceholderColor(name);\n                context.fillRect(0, 0, canvas.width, canvas.height);\n\n                if (initials) {\n                    context.font = fontSize + ' Arial';\n                    context.textAlign = 'center';\n                    context.fillStyle = '#FFF';\n                    context.fillText(initials, size * 0.5, size * (2 / 3));\n                }\n            }\n\n            function revokeBlobUrl() {\n                if (blobUrl) {\n                    $window.URL.revokeObjectURL(blobUrl);\n                    blobUrl = null;\n                }\n            }\n\n            function loadPhoto() {\n                var src,\n                    url;\n\n                revokeBlobUrl();\n\n                if (templateLoaded) {\n                    src = vm.bbAvatarSrc;\n\n                    if (src) {\n                        if (src instanceof $window.File) {\n                            url = $window.URL.createObjectURL(src);\n\n                            // Keep the last blob URL around so we can revoke it later.\n                            // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\n                            blobUrl = url;\n                        } else {\n                            url = src;\n                        }\n\n                        setImageUrl(url);\n                    } else {\n                        drawPlaceolderImage();\n                    }\n                }\n            }\n\n            function handleInvalidFileDrop(rejectedFile) {\n                var errorDescription,\n                    errorTitle,\n                    maxFileSizeFormatted;\n\n                if (rejectedFile.type.toUpperCase().indexOf('IMAGE/') !== 0) {\n                    errorDescription = bbResources.avatar_error_not_image_description;\n                    errorTitle = bbResources.avatar_error_not_image_title;\n                } else {\n                    maxFileSizeFormatted = $filter('bbFileSize')(bbAvatarConfig.maxFileSize);\n\n                    errorDescription = bbFormat.formatText(bbResources.avatar_error_too_large_description, maxFileSizeFormatted);\n                    errorTitle = bbResources.avatar_error_too_large_title;\n                }\n\n                bbErrorModal.open({\n                    errorDescription: errorDescription,\n                    errorTitle: errorTitle\n                });\n            }\n\n            vm.onTemplateLoad = function () {\n                templateLoaded = true;\n            };\n\n            vm.photoDrop = function (files, rejectedFiles) {\n                if (angular.isArray(rejectedFiles) && rejectedFiles.length > 0) {\n                    handleInvalidFileDrop(rejectedFiles[0]);\n                } else {\n                    vm.bbAvatarChange({\n                        file: files[0]\n                    });\n                }\n            };\n\n            vm.showInitials = function () {\n                return !!(vm.bbAvatarName && !vm.bbAvatarSrc);\n            };\n\n            if (attrs.bbAvatarChange) {\n                vm.canChange = true;\n            }\n\n            scope.$watch(function () {\n                return templateLoaded;\n            }, loadPhoto);\n\n            scope.$watch(function () {\n                return vm.bbAvatarSrc;\n            }, loadPhoto);\n\n            scope.$watch(function () {\n                return vm.bbAvatarName;\n            }, loadPhoto);\n\n            scope.$on('$destroy', function () {\n                revokeBlobUrl();\n            });\n\n            vm.maxFileSize = bbAvatarConfig.maxFileSize;\n        }\n\n        function template(el) {\n            var dropEl;\n\n            el.html($templateCache.get('sky/templates/avatar/avatar.directive.html'));\n\n            dropEl = el.find('.bb-avatar-file-drop');\n\n            dropEl.attr('bb-file-drop-max-size', bbAvatarConfig.maxFileSize);\n        }\n\n        return {\n            scope: {},\n            bindToController: {\n                bbAvatarSrc: '=',\n                bbAvatarName: '=',\n                bbAvatarChange: '&'\n            },\n            controller: angular.noop,\n            controllerAs: 'bbAvatar',\n            link: link,\n            template: template\n        };\n    }\n\n    bbAvatar.$inject = ['$filter', '$templateCache', '$window', 'bbAvatarConfig', 'bbErrorModal', 'bbFormat', 'bbPalette', 'bbResources'];\n\n    angular.module('sky.avatar.directive', ['sky.avatar.config', 'sky.error', 'sky.format', 'sky.palette', 'sky.resources'])\n        .directive('bbAvatar', bbAvatar);\n}(jQuery));\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.check', [])\n        .directive('bbCheck', ['$templateCache', function ($templateCache) {\n            function createEl(name) {\n                return angular.element($templateCache.get('sky/templates/check/' + name + '.html'));\n            }\n\n            return {\n                link: function (scope, el, attr) {\n                    var labelEl = el.parent('label'),\n                        styledEl,\n                        typeClass;\n\n                    if (labelEl.length < 1) {\n                        el.wrap(createEl('wrapper'));\n                    } else {\n                        labelEl.addClass('bb-check-wrapper');\n                    }\n                    if (attr.type === 'radio') {\n                        typeClass = 'bb-check-radio';\n                    } else {\n                        typeClass = 'bb-check-checkbox';\n                    }\n\n                    styledEl = createEl('styled');\n                    styledEl.addClass(typeClass);\n\n                    el.after(styledEl);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var SEARCH_PROPS = ['title', 'description'];\n\n    function bbChecklist(bbChecklistUtility) {\n        return {\n            replace: true,\n            restrict: 'E',\n            transclude: true,\n            templateUrl: 'sky/templates/checklist/checklist.html',\n            scope: {\n                bbChecklistItems: '=',\n                bbChecklistSelectedItems: '=',\n                bbChecklistFilterCallback: '=',\n                bbChecklistIncludeSearch: '=',\n                bbChecklistSearchDebounce: '=',\n                bbChecklistSearchPlaceholder: '@',\n                bbChecklistNoItemsMessage: '@',\n                bbChecklistAutomationField: '=',\n                bbChecklistCategories: '=',\n                bbChecklistMode: '@'\n            },\n            controller: ['$scope', function ($scope) {\n                var locals = $scope.locals = {};\n\n                this.setColumns = function (columns) {\n                    locals.columns = columns;\n                };\n            }],\n            link: function ($scope, el, attrs) {\n                var filterLocal = angular.isDefined(attrs.bbChecklistFilterLocal),\n                    locals = $scope.locals;\n\n                function itemMatchesCategory(item, category) {\n                    return !category || item.category === category;\n                }\n\n                function itemMatchesFilter(item, category, searchTextUpper) {\n                    var p,\n                        i,\n                        len,\n                        val;\n\n                    if (itemMatchesCategory(item, category)) {\n                        if (!searchTextUpper) {\n                            return true;\n                        }\n\n                        for (i = 0, len = SEARCH_PROPS.length; i < len; i++) {\n                            p = SEARCH_PROPS[i];\n                            if (item.hasOwnProperty(p)) {\n                                val = item[p];\n\n                                if (angular.isString(val) && val.toUpperCase().indexOf(searchTextUpper) >= 0) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n\n                function invokeFilterLocal() {\n                    var filteredItems,\n                        i,\n                        item,\n                        items = $scope.bbChecklistItems,\n                        n,\n                        searchTextUpper = (locals.searchText || '').toUpperCase(),\n                        selectedCategory = locals.selectedCategory;\n\n                    if (!searchTextUpper && !selectedCategory) {\n                        filteredItems = items.slice(0);\n                    } else {\n                        filteredItems = [];\n\n                        for (i = 0, n = items.length; i < n; i++) {\n                            item = items[i];\n\n                            if (itemMatchesFilter(item, selectedCategory, searchTextUpper)) {\n                                filteredItems.push(item);\n                            }\n                        }\n                    }\n\n                    locals.filteredItems = filteredItems;\n                }\n\n                function invokeFilter() {\n                    if (filterLocal) {\n                        invokeFilterLocal();\n                    } else if ($scope.bbChecklistFilterCallback) {\n                        $scope.bbChecklistFilterCallback({\n                            searchText: locals.searchText,\n                            category: locals.selectedCategory\n                        });\n                    }\n                }\n\n                $scope.bbChecklistSelectedItems = $scope.bbChecklistSelectedItems || [];\n\n                locals.selectAll = function () {\n                    var i,\n                        item,\n                        items = locals.filteredItems,\n                        selected = $scope.bbChecklistSelectedItems;\n\n                    for (i = 0; i < items.length; i += 1) {\n                        item = items[i];\n                        if (!bbChecklistUtility.contains(selected, item)) {\n                            bbChecklistUtility.add(selected, item);\n                        }\n                    }\n                };\n\n                locals.clear = function () {\n                    var i,\n                        item,\n                        items = locals.filteredItems,\n                        selected = $scope.bbChecklistSelectedItems;\n\n                    for (i = 0; i < items.length; i += 1) {\n                        item = items[i];\n                        bbChecklistUtility.remove(selected, item);\n                    }\n                };\n\n                locals.rowClicked = function (item) {\n                    var selected = $scope.bbChecklistSelectedItems;\n\n                    if (!bbChecklistUtility.contains(selected, item)) {\n                        bbChecklistUtility.add(selected, item);\n                    } else {\n                        bbChecklistUtility.remove(selected, item);\n                    }\n                };\n\n                locals.filterByCategory = function (selectedCategory) {\n                    locals.selectedCategory = selectedCategory;\n                    invokeFilter();\n                };\n\n                $scope.$watch('bbChecklistItems', function () {\n                    locals.filteredItems = $scope.bbChecklistItems;\n                    locals.highlightRefresh = new Date().getTime();\n                });\n\n                $scope.$watch('locals.searchText', function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        invokeFilter();\n                    }\n                });\n            }\n        };\n    }\n\n    bbChecklist.$inject = ['bbChecklistUtility'];\n\n    angular.module('sky.checklist', ['sky.check', 'sky.checklist.column', 'sky.checklist.columns', 'sky.checklist.model', 'sky.checklist.utility', 'sky.resources'])\n        .directive('bbChecklist', bbChecklist);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbChecklistColumn() {\n        return {\n            require: '^bbChecklistColumns',\n            restrict: 'E',\n            scope: {\n                bbChecklistColumnCaption: \"=\",\n                bbChecklistColumnField: \"=\",\n                bbChecklistColumnClass: \"=\",\n                bbChecklistColumnWidth: \"=\",\n                bbChecklistColumnAutomationId: \"=\"\n            },\n            link: function ($scope, element, attrs, bbChecklistColumns) {\n                /*jslint unparam: true */\n                var column = {\n                    caption: $scope.bbChecklistColumnCaption,\n                    field: $scope.bbChecklistColumnField,\n                    'class': $scope.bbChecklistColumnClass,\n                    width: $scope.bbChecklistColumnWidth,\n                    automationId: $scope.bbChecklistColumnAutomationId\n                };\n\n                bbChecklistColumns.addColumn(column);\n            }\n        };\n    }\n    \n    angular.module('sky.checklist.column', ['sky.checklist.columns'])\n        .directive('bbChecklistColumn', bbChecklistColumn);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function bbChecklistColumns() {\n        return {\n            require: '^bbChecklist',\n            restrict: 'E',\n            scope: {\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.columns = [];\n\n                this.addColumn = function (column) {\n                    $scope.columns.push(column);\n                };\n            }],\n            link: function ($scope, element, attrs, bbChecklist) {\n                /*jslint unparam: true */\n                bbChecklist.setColumns($scope.columns);\n            }\n        };\n    }\n    \n    angular.module('sky.checklist.columns', [])\n        .directive('bbChecklistColumns', bbChecklistColumns);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function checklistModel($compile, $parse, bbChecklistUtility) {\n        // http://stackoverflow.com/a/19228302/1458162\n        function postLinkFn(scope, elem, attrs) {\n            var getter,\n                setter,\n                value;\n\n            // compile with `ng-model` pointing to `checked`\n            $compile(elem)(scope);\n\n            // getter / setter for original model\n            getter = $parse(attrs.checklistModel);\n            setter = getter.assign;\n\n            // value added to list\n            value = $parse(attrs.checklistValue)(scope.$parent);\n\n            // watch UI checked change\n            scope.$watch('checked', function (newValue, oldValue) {\n                var current;\n\n                if (newValue === oldValue) {\n                    return;\n                }\n\n                current = getter(scope.$parent);\n\n                if (newValue === true) {\n                    setter(scope.$parent, bbChecklistUtility.add(current, value));\n                } else {\n                    setter(scope.$parent, bbChecklistUtility.remove(current, value));\n                }\n            });\n\n            // watch original model change\n            scope.$parent.$watch(attrs.checklistModel, function (newArr) {\n                scope.checked = bbChecklistUtility.contains(newArr, value);\n            }, true);\n        }\n\n        return {\n            restrict: 'A',\n            priority: 1000,\n            terminal: true,\n            scope: true,\n            compile: function (tElement, tAttrs) {\n                if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {\n                    throw 'checklist-model should be applied to `input[type=\"checkbox\"]`.';\n                }\n\n                if (!tAttrs.checklistValue) {\n                    throw 'You should provide `checklist-value`.';\n                }\n\n                // exclude recursion\n                tElement.removeAttr('checklist-model');\n\n                // local scope var storing individual checkbox model\n                tElement.attr('ng-model', 'checked');\n\n                return postLinkFn;\n            }\n        };\n    }\n    \n    checklistModel.$inject = ['$compile', '$parse', 'bbChecklistUtility'];\n    \n    angular.module('sky.checklist.model', ['sky.checklist.utility'])\n        .directive('checklistModel', checklistModel);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('sky.checklist.utility', [])\n        .factory('bbChecklistUtility', function () {\n            return {\n                \n                contains: function (arr, item) {\n                    var i;\n\n                    if (angular.isArray(arr)) {\n                        for (i = 0; i < arr.length; i += 1) {\n                            if (angular.equals(arr[i], item)) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                },\n\n                // add\n                add: function (arr, item) {\n                    var i;\n\n                    arr = angular.isArray(arr) ? arr : [];\n                    for (i = 0; i < arr.length; i += 1) {\n                        if (angular.equals(arr[i], item)) {\n                            return arr;\n                        }\n                    }\n                    arr.push(item);\n                    return arr;\n                },\n\n                // remove\n                remove: function (arr, item) {\n                    var i;\n\n                    if (angular.isArray(arr)) {\n                        for (i = 0; i < arr.length; i += 1) {\n                            if (angular.equals(arr[i], item)) {\n                                arr.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                    return arr;\n                }\n\n            };\n        });\n}());","/* global angular */\n\n(function () {\n    'use strict';\n\n    function getTemplateUrl(name) {\n        return 'sky/templates/contextmenu/' + name + '.html';\n    }\n\n    function bbContextMenu() {\n        return {\n            replace: true,\n            restrict: 'E',\n            transclude: true,\n            templateUrl: getTemplateUrl('contextmenu'),\n            link: function ($scope) {\n                $scope.contextButtonStopPropagation = function ($event) {\n                    $event.stopPropagation();\n                };\n            }\n        };\n    }\n\n    function bbContextMenuItem() {\n        return {\n            restrict: 'E',\n            transclude: true,\n            replace: true,\n            scope: {\n                clickItem: '&bbContextMenuAction'\n            },\n            templateUrl: getTemplateUrl('menuitem')\n        };\n    }\n\n    function bbContextMenuButton() {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: getTemplateUrl('menubutton')\n        };\n    }\n\n    function toggleAccordion($event, $scope) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        $scope.accordionLocals.accordionOpen = !$scope.accordionLocals.accordionOpen;\n    }\n\n    function BBSubmenuController($scope) {\n        var self = this;\n\n        self.toggleAccordion = function ($event) {\n            toggleAccordion($event, $scope);\n        };\n    }\n\n    BBSubmenuController.$inject = ['$scope'];\n\n    function bbSubmenu() {\n        return {\n            controller: 'bbSubmenuController',\n            restrict: 'E',\n            scope: {\n                heading: '=?bbSubmenuHeading'\n            },\n            link: function ($scope, el, attrs) {\n                $scope.accordionLocals = {\n                    accordionOpen: false,\n                    staticHeader: false\n                };\n\n                if (angular.isDefined(attrs.bbSubmenuHeading)) {\n                    $scope.accordionLocals.staticHeader = true;\n                }\n\n                $scope.toggleAccordion = function ($event) {\n                    toggleAccordion($event, $scope);\n                };\n            },\n            transclude: true,\n            templateUrl: getTemplateUrl('submenu')\n        };\n    }\n\n    function bbSubmenuHeading() {\n        return {\n            restrict: 'E',\n            require: '^bbSubmenu',\n            scope: true,\n            link: function ($scope, el, attrs, submenuCtrl) {\n                $scope.toggleAccordion = function ($event) {\n                    submenuCtrl.toggleAccordion($event);\n                };\n            },\n            transclude: true,\n            templateUrl: getTemplateUrl('submenuheading')\n        };\n    }\n\n    angular.module('sky.contextmenu', ['ui.bootstrap.dropdown', 'ui.bootstrap.accordion'])\n        .controller('bbSubmenuController', BBSubmenuController)\n        .directive('bbContextMenu', bbContextMenu)\n        .directive('bbContextMenuItem', bbContextMenuItem)\n        .directive('bbContextMenuButton', bbContextMenuButton)\n        .directive('bbSubmenu', bbSubmenu)\n        .directive('bbSubmenuHeading', bbSubmenuHeading);\n}());\n","/*global angular, jQuery, require */\n\n(function ($) {\n    'use strict';\n\n    var DEFAULT_PROP = '__DEFAULT__',\n        REQUEST_TYPE_DATA = 0,\n        REQUEST_TYPE_RESOURCES = 1,\n        REQUEST_TYPE_TEXT = 2;\n\n    function fillUrls(option, props, urls) {\n        var item,\n            p,\n            url;\n\n        /*istanbul ignore else: sanity check */\n        if (option) {\n            if (angular.isString(option) || option.BB_DATA_POST) {\n                url = option;\n\n                option = {};\n                option[DEFAULT_PROP] = url;\n            }\n\n            for (p in option) {\n                /*istanbul ignore else */\n                if (option.hasOwnProperty(p)) {\n                    item = option[p];\n                    url = item;\n\n                    props.push(p);\n                    urls.push(url);\n                }\n            }\n        }\n    }\n\n    function loadManager(options) {\n        // A service endpoint for tracking loading items.\n\n        var item,\n            loadingItems = [],\n            nonblockingForAdditionalItems = false,\n            result,\n            scope,\n            waitingForFirstItem = false;\n\n        function cancelWaiting() {\n            options.waitForFirstItem = false;\n            options.nonblockWaitForAdditionalItems = false;\n\n            if (nonblockingForAdditionalItems) {\n                nonblockingForAdditionalItems = false;\n                scope.$emit(\"bbEndWait\", { nonblocking: true });\n            }\n\n            if (waitingForFirstItem) {\n                waitingForFirstItem = false;\n                scope.$emit(\"bbEndWait\");\n            }\n        }\n\n        function startNonblockingForAdditionalItems() {\n            nonblockingForAdditionalItems = true;\n            scope.$emit(\"bbBeginWait\", { nonblocking: true });\n        }\n\n        function markCompleted(item) {\n            var i = loadingItems.indexOf(item);\n\n            if (i !== -1) {\n                loadingItems.splice(i, 1);\n                if (loadingItems.length === 0) {\n                    result.isLoading = false;\n\n                    if (nonblockingForAdditionalItems) {\n                        nonblockingForAdditionalItems = false;\n                        scope.$emit(\"bbEndWait\", { nonblocking: true });\n                    }\n                }\n            }\n\n            if (!result.isFirstItemLoaded) {\n                result.isFirstItemLoaded = true;\n                if (waitingForFirstItem) {\n                    waitingForFirstItem = false;\n                    scope.$emit(\"bbEndWait\");\n                }\n            }\n\n            if (result.isLoading && options.nonblockWaitForAdditionalItems && !nonblockingForAdditionalItems) {\n                startNonblockingForAdditionalItems();\n            }\n        }\n\n        function registerItem(item) {\n            if (!result.isLoading) {\n                if (result.isFirstItemLoaded && options.nonblockWaitForAdditionalItems) {\n                    startNonblockingForAdditionalItems();\n                }\n            }\n            loadingItems.push(item);\n            result.isLoading = true;\n        }\n\n        // Initialize values\n        scope = options.scope;\n\n        if (options.load) {\n            item = {\n                name: options.name,\n                load: options.load\n            };\n        }\n\n        result = {\n            isFirstItemLoaded: false,\n            isLoading: false,\n            loadingItems: loadingItems,\n            cancelWaiting: cancelWaiting\n        };\n\n        if (options.waitForFirstItem) {\n            waitingForFirstItem = true;\n            scope.$emit(\"bbBeginWait\");\n        }\n\n        // Start loading any item that is handed directly to the loader.\n        if (item) {\n            // Add the current item to the list.\n            registerItem(item);\n\n            // Start loading the item.\n            result.loaded = item.load().finally(function () {\n                markCompleted(item);\n                scope.$parent.$emit(\"bbData.loadManager.markCompleted\", item);\n            });\n\n            scope.$parent.$emit(\"bbData.loadManager.registerItem\", item);\n        }\n\n        if (options.isAggregate) {\n            // Listen to items being registered by child loadManagers.\n            scope.$on(\"bbData.loadManager.registerItem\", function (e, item) {\n                e.stopPropagation();\n                registerItem(item);\n            });\n\n            // Listen to items being marked completed by child loadManagers.\n            scope.$on(\"bbData.loadManager.markCompleted\", function (e, item) {\n                e.stopPropagation();\n                markCompleted(item);\n            });\n        }\n\n        return result;\n    }\n\n    function bbData($http, $q, $templateCache, bbDataConfig, $window) {\n        function ajaxUrl(url, requestType) {\n            var filter,\n                parts;\n\n            requestType = requestType || 0;\n\n            if ($window.define && $window.define.amd && $window.require) {\n                parts = url.split('?');\n\n                // Grab the portion before the query string and get the fully-qualified URL.\n                url = parts.shift();\n                url = require.toUrl(url);\n\n                // If there was anything after the first question mark, put it back.\n                url += '?' + parts.join('');\n            }\n\n            switch (requestType) {\n            case REQUEST_TYPE_DATA:\n                filter = bbDataConfig.dataUrlFilter;\n                break;\n            case REQUEST_TYPE_RESOURCES:\n                filter = bbDataConfig.resourceUrlFilter;\n                break;\n            case REQUEST_TYPE_TEXT:\n                filter = bbDataConfig.textUrlFilter;\n                break;\n            }\n\n            if (angular.isFunction(filter)) {\n                url = filter(url);\n            }\n\n            return url;\n        }\n\n        function createAjaxPromise(item, isPost, requestType, timeoutPromise) {\n            var data,\n                httpOptions,\n                isGet,\n                textContent,\n                type,\n                url;\n\n            requestType = requestType || 0;\n\n            if (item.BB_DATA_POST || isPost) {\n                data = item.data;\n                type = item.type || 'post';\n                url = item.url;\n            } else {\n                type = 'get';\n                url = item;\n                isGet = true;\n            }\n\n            if (isGet && requestType === REQUEST_TYPE_TEXT) {\n                // Check the Angular template cache using the raw URL first in case the text content is compiled into\n                // the module bundle.\n                textContent = $templateCache.get(url);\n\n                if (textContent) {\n                    return $q(function (resolve) {\n                        resolve({\n                            data: textContent\n                        });\n                    });\n                }\n            }\n\n            url = ajaxUrl(url, requestType);\n\n            httpOptions = {\n                method: type,\n                url: url,\n                cache: requestType !== 0,\n                data: data ? JSON.stringify(data) : null,\n                dataType: requestType !== 0 ? 'text' : 'json',\n                withCredentials: requestType === 0,\n                timeout: timeoutPromise\n            };\n\n            if (data instanceof $window.FormData) {\n                // Angular sets the Content-Type to application/json by default, but when posting FormData\n                // it should clear out the Content-Type and let the browser determine it.\n                // https://uncorkedstudios.com/blog/multipartformdata-file-upload-with-angularjs\n                angular.extend(httpOptions, {\n                    transformRequest: angular.identity,\n                    headers: {\n                        'Content-Type': undefined\n                    }\n                });\n            }\n\n            return $http(httpOptions);\n        }\n\n        function addPromises(items, urls, requestType, timeoutPromise) {\n            var i,\n                n,\n                url;\n\n            if (urls) {\n                for (i = 0, n = urls.length; i < n; i++) {\n                    url = urls[i];\n                    items.push(createAjaxPromise(url, null, requestType, timeoutPromise));\n                }\n            }\n        }\n\n        function nextId() {\n            nextId.index = nextId.index || 0;\n            nextId.index++;\n            return nextId.index;\n        }\n\n        function trackHTTPTimeoutForPromise(fn) {\n            var id = nextId(),\n                promise,\n                httpTimeout = $q.defer();\n\n            trackHTTPTimeoutForPromise[id] = httpTimeout;\n\n            promise = fn(httpTimeout.promise);\n            promise._id = id;\n\n            function clearPromiseId() {\n                delete trackHTTPTimeoutForPromise[id];\n            }\n\n            promise.then(clearPromiseId, clearPromiseId);\n\n            return promise;\n        }\n\n        function loadData(options) {\n            return trackHTTPTimeoutForPromise(function (timeoutPromise) {\n                return $q(function (resolve, reject) {\n                    var dataOption,\n                        dataProps,\n                        dataUrls,\n                        resourcesOption,\n                        resourcesProps,\n                        resourcesUrls,\n                        promises = [],\n                        textOption,\n                        textProps,\n                        textUrls;\n\n                    function success(args) {\n                        var argIndex = 0,\n                            result = {\n                                httpResults: {}\n                            };\n\n                        function addResult(name, props) {\n                            var resultData,\n                                httpResult,\n                                i,\n                                n,\n                                p,\n                                resultItem,\n                                resultItemHttpResults;\n\n                            if (props) {\n                                for (i = 0, n = props.length; i < n; i++) {\n                                    p = props[i];\n                                    httpResult = args[argIndex];\n                                    resultData = httpResult.data;\n\n                                    if (p === DEFAULT_PROP) {\n                                        resultItem = resultData;\n                                        resultItemHttpResults = httpResult;\n                                    } else {\n                                        resultItem = resultItem || {};\n                                        resultItem[p] = resultData;\n\n                                        resultItemHttpResults = resultItemHttpResults || {};\n                                        resultItemHttpResults[p] = httpResult;\n                                    }\n\n                                    argIndex++;\n                                }\n                            }\n\n                            if (angular.isDefined(resultItem)) {\n                                result[name] = resultItem;\n                            }\n\n                            if (angular.isDefined(resultItemHttpResults)) {\n                                result.httpResults[name] = resultItemHttpResults;\n                            }\n                        }\n\n                        addResult('data', dataProps, true);\n                        addResult('resources', resourcesProps);\n                        addResult('text', textProps);\n\n                        resolve(result);\n                    }\n\n                    function failure() {\n                        /*jshint validthis: true */\n                        reject.apply(this, arguments);\n                    }\n\n                    dataOption = options.data;\n                    resourcesOption = options.resources;\n                    textOption = options.text;\n\n                    if (dataOption) {\n                        dataProps = [];\n                        dataUrls = [];\n                        fillUrls(dataOption, dataProps, dataUrls);\n                    }\n\n                    if (resourcesOption) {\n                        resourcesProps = [];\n                        resourcesUrls = [];\n                        fillUrls(resourcesOption, resourcesProps, resourcesUrls);\n                    }\n\n                    if (textOption) {\n                        textProps = [];\n                        textUrls = [];\n                        fillUrls(textOption, textProps, textUrls);\n                    }\n\n                    addPromises(promises, dataUrls, REQUEST_TYPE_DATA, timeoutPromise);\n                    addPromises(promises, resourcesUrls, REQUEST_TYPE_RESOURCES, timeoutPromise);\n                    addPromises(promises, textUrls, REQUEST_TYPE_TEXT, timeoutPromise);\n\n                    $q.all(promises)\n                        .then(success)\n                        .catch(failure);\n                });\n            });\n        }\n\n        return {\n            cancel: function (promise) {\n                if (promise && promise._id && trackHTTPTimeoutForPromise[promise._id]) {\n                    trackHTTPTimeoutForPromise[promise._id].resolve();\n                }\n            },\n            load: function (options) {\n                if (options.loadManager) {\n                    options.loadManager.load = function () {\n                        return loadData(options);\n                    };\n\n                    return loadManager(options.loadManager).loaded;\n                }\n\n                return loadData(options);\n            },\n            loadManager: loadManager,\n            query: function (url, params) {\n                return url + '?' + $.param(params);\n            },\n            post: function (url, data) {\n                return {\n                    url: url,\n                    data: data,\n                    BB_DATA_POST: true\n                };\n            },\n            save: function (options) {\n                return trackHTTPTimeoutForPromise(function (timeoutPromise) {\n                    return createAjaxPromise(options, true, null, timeoutPromise);\n                });\n            }\n        };\n    }\n\n    bbData.$inject = ['$http', '$q', '$templateCache', 'bbDataConfig', '$window'];\n\n    angular.module('sky.data', [])\n        .constant('bbDataConfig', {})\n        .factory('bbData', bbData);\n}(jQuery));\n","/*jshint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n    angular.module('sky.datepicker', ['sky.resources', 'sky.moment', 'ui.bootstrap.datepicker'])\n        .constant('bbDatepickerConfig', {\n            currentCultureDateFormatString: 'MM/dd/yyyy',\n            showWeeks: false,\n            startingDay: 0,\n            minDate: '',\n            maxDate: ''\n        })\n        .directive('bbDatepicker', ['bbResources', 'bbDatepickerConfig', 'bbDatepickerParser', '$timeout', '$q', function (bbResources, bbDatepickerConfig, bbDatepickerParser, $timeout, $q) {\n            return {\n                replace: true,\n                restrict: 'E',\n                require: 'ngModel',\n                scope: {\n                    date: '=ngModel',\n                    dateOptions: '=?bbDateOptions',\n                    customValidation: '=?bbCustomValidation',\n                    format: '=?bbDateFormat',\n                    maxDate: '=?maxDate',\n                    minDate: '=?minDate',\n                    placeholderText: '=?placeholder'\n                },\n                templateUrl: 'sky/templates/datepicker/datepicker.html',\n                controller: ['$scope', function ($scope) {\n                    var self = this;\n\n\n                    $scope.getInputNgModel = function () {\n                        if (angular.isFunction(self.getInputNgModel)) {\n                            return self.getInputNgModel();\n                        } else {\n                            return null;\n                        }\n                    };\n                }],\n                link: function ($scope, el, attr, ngModel) {\n                    var parsedDate,\n                        inputEl,\n                        skipValidation = false,\n                        dateChangeInternal = false;\n\n                    function getBodyDatepicker() {\n                        return $('body > ul[uib-datepicker-popup-wrap]');\n                    }\n\n                    function positionAbsoluteDatepicker() {\n                        var calendarButtonEl = el.find('span.bb-datepicker-button-container'),\n                            inputEl = el.find('input'),\n                            datepickerScope = el.find('input').isolateScope(),\n                            datepickerEl = getBodyDatepicker(),\n                            inputWidth,\n                            buttonWidth,\n                            datepickerWidth;\n\n                        inputWidth = inputEl.innerWidth();\n                        buttonWidth = calendarButtonEl.innerWidth();\n                        datepickerWidth = datepickerEl.innerWidth();\n\n                        if (datepickerWidth < (inputWidth + buttonWidth)) {\n                            datepickerScope.position.left = datepickerScope.position.left + inputWidth + buttonWidth - datepickerWidth;\n                        }\n                    }\n\n                    function open($event) {\n                        $event.preventDefault();\n                        $event.stopPropagation();\n\n                        //add syle class when datepicker appended to body because necessary bb-datefield class will no longer be wrapping it.\n                        if ($scope.locals.appendToBody) {\n                            $timeout(function () {\n                                getBodyDatepicker().addClass('bb-datefield');\n                                positionAbsoluteDatepicker();\n                            });\n                        }\n\n                        $scope.locals.opened = !$scope.locals.opened;\n                    }\n\n                    function setDate() {\n                        var inputNgModel;\n                        if (angular.isDate($scope.date)) {\n                            $scope.locals.date = $scope.date;\n                        } else if (!$scope.locals.hasCustomValidation) {\n                            parsedDate = bbDatepickerParser.runParsers($scope.date, $scope.format);\n                            if (angular.isDate(parsedDate)) {\n                                $scope.date = parsedDate;\n                                $scope.locals.date = parsedDate;\n                            } else {\n                                $scope.locals.date = $scope.date;\n                                inputNgModel = $scope.getInputNgModel();\n                                if (inputNgModel && !inputNgModel.$validators.date($scope.date)) {\n                                    inputNgModel.invalidFormatMessage = bbResources.date_field_invalid_date_message;\n                                    inputNgModel.$setValidity('dateFormat', false);\n                                }\n                            }\n                        } else {\n                            $scope.locals.date = $scope.date;\n                        }\n                    }\n\n                    $scope.locals = {\n                        showButtonBar: false,\n                        appendToBody: false,\n                        date: '',\n                        opened: false,\n                        open: open,\n                        loaded: false,\n                        closeOnSelection: true,\n                        dateOptions: {\n                            showWeeks: bbDatepickerConfig.showWeeks,\n                            startingDay: bbDatepickerConfig.startingDay\n                        },\n                        hasCustomValidation: false,\n                        inputName: attr.bbDatepickerName\n                    };\n\n                    if (!$scope.maxDate && bbDatepickerConfig.maxDate) {\n                        $scope.maxDate = bbDatepickerConfig.maxDate;\n                    }\n\n                    if (!$scope.minDate && bbDatepickerConfig.minDate) {\n                        $scope.minDate = bbDatepickerConfig.minDate;\n                    }\n\n                    $scope.resources = bbResources;\n\n                    if (angular.isDefined(attr.showButtonBar)) {\n                        $scope.locals.showButtonBar = attr.showButtonBar;\n                    }\n\n                    if (angular.isDefined(attr.closeOnDateSelection)) {\n                        $scope.locals.closeOnSelection = attr.closeOnDateSelection;\n                    }\n\n                    if (angular.isDefined(attr.datepickerAppendToBody)) {\n                        $scope.locals.appendToBody = (attr.datepickerAppendToBody === 'true');\n                    }\n\n                    if (angular.isUndefined($scope.format)) {\n                        $scope.format = bbDatepickerConfig.currentCultureDateFormatString;\n                    }\n\n                    if (angular.isDefined($scope.dateOptions)) {\n                        angular.extend($scope.locals.dateOptions, $scope.dateOptions);\n\n                    }\n\n                    if (angular.isDefined($scope.customValidation)) {\n                        if (angular.isFunction($scope.customValidation.formatValue)) {\n                            $scope.locals.hasCustomValidation = true;\n                        }\n                    }\n\n                    $scope.locals.required = angular.isDefined(attr.required);\n\n\n                    if ($scope.placeholderText === null || angular.isUndefined($scope.placeholderText)) {\n                        $scope.placeholderText = $scope.format.toLowerCase();\n                    }\n\n                    setDate();\n\n                    $scope.$watch('date', function (newValue, oldValue) {\n                        if (newValue !== oldValue && !dateChangeInternal) {\n                            setDate();\n                        } else if (dateChangeInternal) {\n                            dateChangeInternal = false;\n                        }\n                    });\n\n                    $scope.$watch('locals.date', function () {\n\n                        if ($scope.date !== $scope.locals.date) {\n                            if (angular.isDate($scope.locals.date)) {\n                                dateChangeInternal = true;\n                                $scope.date = $scope.locals.date;\n                            }\n                        }\n\n                    });\n\n                    function runValidators() {\n                        var inputNgModel = $scope.getInputNgModel();\n                        /*istanbul ignore else: sanity check */\n                        if (inputNgModel) {\n                            inputNgModel.$validate();\n                        }\n                    }\n\n                    $scope.$watch('maxDate', function () {\n                        runValidators();\n                    });\n\n                    $scope.$watch('minDate', function () {\n                        runValidators();\n                    });\n\n                    function hasRequiredError() {\n                        var inputNgModel = $scope.getInputNgModel();\n\n                        return inputNgModel && inputNgModel.$error && inputNgModel.$error.required;\n                    }\n\n                    function hasMinMaxError() {\n                        var inputNgModel = $scope.getInputNgModel();\n\n                        return inputNgModel && inputNgModel.$error && (inputNgModel.$error.minDate || inputNgModel.$error.maxDate);\n                    }\n\n\n                    function dateFormatValidator() {\n                        var customFormattingResult,\n                            deferred,\n                            inputNgModel;\n\n                        function resolveValidation() {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                deferred[inputNgModel.invalidFormatMessage ? 'reject' : 'resolve']();\n                                inputNgModel.$setValidity('dateFormat', !inputNgModel.invalidFormatMessage || inputNgModel.invalidFormatMessage === '');\n                            } else {\n                                deferred.resolve();\n                            }\n                        }\n\n                        function setInvalidFormatMessage(errorMessage) {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                inputNgModel.invalidFormatMessage = errorMessage;\n                            }\n                        }\n\n                        function handleCustomFormattingValidation(result) {\n                            result = result || {};\n\n                            setInvalidFormatMessage(result.formattingErrorMessage);\n                            resolveValidation();\n\n                            if (result.formattedValue !== $scope.date) {\n                                skipValidation = true;\n                                dateChangeInternal = true;\n                                $scope.date = result.formattedValue;\n                                $scope.locals.date = result.formattedValue;\n                            }\n\n                        }\n\n                        function datepickerIsPristine() {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                return inputNgModel.$pristine;\n                            } else {\n                                return true;\n                            }\n                        }\n\n                        deferred = $q.defer();\n\n                        if (skipValidation || angular.isDate($scope.locals.date) || $scope.locals.date === '' || ($scope.locals.required && hasRequiredError()) || hasMinMaxError() || (!$scope.locals.required && $scope.locals.date === null) || datepickerIsPristine()) {\n                            setInvalidFormatMessage(null);\n                            resolveValidation();\n                        } else if ($scope.locals.hasCustomValidation && angular.isString($scope.locals.date)) {\n                            customFormattingResult = $scope.customValidation.formatValue($scope.locals.date);\n                            if (customFormattingResult.then) {\n                                customFormattingResult.then(handleCustomFormattingValidation);\n                            } else {\n                                handleCustomFormattingValidation(customFormattingResult);\n                                return deferred.promise;\n                            }\n                        } else {\n                            inputNgModel = $scope.getInputNgModel();\n                            /* istanbul ignore else: sanity check */\n                            if (inputNgModel !== null && inputNgModel.$error && inputNgModel.$error.date) {\n                                setInvalidFormatMessage(bbResources.date_field_invalid_date_message);\n                            }\n                            resolveValidation();\n                        }\n\n                        skipValidation = false;\n                        return deferred.promise;\n                    }\n\n                    ngModel.$asyncValidators.dateFormat = dateFormatValidator;\n\n                    $scope.locals.loaded = true;\n\n                    //Timeout allows the locals.loaded to be applied to dom and ng-if=true to go into effect.\n                    $timeout(function () {\n                        inputEl = el.find('input');\n                        inputEl.on('change blur', function () {\n                            $timeout(function () {\n                                var inputNgModel;\n\n                                //allows validation to kick off for invalid dates\n                                if (angular.isUndefined($scope.locals.date) && angular.isDefined(inputEl.val()) && inputEl.val() !== '') {\n                                    dateChangeInternal = true;\n                                    $scope.date = inputEl.val();\n\n\n                                } else if ($scope.locals.required && hasRequiredError()) {\n                                    dateChangeInternal = true;\n                                    $scope.date = '';\n                                    inputNgModel = $scope.getInputNgModel();\n                                    inputNgModel.invalidFormatMessage = null;\n                                    inputNgModel.$setValidity('dateFormat', true);\n                                } else if ($scope.date !== $scope.locals.date) {\n\n                                    dateChangeInternal = true;\n                                    $scope.date = $scope.locals.date;\n\n                                }\n\n                            });\n                        });\n                    });\n\n                }\n            };\n        }])\n        .directive('bbDatepickerCustomValidate', ['$filter', 'bbDatepickerParser', function ($filter, bbDatepickerParser) {\n            return {\n                restrict: 'A',\n                require: ['ngModel', '^bbDatepicker'],\n                link: function ($scope, el, attr, controllers) {\n                    var ngModel = controllers[0],\n                        format = attr.uibDatepickerPopup;\n\n                    if (attr.bbDatepickerCustomValidate && attr.bbDatepickerCustomValidate === 'true') {\n                        ngModel.$parsers = [];\n                        ngModel.$validators.date = function () {\n                            return true;\n                        };\n                    } else {\n                        ngModel.$parsers.unshift(function (viewValue) {\n                            var newDate = ngModel.$viewValue,\n                                date = null;\n                            //date was changed from datepicker or is empty so just return\n                            if (typeof newDate === 'object' || newDate === '') {\n                                return newDate;\n                            }\n\n                            date = bbDatepickerParser.runParsers(newDate, format);\n\n                            if (angular.isDate(date)) {\n                                el.val($filter('date')(date, format));\n                            }\n\n                            return date ? date : viewValue;\n                        });\n                    }\n\n                    controllers[1].getInputNgModel = function () {\n                        return ngModel;\n                    };\n                }\n            };\n        }])\n    .directive('bbMinDate', function () {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function ($scope, element, attrs, ngModel) {\n                ngModel.$validators.minDate = function (modelValue) {\n                    return !$scope.minDate || !modelValue || !angular.isDate(modelValue) || !angular.isDate($scope.minDate) || modelValue >= $scope.minDate;\n                };\n            }\n        };\n    })\n    .directive('bbMaxDate', function () {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function ($scope, element, attrs, ngModel) {\n                ngModel.$validators.maxDate = function (modelValue) {\n                    return !$scope.maxDate || !modelValue || !angular.isDate(modelValue) || !angular.isDate($scope.maxDate) || modelValue <= $scope.maxDate;\n                };\n            }\n        };\n    })\n    .factory('bbDatepickerParser', ['bbMoment', function (bbMoment) {\n\n        function parseUTCString(value) {\n            var date = null,\n                dateArray,\n                datePart;\n\n            if (angular.isString(value) && value.indexOf('T00:00:00') !== -1) {\n                datePart = value.split('T')[0];\n\n                dateArray = datePart.split('-');\n                date = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n            }\n            return date;\n        }\n\n        function parseNoSeparatorDateString(value, format) {\n            var date = null,\n                yearBegin = format.indexOf('y'),\n                monthBegin = format.indexOf('M'),\n                dayBegin = format.indexOf('d'),\n                yearIndex,\n                monthIndex,\n                dayIndex;\n            if (angular.isString(value) && value.length === 8 && !isNaN(value)) {\n                if ((dayBegin < yearBegin) && (monthBegin < yearBegin)) {\n                    yearIndex = 4;\n                    if (monthBegin < dayBegin) {\n                        dayIndex = 2;\n                        monthIndex = 0;\n                    } else {\n                        dayIndex = 0;\n                        monthIndex = 2;\n                    }\n                } else if ((yearBegin < monthBegin) && (monthBegin < dayBegin)) {\n                    yearIndex = 0;\n                    monthIndex = 4;\n                    dayIndex = 6;\n                } else {\n                    return null;\n                }\n\n                date = new Date(value.substr(yearIndex, 4), (value.substr(monthIndex, 2) - 1), value.substr(dayIndex, 2));\n            }\n            return date;\n        }\n\n        function matchSeparator(value) {\n            return value.match(/[.\\/\\-\\s].*?/);\n        }\n\n        function dateHasSeparator(value) {\n            /*\n            * Validation criteria:\n            * A separator exists\n            * There is no separator at the beginning\n            * There is no separator at the end\n            * Two separators exist\n            * All parts of the date have a non-zero value\n            */\n\n            var separator = matchSeparator(value),\n                valueArray = value.split(separator),\n                separatorAtEnd = value.indexOf(separator, value.length - 1) !== -1,\n                separatorAtBeginning = value.indexOf(separator) === 0,\n                hasTwoSeparators = valueArray.length - 1 === 2,\n                anyPartIsZero = valueArray.some(function (e) {\n                    return Number(e) === 0;\n                });\n\n            return (separator && !separatorAtEnd && !separatorAtBeginning && hasTwoSeparators && !anyPartIsZero);\n        }\n\n        function isMomentParsable(value, format) {\n            var yearParts,\n                yearIndex,\n                monthIndex,\n                dayIndex,\n                separator;\n\n            if (angular.isString(value) && dateHasSeparator(value)) {\n\n                if (value.length === 10) {\n                    return true;\n                } else if (value.length === 9 || value.length === 8) {\n                    //insure that years have 4 characters\n                    separator = matchSeparator(value);\n                    yearParts = value.split(separator);\n                    yearIndex = format.indexOf('y');\n                    monthIndex = format.indexOf('M');\n                    dayIndex = format.indexOf('d');\n                    if (yearIndex > monthIndex && yearIndex > dayIndex) {\n                        return yearParts[2].length === 4;\n                    }\n\n                    if (yearIndex < monthIndex && yearIndex < dayIndex) {\n                        return yearParts[0].length === 4;\n                    }\n\n                }\n\n            }\n\n            return false;\n        }\n\n\n\n        function parseMoment(value, format) {\n            var date = null,\n                momentDate;\n\n            if (isMomentParsable(value, format)) {\n                momentDate = bbMoment(value, format.toUpperCase());\n                if (momentDate.isValid()) {\n                    date = momentDate.toDate();\n                }\n            }\n\n            return date;\n        }\n\n        return {\n            parseUTCString: parseUTCString,\n            parseNoSeparatorDateString: parseNoSeparatorDateString,\n            parseMoment: parseMoment,\n            runParsers: function (value, format) {\n                var date = null;\n\n                if (!value || angular.isDate(value) || value === '') {\n                    return value;\n                }\n\n                date = parseUTCString(value);\n\n                if (angular.isDate(date)) {\n                    return date;\n                }\n\n                date = parseNoSeparatorDateString(value, format);\n\n                if (angular.isDate(date)) {\n                    return date;\n                }\n\n                date = parseMoment(value, format);\n\n                return date;\n\n            }\n        };\n    }]);\n\n\n}(jQuery));\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function bbDateRangePickerFactory(bbResources) {\n        var dateRangeTypes,\n            defaultDateRangeOptions,\n            specificDateRangeOptions,\n            pastDateRangeOptions,\n            dateRangeMap;\n\n        dateRangeTypes = {\n            AT_ANY_TIME: 0,\n            NEXT_WEEK: 1,\n            THIS_MONTH: 2,\n            NEXT_MONTH: 3,\n            THIS_QUARTER: 4,\n            NEXT_QUARTER: 5,\n            THIS_FISCAL_YEAR: 6,\n            NEXT_FISCAL_YEAR: 7,\n            THIS_CALENDAR_YEAR: 8,\n            NEXT_CALENDAR_YEAR: 9,\n            LAST_WEEK: 10,\n            LAST_MONTH: 11,\n            LAST_QUARTER: 12,\n            LAST_FISCAL_YEAR: 13,\n            LAST_CALENDAR_YEAR: 14,\n            TODAY: 15,\n            YESTERDAY: 16,\n            TOMORROW: 17,\n            THIS_WEEK: 18,\n            SPECIFIC_RANGE: 19\n        };\n\n\n        // Deprecated\n        defaultDateRangeOptions = [\n            dateRangeTypes.AT_ANY_TIME,\n            dateRangeTypes.YESTERDAY,\n            dateRangeTypes.TODAY,\n            dateRangeTypes.TOMORROW,\n            dateRangeTypes.LAST_WEEK,\n            dateRangeTypes.THIS_WEEK,\n            dateRangeTypes.NEXT_WEEK,\n            dateRangeTypes.LAST_MONTH,\n            dateRangeTypes.THIS_MONTH,\n            dateRangeTypes.NEXT_MONTH,\n            dateRangeTypes.LAST_QUARTER,\n            dateRangeTypes.THIS_QUARTER,\n            dateRangeTypes.NEXT_QUARTER,\n            dateRangeTypes.LAST_CALENDAR_YEAR,\n            dateRangeTypes.THIS_CALENDAR_YEAR,\n            dateRangeTypes.NEXT_CALENDAR_YEAR,\n            dateRangeTypes.LAST_FISCAL_YEAR,\n            dateRangeTypes.THIS_FISCAL_YEAR,\n            dateRangeTypes.NEXT_FISCAL_YEAR\n        ];\n\n        // Deprecated\n        specificDateRangeOptions = defaultDateRangeOptions.concat([dateRangeTypes.SPECIFIC_RANGE]);\n\n        // Deprecated\n        pastDateRangeOptions = [\n            dateRangeTypes.AT_ANY_TIME,\n            dateRangeTypes.YESTERDAY,\n            dateRangeTypes.TODAY,\n            dateRangeTypes.LAST_WEEK,\n            dateRangeTypes.THIS_WEEK,\n            dateRangeTypes.LAST_MONTH,\n            dateRangeTypes.THIS_MONTH,\n            dateRangeTypes.LAST_QUARTER,\n            dateRangeTypes.THIS_QUARTER,\n            dateRangeTypes.LAST_CALENDAR_YEAR,\n            dateRangeTypes.THIS_CALENDAR_YEAR,\n            dateRangeTypes.LAST_FISCAL_YEAR,\n            dateRangeTypes.THIS_FISCAL_YEAR\n        ];\n\n        dateRangeMap = {};\n        dateRangeMap[dateRangeTypes.AT_ANY_TIME] = {\n            caption: bbResources.date_range_picker_at_any_time,\n            description: bbResources.date_range_picker_filter_description_at_any_time\n        };\n        dateRangeMap[dateRangeTypes.YESTERDAY] = {\n            caption: bbResources.date_range_picker_yesterday,\n            description: bbResources.date_range_picker_filter_description_yesterday\n        };\n        dateRangeMap[dateRangeTypes.TODAY] = {\n            caption: bbResources.date_range_picker_today,\n            description: bbResources.date_range_picker_filter_description_today\n        };\n        dateRangeMap[dateRangeTypes.TOMORROW] = {\n            caption: bbResources.date_range_picker_tomorrow,\n            description: bbResources.date_range_picker_filter_description_tomorrow\n        };\n        dateRangeMap[dateRangeTypes.LAST_WEEK] = {\n            caption: bbResources.date_range_picker_last_week,\n            description: bbResources.date_range_picker_filter_description_last_week\n        };\n        dateRangeMap[dateRangeTypes.THIS_WEEK] = {\n            caption: bbResources.date_range_picker_this_week,\n            description: bbResources.date_range_picker_filter_description_this_week\n        };\n        dateRangeMap[dateRangeTypes.NEXT_WEEK] = {\n            caption: bbResources.date_range_picker_next_week,\n            description: bbResources.date_range_picker_filter_description_next_week\n        };\n        dateRangeMap[dateRangeTypes.LAST_QUARTER] = {\n            caption: bbResources.date_range_picker_last_quarter,\n            description: bbResources.date_range_picker_filter_description_last_quarter\n        };\n        dateRangeMap[dateRangeTypes.THIS_QUARTER] = {\n            caption: bbResources.date_range_picker_this_quarter,\n            description: bbResources.date_range_picker_filter_description_this_quarter\n        };\n        dateRangeMap[dateRangeTypes.NEXT_QUARTER] = {\n            caption: bbResources.date_range_picker_next_quarter,\n            description: bbResources.date_range_picker_filter_description_next_quarter\n        };\n        dateRangeMap[dateRangeTypes.LAST_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_last_calendar_year,\n            description: bbResources.date_range_picker_filter_description_last_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_this_calendar_year,\n            description: bbResources.date_range_picker_filter_description_this_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.NEXT_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_next_calendar_year,\n            description: bbResources.date_range_picker_filter_description_next_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.LAST_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_last_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_last_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_this_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_this_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.NEXT_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_next_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_next_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_MONTH] = {\n            caption: bbResources.date_range_picker_this_month,\n            description: bbResources.date_range_picker_filter_description_this_month\n        };\n        dateRangeMap[dateRangeTypes.NEXT_MONTH] = {\n            caption: bbResources.date_range_picker_next_month,\n            description: bbResources.date_range_picker_filter_description_next_month\n        };\n        dateRangeMap[dateRangeTypes.LAST_MONTH] = {\n            caption: bbResources.date_range_picker_last_month,\n            description: bbResources.date_range_picker_filter_description_last_month\n        };\n        dateRangeMap[dateRangeTypes.SPECIFIC_RANGE] = {\n            caption: bbResources.date_range_picker_specific_range,\n            description: bbResources.date_range_picker_filter_description_specific_range\n        };\n\n        function getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n            if (dateRangePickerValue && dateRangePickerValue.dateRangeType) {\n                info = getDateRangeTypeInfo(dateRangePickerValue.dateRangeType);\n            } else {\n                info = getDateRangeTypeInfo(dateRangePickerValue);\n            }\n            return info;\n        }\n\n\n        function getDateRangeTypeCaption(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n\n            if (angular.isFunction(getDateRangeTypeInfo)) {\n\n                info = getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo);\n\n                if (info && info.caption) {\n                    return info.caption;\n                }\n            }\n\n            if (angular.isNumber(dateRangePickerValue)) {\n                // If the input is the enum value itself, then map it to the object structure we expect before proceeding.\n                dateRangePickerValue = { dateRangeType: dateRangePickerValue };\n            } else {\n                // If the value is undefiend, then map it to a null object.\n                dateRangePickerValue = dateRangePickerValue || {};\n            }\n\n            if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\n                // If the enum value is undefined, then it represents any time.\n                dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\n            }\n\n            if (angular.isDefined(dateRangeMap[dateRangePickerValue.dateRangeType])) {\n                return dateRangeMap[dateRangePickerValue.dateRangeType].caption;\n            } else {\n                return '';\n            }\n\n        }\n\n        function getDateRangeFilterDescription(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n            if (angular.isFunction(getDateRangeTypeInfo)) {\n                info = getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo);\n                if (info && info.description) {\n                    return info.description;\n                }\n            }\n\n            if (angular.isNumber(dateRangePickerValue)) {\n                // If the input is the enum value itself, then map it to the object structure we expect before proceeding.\n                dateRangePickerValue = { dateRangeType: dateRangePickerValue };\n            } else {\n                // If the value is undefiend, then map it to a null object.\n                dateRangePickerValue = dateRangePickerValue || {};\n            }\n\n            if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\n                // If the enum value is undefined, then it represents any time.\n                dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\n            }\n            if (angular.isDefined(dateRangeMap[dateRangePickerValue.dateRangeType])) {\n                return dateRangeMap[dateRangePickerValue.dateRangeType].description;\n            } else {\n                return '';\n            }\n        }\n\n        function getDateRangeOptions(optionTypes) {\n            var dateRangeOptions = [dateRangeTypes.AT_ANY_TIME];\n            optionTypes = optionTypes || {};\n\n            if (optionTypes.includeDefault) {\n                dateRangeOptions.push(dateRangeTypes.YESTERDAY);\n                dateRangeOptions.push(dateRangeTypes.TODAY);\n                dateRangeOptions.push(dateRangeTypes.TOMORROW);\n                dateRangeOptions.push(dateRangeTypes.LAST_WEEK);\n                dateRangeOptions.push(dateRangeTypes.THIS_WEEK);\n                dateRangeOptions.push(dateRangeTypes.NEXT_WEEK);\n                dateRangeOptions.push(dateRangeTypes.LAST_MONTH);\n                dateRangeOptions.push(dateRangeTypes.THIS_MONTH);\n                dateRangeOptions.push(dateRangeTypes.NEXT_MONTH);\n                dateRangeOptions.push(dateRangeTypes.LAST_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.THIS_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.NEXT_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.LAST_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.NEXT_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.LAST_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.NEXT_FISCAL_YEAR);\n            }\n\n            if (optionTypes.includePast && !optionTypes.includeDefault) {\n                dateRangeOptions.push(dateRangeTypes.YESTERDAY);\n                dateRangeOptions.push(dateRangeTypes.TODAY);\n                dateRangeOptions.push(dateRangeTypes.LAST_WEEK);\n                dateRangeOptions.push(dateRangeTypes.THIS_WEEK);\n                dateRangeOptions.push(dateRangeTypes.LAST_MONTH);\n                dateRangeOptions.push(dateRangeTypes.THIS_MONTH);\n                dateRangeOptions.push(dateRangeTypes.LAST_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.THIS_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.LAST_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.LAST_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_FISCAL_YEAR);\n            }\n\n            if (optionTypes.includeSpecific) {\n                dateRangeOptions.push(dateRangeTypes.SPECIFIC_RANGE);\n            }\n\n            return dateRangeOptions;\n        }\n\n        return {\n            \n            defaultDateRangeOptions: defaultDateRangeOptions,\n            pastDateRangeOptions: pastDateRangeOptions,\n            specificDateRangeOptions: specificDateRangeOptions,\n\n            dateRangeTypes: dateRangeTypes,\n            getDateRangeOptions: getDateRangeOptions,\n            getDateRangeTypeCaption: getDateRangeTypeCaption,\n            getDateRangeFilterDescription: getDateRangeFilterDescription\n        };\n    }\n\n    bbDateRangePickerFactory.$inject = ['bbResources'];\n\n    function bbDateRangePickerDirective(bbDateRangePicker, bbResources) {\n\n        return {\n            replace: true,\n            restrict: 'E',\n            templateUrl: 'sky/templates/daterangepicker/daterangepicker.html',\n            scope: {},\n            controllerAs: 'bbDateRangePickerCtrl',\n            bindToController: {\n                bbDateRangePickerValue: \"=\",\n                bbDateRangePickerAutomationId: \"=\",\n                bbDateRangePickerOptions: '=',\n                fromDate: '=?bbDateRangePickerFromDate',\n                toDate: '=?bbDateRangePickerToDate',\n                pickerLabel: '=?bbDateRangePickerLabel',\n                isValid: '=?bbDateRangePickerValid'\n            },\n            controller: ['$scope', function ($scope) {\n                var vm = this;\n                vm.resources = bbResources;\n\n                vm.defaultDateRangeOptions = bbDateRangePicker.getDateRangeOptions({includeDefault: true});\n\n                vm.getDateRangeTypeCaption = function (dateRangeTypeValue) {\n                    var infoFunction;\n                    if (vm.bbDateRangePickerOptions && angular.isFunction(vm.bbDateRangePickerOptions.getDateRangeTypeInfo)) {\n                        infoFunction = vm.bbDateRangePickerOptions.getDateRangeTypeInfo;\n                    }\n                    return bbDateRangePicker.getDateRangeTypeCaption(dateRangeTypeValue, infoFunction);\n                };\n\n                $scope.$watch(\n                    function () {\n                        return vm.dateRangeForm.$valid;\n                    }, function (newVal) {\n                        vm.isValid = newVal;\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.fromDate;\n                    }, function (newVal) {\n                        /* This prevents minDate from having a reference\n                           to fromDate and changing it */\n                        vm.minDate = angular.copy(newVal);\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.toDate;\n                    }, function (newVal) {\n                        /* This prevents maxDate from having a reference\n                           to toDate and changing it */\n                        vm.maxDate = angular.copy(newVal);\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.bbDateRangePickerValue;\n                    }, function (newVal) {\n                    if (!newVal) {\n                        vm.bbDateRangePickerValue = {\n                            dateRangeType: bbDateRangePicker.dateRangeTypes.AT_ANY_TIME\n                        };\n                        return;\n                    }\n                    vm.specificRangeIsVisible = vm.bbDateRangePickerValue.dateRangeType === bbDateRangePicker.dateRangeTypes.SPECIFIC_RANGE;\n                    newVal.dateRangeType = newVal.dateRangeType || bbDateRangePicker.dateRangeTypes.AT_ANY_TIME;\n                }, true);\n            }],\n            link: function ($scope, el, attr, vm) {\n                vm.noLabels = attr.bbDateRangePickerNoLabels;\n                if (vm.noLabels) {\n                    vm.toPlaceholder = bbResources.date_range_picker_to_date;\n                    vm.fromPlaceholder = bbResources.date_range_picker_from_date;\n                } else {\n                    vm.toPlaceholder = '';\n                    vm.fromPlaceholder = '';\n                }\n            }\n        };\n    }\n\n    bbDateRangePickerDirective.$inject = ['bbDateRangePicker', 'bbResources'];\n\n    angular.module('sky.daterangepicker', ['sky.resources', 'sky.datepicker'])\n        .factory('bbDateRangePicker', bbDateRangePickerFactory)\n        .directive('bbDateRangePicker', bbDateRangePickerDirective);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    var components = [{\n        name: 'Image',\n        cls: 'image'\n    }, {\n        name: 'Title',\n        cls: 'title'\n    }, {\n        name: 'Description',\n        cls: 'description'\n    }, {\n        name: 'Action',\n        cls: 'action'\n    }];\n\n    function makeErrorComponent(component) {\n        var controllerName,\n            name = component.name;\n\n        function Controller($scope) {\n            var vm = this;\n\n            $scope.$on('$destroy', function () {\n                vm.onDestroy();\n                vm = null;\n            });\n        }\n\n        Controller.$inject = ['$scope'];\n\n        function componentFn() {\n            function link(scope, el, attrs, ctrls) {\n                var vm = ctrls[0],\n                    bbError = ctrls[1];\n\n                vm.el = el;\n\n                bbError['set' + name](vm);\n            }\n\n            return {\n                restrict: 'E',\n                require: ['bbError' + name, '^bbError'],\n                controller: controllerName,\n                controllerAs: 'bbError' + name,\n                bindToController: true,\n                link: link,\n                scope: {}\n            };\n        }\n\n        controllerName = 'BBError' + name + 'Controller';\n\n        angular.module('sky.error.directive')\n            .controller(controllerName, Controller)\n            .directive('bbError' + name, componentFn);\n    }\n\n    function getCtrlPropName(component) {\n        var name = component.name;\n\n        return name.charAt(0).toLowerCase() + name.substr(1) + 'Ctrl';\n    }\n\n    function BBErrorController() {\n        var vm = this;\n\n        function addComponentSetter(component) {\n            var name = component.name;\n\n            vm['set' + name] = function (ctrl) {\n                var propName = getCtrlPropName(component);\n\n                vm[propName] = ctrl;\n\n                ctrl.onDestroy = function () {\n                    vm[propName] = null;\n                };\n            };\n        }\n\n        components.forEach(addComponentSetter);\n    }\n\n    function bbError() {\n        function link(scope, el, attrs, vm) {\n            function watchForComponent(component) {\n                scope.$watch(function () {\n                    return vm[getCtrlPropName(component)];\n                }, function (newValue) {\n                    if (newValue) {\n                        el.find('.bb-error-' + component.cls)\n                            .empty()\n                            .append(newValue.el);\n                    }\n                });\n            }\n\n            components.forEach(watchForComponent);\n        }\n\n        return {\n            restrict: 'E',\n            controller: 'BBErrorController',\n            controllerAs: 'bbError',\n            bindToController: true,\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/error/error.directive.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.error.directive', [])\n        .controller('BBErrorController', BBErrorController)\n        .directive('bbError', bbError);\n\n    components.forEach(makeErrorComponent);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function BBErrorModalController($uibModalInstance, options) {\n        var vm = this;\n\n        vm.options = options;\n\n        vm.close = function () {\n            $uibModalInstance.close();\n        };\n    }\n\n    BBErrorModalController.$inject = ['$uibModalInstance', 'options'];\n\n    angular.module('sky.errormodal.controller', ['sky.error.directive'])\n        .controller('BBErrorModalController', BBErrorModalController);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbErrorModal(bbModal) {\n        return {\n            open: function (options) {\n                return bbModal.open({\n                    controller: 'BBErrorModalController as bbErrorModal',\n                    templateUrl: 'sky/templates/error/errormodal.template.html',\n                    resolve: {\n                        options: function () {\n                            return options;\n                        }\n                    }\n                });\n            }\n        };\n    }\n\n    bbErrorModal.$inject = ['bbModal'];\n\n    angular.module('sky.errormodal.service', ['sky.errormodal.controller', 'sky.modal'])\n        .factory('bbErrorModal', bbErrorModal);\n}());\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module(\n        'sky.fileattachments',\n        [\n            'sky.fileattachments.filedrop',\n            'sky.fileattachments.fileitem',\n            'sky.fileattachments.filesize'\n        ]\n    );\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function run($window) {\n        $($window).on('dragover drop', function (e) {\n            if (!$(e.target).hasClass('bb-file-drop-target')) {\n                e.preventDefault();\n            }\n        });\n    }\n\n    run.$inject = ['$window'];\n\n    function bbFileDrop($parse, $templateCache) {\n        return {\n            link: function (scope, el, attrs) {\n                scope.bbFileDrop = {\n                    hasTranscludeContents: $.trim(el.find('.bb-file-drop-contents-custom').html()).length > 0,\n                    allowLinks: angular.isDefined(attrs.bbFileDropLink),\n                    addLink: function ($event) {\n                        $event.preventDefault();\n                        scope.bbFileDropLinkChange({\n                            link: {\n                                url: scope.bbFileDrop.url\n                            }\n                        });\n                        \n                        scope.bbFileDrop.url = null;\n                    },\n                    fileChange: function ($files, $event, $rejectedFiles) {\n                        scope.bbFileDropChange({\n                            files: $files,\n                            rejectedFiles: $rejectedFiles\n                        });\n                    }\n                };\n            },\n            scope: {\n                bbFileDropChange: '&',\n                bbFileDropLinkChange: '&'\n            },\n            template: function (el, attrs) {\n                var dropEl;\n\n                el.html($templateCache.get('sky/templates/fileattachments/filedrop.html'));\n\n                dropEl = el.find('.bb-file-drop');\n\n                dropEl.attr({\n                    'ngf-allow-dir': attrs.bbFileDropAllowDir,\n                    'ngf-accept': attrs.bbFileDropAccept,\n                    'ngf-multiple': attrs.bbFileDropMultiple || 'true',\n                    'ngf-min-size': attrs.bbFileDropMinSize || '0',\n                    'ngf-max-size': attrs.bbFileDropMaxSize || '500000'\n                });\n\n                if (angular.isDefined(attrs.bbFileDropNoclick)) {\n                    dropEl.addClass('bb-file-drop-noclick');\n                } else {\n                    dropEl.attr('ngf-select', '');\n                }\n            },\n            transclude: true\n        };\n    }\n\n    bbFileDrop.$inject = ['$parse', '$templateCache'];\n\n    angular.module('sky.fileattachments.filedrop', ['ngFileUpload', 'sky.resources'])\n        .run(run)\n        .directive('bbFileDrop', bbFileDrop);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbFileItem() {\n        return {\n            link: function (scope) {\n                function getFileTypeUpper() {\n                    var fileType = '';\n\n                    if (scope.item) {\n                        fileType = scope.item.type || '';\n                    }\n\n                    return fileType.toUpperCase();\n                }\n\n                function getFileExtensionUpper() {\n                    var extension = '',\n                        name;\n\n                    if (scope.item) {\n                        name = scope.item.name || '';\n\n                        extension = name.substr(name.lastIndexOf('.')) || '';\n                    }\n\n                    return extension.toUpperCase();\n                }\n\n                scope.bbFileItem = {\n                    isFile: function () {\n                        var item = scope.item;\n\n                        return item && angular.isDefined(item.size);\n                    },\n                    isImg: function () {\n                        var fileTypeUpper = getFileTypeUpper(),\n                            slashIndex;\n\n                        slashIndex = fileTypeUpper.indexOf('/');\n\n                        if (slashIndex >= 0) {\n                            switch (fileTypeUpper.substr(fileTypeUpper.indexOf('/') + 1)) {\n                            case 'BMP':\n                            case 'GIF':\n                            case 'JPEG':\n                            case 'PNG':\n                                return true;\n                            }\n                        }\n\n                        return false;\n                    }\n                };\n\n                scope.$watch('item.type', function () {\n                    var cls,\n                        extensionUpper = getFileExtensionUpper(),\n                        fileTypeUpper;\n\n                    switch (extensionUpper) {\n                        case '.PDF':\n                            cls = 'pdf';\n                            break;\n                        case '.GZ':\n                        case '.RAR':\n                        case '.TGZ':\n                        case '.ZIP':\n                            cls = 'archive';\n                            break;\n                        case '.PPT':\n                        case '.PPTX':\n                            cls = 'powerpoint';\n                            break;\n                        case '.DOC':\n                        case '.DOCX':\n                            cls = 'word';\n                            break;\n                        case '.XLS':\n                        case '.XLSX':\n                            cls  = 'excel';\n                            break;\n                        case '.TXT':\n                            cls = 'text';\n                            break;\n                        case '.HTM':\n                        case '.HTML':\n                            cls = 'code';\n                            break;\n                    }\n\n                    if (!cls) {\n                        fileTypeUpper = getFileTypeUpper();\n\n                        switch (fileTypeUpper.substr(0, fileTypeUpper.indexOf('/'))) {\n                            case 'AUDIO':\n                                cls = 'audio';\n                                break;\n                            case 'IMAGE':\n                                // Normally images are displayed as thumbnails, but if an image type is not recognized\n                                // as being widely supported by modern browsers (e.g. TIFF files) then an icon should\n                                // be displayed instead.\n                                cls = 'image';\n                                break;\n                            case 'TEXT':\n                                cls = 'text';\n                                break;\n                            case 'VIDEO':\n                                cls = 'video';\n                                break;\n                        }\n                    }\n\n                    scope.bbFileItem.otherCls = 'fa-file-' + (cls ? cls + '-' : '') + 'o';\n                });\n            },\n            scope: {\n                item: '=bbFileItem',\n                itemDelete: '&bbFileItemDelete'\n            },\n            templateUrl: 'sky/templates/fileattachments/fileitem.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.fileattachments.fileitem', ['ngFileUpload', 'sky.fileattachments.filesize', 'sky.resources'])\n        .directive('bbFileItem', bbFileItem);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function bbFileSize($filter, bbFormat, bbResources) {\n        return function (input) {\n            var decimalPlaces = 0,\n                dividend = 1,\n                formattedSize,\n                roundedSize,\n                template;\n            \n            if (input === null || angular.isUndefined(input)) {\n                return '';\n            }\n            \n            if (Math.abs(input) === 1) {\n                template = bbResources.file_size_b_singular;\n            } else if (input < 1000) {\n                template = bbResources.file_size_b_plural;\n            } else if (input < 1e6) {\n                template = bbResources.file_size_kb;\n                dividend = 1000;\n            } else if (input < 1e9) {\n                template = bbResources.file_size_mb;\n                dividend = 1e6;\n                decimalPlaces = 1;\n            } else {\n                template = bbResources.file_size_gb;\n                dividend = 1e9;\n                decimalPlaces = 1;\n            }\n\n            roundedSize = Math.floor(input / (dividend / Math.pow(10, decimalPlaces))) / Math.pow(10, decimalPlaces);\n\n            formattedSize = $filter('number')(roundedSize);\n\n            return bbFormat.formatText(template, formattedSize);\n        };\n    }\n    \n    bbFileSize.$inject = ['$filter', 'bbFormat', 'bbResources'];\n    \n    angular.module('sky.fileattachments.filesize', ['sky.format', 'sky.resources'])\n        .filter('bbFileSize', bbFileSize);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    var tagsToReplace = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    function replaceTag(tag) {\n        return tagsToReplace[tag];\n    }\n\n    function isEmpty(str) {\n        return str === null || angular.isUndefined(str);\n    }\n\n    angular.module('sky.format', [])\n        .factory('bbFormat', function () {\n            return {\n                formatText: function (format) {\n                    var args;\n\n                    if (isEmpty(format)) {\n                        return '';\n                    }\n\n                    args = arguments;\n\n                    return String(format).replace(/\\{(\\d+)\\}/g, function (match, capture) {\n                        /*jslint unparam: true */\n                        return args[parseInt(capture, 10) + 1];\n                    });\n                },\n                escape: function (str) {\n                    if (isEmpty(str)) {\n                        return '';\n                    }\n\n                    return String(str).replace(/[&<>]/g, replaceTag);\n                }\n            };\n        });\n}());\n","/*jslint browser: false, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    function buildCategoryList(columns) {\n        var categories = [],\n            column,\n            index,\n            len;\n\n        len = columns.length;\n\n        for (index = 0; index < len; index++) {\n            column = columns[index];\n\n            if (column.category) {\n                if (categories.indexOf(column.category) === -1) {\n                    categories.push(column.category);\n                }\n            }\n        }\n\n        return categories;\n    }\n\n\n    function columnCompare(a, b) {\n        a = a.title.toLocaleLowerCase();\n        b = b.title.toLocaleLowerCase();\n\n        if (a < b) {\n            return -1;\n        }\n\n        if (a > b) {\n            return 1;\n        }\n\n        return 0;\n    }\n    \n    function getInitialSelectedColumns(columns, selectedIds) {\n        var selectedColumns = [];\n        \n        angular.forEach(columns, function (column) {\n            if (selectedIds.indexOf(column.id) >= 0) {\n                selectedColumns.push(column);\n            }\n        });\n        \n        return selectedColumns;\n    }\n\n    function BBGridColumnPickerController($scope, availableColumns, initialSelectedColumnIds, columnPickerHelpKey, listMode) {\n        var columns = [],\n            initialSelectedColumns;\n\n        angular.forEach(availableColumns, function (column) {\n            columns.push({\n                id: column.id,\n                name: column.name,\n                title: column.caption,\n                category: column.category,\n                description: column.description\n            });\n        });\n        \n        initialSelectedColumns = getInitialSelectedColumns(columns, initialSelectedColumnIds);\n\n        columns.sort(columnCompare);\n\n        $scope.columns = columns;\n        $scope.categories = buildCategoryList(columns);\n        $scope.locals = {};\n        $scope.locals.selectedColumns = initialSelectedColumns.slice(0);\n        $scope.columnPickerHelpKey = columnPickerHelpKey;\n        $scope.listMode = listMode;\n        \n        $scope.applyChanges = function () {\n            var column,\n                scopeColumns = $scope.columns,\n                selectedColumns = $scope.locals.selectedColumns,\n                columnIds = [],\n                i;\n            \n            //Loop through previously selected columns.  If they are still selected, add\n            //them to the resulting list in their original order.\n            angular.forEach(initialSelectedColumnIds, function (columnId) {\n                for (i = 0; i < scopeColumns.length; i++) {\n                    column = scopeColumns[i];\n\n                    if (column.id === columnId) {\n                        if (selectedColumns.indexOf(column) >= 0) {\n                            columnIds.push(column.id);\n                        }\n                        break;\n                    }\n                }\n            });\n\n            //Loop through all columns.  If they are selected and not already in the list\n            //then add them to the end.\n            angular.forEach(selectedColumns, function (column) {\n                var id = column.id;\n                \n                if (columnIds.indexOf(id) < 0) {\n                    columnIds.push(id);\n                }\n            });\n\n            $scope.$close(columnIds);\n        };\n    }\n    \n    BBGridColumnPickerController.$inject = ['$scope', 'columns', 'selectedColumnIds', 'columnPickerHelpKey', 'listMode'];\n\n    angular.module('sky.grids.columnpicker', ['sky.checklist', 'sky.resources'])\n        .controller('BBGridColumnPickerController', BBGridColumnPickerController);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('sky.grids.actionbar', ['sky.mediabreakpoints', 'sky.resources'])\n    .directive('bbGridActionBar', ['bbMediaBreakpoints', 'bbResources', '$timeout', function (bbMediaBreakpoints, bbResources, $timeout) {\n        return {\n                require: '^bbGrid',\n                replace: true,\n                transclude: true,\n                restrict: 'E',\n                scope: {\n                    bbMultiselectActions: '=',\n                    bbSelectionsUpdated: '&'\n                },\n                controller: ['$scope', function ($scope) {\n                    $scope.locals = {\n                        actions: $scope.bbMultiselectActions,\n                        showActionBar: false,\n                        mobileButtons: false,\n                        showMobileActions: false\n                    };\n\n                    $scope.resources = bbResources;\n                }],\n                link: function ($scope, element, attrs, bbGrid) {\n                    /*jslint unparam: true */\n                    var visibleSelected = [];\n                    \n                    function updateActionBar(data, selected) {\n                        var action,\n                            i,\n                            showActionBar;\n                        \n                        //this notation is necessary because the argument is passed through grid and then to the controller\n                        //in which grid resides.\n                        visibleSelected = bbGrid.getVisibleSelections(data, selected);\n                        \n                        $scope.bbSelectionsUpdated({ selections: { selections: visibleSelected } });\n\n                        showActionBar = false;\n                        if ($scope.locals.actions) {\n                            //only show the action bar if an action has an available selection\n                            for (i = 0; i < $scope.locals.actions.length; i++) {\n                                action = $scope.locals.actions[i];\n                                if (action.selections.length > 0) {\n                                    showActionBar = true;\n                                }\n                            }\n                        }\n                        \n                        $scope.locals.showActionBar = showActionBar;\n\n                        if (showActionBar) {\n                            $timeout(function () {\n                                bbGrid.syncActionBarViewKeeper();\n                            });\n                        }\n                    }\n                    \n                    \n                    bbGrid.scope.$watchCollection('selectedRows', function (newValue) {\n                        updateActionBar(bbGrid.scope.options.data, newValue);\n                    });\n\n                    bbGrid.scope.$watchCollection('options.data', function (newValue) {\n                        updateActionBar(newValue, bbGrid.scope.selectedRows);\n                    });\n                    \n                    //on mobile do an ng-if that changes the stuff.\n                    function mediaBreakpointHandler(newBreakpoints) {\n                        $scope.locals.mobileButtons = newBreakpoints.xs;\n                    }\n\n                    bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                    element.on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                    });\n\n                    $scope.locals.clearSelection = function () {\n                        \n                        //If the visible selections are the same as the selected rows we can just reset all multiselected rows\n                        if (visibleSelected.length === bbGrid.scope.selectedRows.length) {\n                            bbGrid.resetMultiselect();\n                        } else {\n                            bbGrid.toggleMultiselectRows(visibleSelected);\n                        }\n                        \n                    };\n\n                    $scope.locals.chooseAction = function () {\n                        $scope.locals.showMobileActions = true;\n                    };\n\n                    $scope.locals.cancelChooseAction = function () {\n                        $scope.locals.showMobileActions = false;\n                    };\n                },\n                templateUrl: 'sky/templates/grids/actionbar.html'\n            };\n    }]);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.grids.filters', ['sky.help', 'sky.resources', 'sky.mediabreakpoints'])\n    .directive('bbGridFilters', ['bbHelp', 'bbResources', 'bbMediaBreakpoints', function (bbHelp, bbResources, bbMediaBreakpoints) {\n        return {\n            require: '^bbGrid',\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbOptions: \"=\"\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.applyFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.applyFilters) {\n                        options.applyFilters(args);\n                        $scope.updateFilters(args.filters);\n\n                        if (bbMediaBreakpoints.getCurrent().xs) {\n                            $scope.locals.expanded = false;\n                        }\n                    }\n                };\n                $scope.clearFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.clearFilters) {\n                        options.clearFilters(args);\n                        $scope.updateFilters(args.filters);\n                    }\n                };\n            }],\n            link: function ($scope, element, attrs, bbGrid) {\n                /*jslint unparam: true */\n                var box = element.find('.bb-grid-filters-box'),\n                    filtersContainer = element.find('.bb-grid-filters-container');\n\n                $scope.locals = {\n                    expanded: false\n                };\n\n                $scope.viewKeeperOptions = {};\n\n                bbGrid.viewKeeperChangedHandler = function (val) {\n                    $scope.viewKeeperOptions.viewKeeperOffsetElId = val;\n                };\n\n                bbGrid.toggleFilterMenu = function (isOpen) {\n                    if (angular.isDefined(isOpen)) {\n                        $scope.locals.expanded = isOpen;\n                    } else {\n                        $scope.locals.expanded = !$scope.locals.expanded;\n                    }\n\n                    if ($scope.locals.expanded) {\n                        bbHelp.close();\n                    }\n                };\n\n                bbGrid.openFilterMenu = function () {\n                    $scope.locals.expanded = true;\n                };\n\n                bbGrid.scope.$watch('gridCreated', function (newValue) {\n                    if (newValue) {\n                        element.parents('.bb-grid-container').prepend(element);\n                        element.show();\n\n                        if ($scope.locals.expanded) {\n                            animateFilters($scope.locals.expanded);\n                        }\n                    }\n                });\n\n                $scope.updateFilters = function (filters) {\n                    bbGrid.setFilters(filters);\n                };\n\n                $scope.resources = bbResources;\n\n                function animateFilters(isExpanded) {\n                    var animationDuration = 250;\n                    if (isExpanded) {\n                        box.css('left', '240px');\n                        filtersContainer.show();\n                        box.animate({ 'left': '0' }, animationDuration);\n                    } else {\n                        box.animate({ 'left': '240px' }, {\n                            duration: animationDuration,\n                            complete: function () {\n                                box.css('left', '0');\n                                filtersContainer.hide();\n                            }\n                        });\n                    }\n                }\n\n                $scope.$watch('locals.expanded', function (newValue, oldValue) {\n                    if (newValue !== oldValue || newValue) {\n                        animateFilters(newValue);\n                    }\n                });\n\n            },\n            templateUrl: 'sky/templates/grids/filters.html'\n        };\n    }])\n    .directive('bbGridFiltersGroup', function () {\n        return {\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbGridFiltersGroupLabel: '=',\n                isCollapsed: '=?bbGridFiltersGroupIsCollapsed'\n            },\n            templateUrl: 'sky/templates/grids/filtersgroup.html'\n        };\n    })\n    .directive('bbGridFiltersSummary', ['bbResources', function (bbResources) {\n        return {\n            require: '^bbGrid',\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbOptions: \"=\"\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.clearFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.clearFilters) {\n                        options.clearFilters(args);\n                        $scope.updateFilters(args.filters);\n                    }\n                };\n\n                $scope.resources = bbResources;\n\n            }],\n            link: function ($scope, element, attrs, bbGrid) {\n                /*jslint unparam: true */\n\n                bbGrid.scope.$watch('gridCreated', function () {\n                    var toolbarContainer = element.parents('.bb-grid-container').find('.bb-grid-toolbar-container .bb-grid-filter-summary-container');\n                    toolbarContainer.append(element);\n                });\n\n\n                $scope.updateFilters = function (filters) {\n                    bbGrid.setFilters(filters);\n                };\n\n                $scope.openFilterMenu = function () {\n                    if (bbGrid.openFilterMenu) {\n                        bbGrid.openFilterMenu();\n                    }\n                };\n                $scope.$watch(function () {\n                    return element.is(':visible');\n                }, function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        bbGrid.syncViewKeepers();\n                    }\n                });\n            },\n            templateUrl: 'sky/templates/grids/filterssummary.html'\n        };\n    }]);\n\n}());\n","/*jslint plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var DEFAULT_ITEMS_PER_PAGE = 5,\n        DEFAULT_MAX_PAGES = 5,\n        DEFAULT_COLUMN_SIZE = 150,\n        MULTISELECT_COLUMN_SIZE = 35,\n        DROPDOWN_TOGGLE_COLUMN_SIZE = 40,\n        DROPDOWN_TOGGLE_COLUMN_NAME = 'dropdownToggle',\n        MULTISELECT_COLUMN_NAME = 'cb';\n\n\n    function arrayObjectIndexOf(array, obj) {\n        var i;\n        for (i = 0; i < array.length; i++) {\n            if (angular.equals(array[i], obj)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    angular.module('sky.grids', ['sky.contextmenu', 'sky.mediabreakpoints', 'sky.viewkeeper', 'sky.highlight', 'sky.resources', 'sky.data', 'sky.grids.filters', 'sky.grids.actionbar', 'sky.window', 'sky.grids.toolbar'])\n        .controller('bbGridContextMenuController', ['$scope', function ($scope) {\n            function toggleDropdown($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                $scope.locals.is_open = !$scope.locals.is_open;\n            }\n\n            $scope.locals = {\n                is_open: false,\n                items: [],\n                toggleDropdown: toggleDropdown\n            };\n\n            /*istanbul ignore else: sanity check */\n            if (angular.isFunction($scope.getContextMenuItems)) {\n                $scope.locals.items = $scope.getContextMenuItems($scope.rowData.id, $scope.rowData);\n            }\n        }])\n\n\n        .directive('bbGrid', ['$window', '$compile', '$templateCache', 'bbMediaBreakpoints', 'bbViewKeeperBuilder', 'bbHighlight', 'bbResources', 'bbData', '$controller', '$timeout', 'bbWindow', '$q',\n\n            function ($window, $compile, $templateCache, bbMediaBreakpoints, bbViewKeeperBuilder, bbHighlight, bbResources, bbData, $controller, $timeout, bbWindow, $q) {\n                return {\n                    replace: true,\n                    transclude: true,\n                    restrict: 'E',\n                    scope: {\n                        options: '=bbGridOptions',\n                        multiselectActions: '=?bbMultiselectActions',\n                        updateMultiselectActions: '&bbSelectionsUpdated',\n                        paginationOptions: '=?bbGridPagination',\n                        selectedRows: '=?bbSelectedRows'\n                    },\n                    controller: ['$scope', function ($scope) {\n                        var locals,\n                            self = this;\n\n                        self.setFilters = function (filters) {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.setFilters)) {\n                                locals.setFilters(filters);\n                            }\n                        };\n\n                        self.syncViewKeepers = function () {\n                            /*istanbul ignore else: sanity check */\n                            if ($scope.syncViewKeepers) {\n                                $scope.syncViewKeepers();\n                            }\n                        };\n\n                        self.syncActionBarViewKeeper = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction($scope.syncActionBarViewKeeper)) {\n                                $scope.syncActionBarViewKeeper();\n                            }\n                        };\n\n                        self.resetMultiselect = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.resetMultiselect)) {\n                                locals.resetMultiselect();\n                            }\n                        };\n\n                        self.getVisibleSelections = function (data, selected) {\n                            var i,\n                                index,\n                                result = [];\n\n                            for (i = 0; i < selected.length; i++) {\n                                index = arrayObjectIndexOf(data, selected[i]);\n                                if (index > -1) {\n                                    result.push(selected[i]);\n                                }\n                            }\n                            return result;\n                        };\n\n                        self.toggleMultiselectRows = function (visibleSelectedRows) {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.toggleMultiselectRows)) {\n                                locals.toggleMultiselectRows(visibleSelectedRows);\n                            }\n                        };\n\n                        self.syncGridHeaderScrollToTopScrollbar = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.topScrollbarScroll)) {\n                                locals.topScrollbarScroll();\n                            }\n                        };\n\n                        self.scope = $scope;\n\n                        $scope.resources = bbResources;\n\n                        locals = $scope.locals = {\n                            gridId: 'bbgrid-table-' + $scope.$id,\n                            hasAdd: false,\n                            hasColPicker: true,\n                            hasFilters: true,\n                            applySearchText: function () {\n                                /*istanbul ignore else: sanity check */\n                                if (angular.isFunction(self.applySearchText)) {\n                                    self.applySearchText();\n                                }\n                            }\n                        };\n\n                        $scope.$watch('options.viewKeeperOffsetElId', function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                if (self.viewKeeperChangedHandler) {\n                                    self.viewKeeperChangedHandler(newValue);\n                                }\n                            }\n                        });\n                    }],\n                    link: function ($scope, element, attr) {\n                        $scope.customToolbar = {\n                            hasCustomToolbar: false\n                        };\n                        $scope.customToolbar.hasCustomToolbar = angular.isDefined(attr.bbGridCustomToolbar);\n\n                        $scope.$watch('locals.hasCustomToolbar', function () {\n                            var breakpoints = {},\n                                cellScopes,\n                                columnCount = 0,\n                                columnModel,\n                                compiledTemplates = [],\n                                currentExtendedColumnWidth,\n                                extendedColumnIndex,\n                                extendedColumnName,\n                                fullGrid,\n                                getContextMenuItems,\n                                hasTemplatedColumns,\n                                header,\n                                id,\n                                locals = $scope.locals,\n                                localRowSelect = false,\n                                needsExtendedColumnResize,\n                                originalExtendedColumnWidth,\n                                seemore_template = 'sky/templates/grids/seemore.html',\n                                dropdown_template = 'sky/templates/grids/dropdown.html',\n                                reorderingColumns,\n                                tableBody,\n                                tableEl = element.find('table'),\n                                tableDomEl = tableEl[0],\n                                tableWrapper = element.find('.table-responsive'),\n                                tableWrapperWidth,\n                                toolbarContainer = element.find('.bb-grid-toolbar-viewkeeper'),\n                                toolbarContainerId,\n                                totalColumnWidth,\n                                verticalOffSetElId,\n                                vkActionBarAndBackToTop,\n                                vkToolbars,\n                                vkHeader,\n                                windowEl = $($window),\n                                windowEventId,\n                                resizeStartColWidth,\n                                hasPristineColumns = true,\n                                scrollbarWidth,\n                                doNotResetRows = false;\n\n                            function getTopScrollbar() {\n                                return element.find('.bb-grid-top-scrollbar');\n                            }\n\n                            function getTopScrollbarDiv() {\n                                return element.find('.bb-grid-top-scrollbar > div');\n                            }\n\n                            function updateGridLoadedTimestampAndRowCount(count) {\n                                $scope.locals.timestamp = new Date().getTime();\n                                $scope.locals.rowcount = count;\n                            }\n\n                            function reInitGrid() {\n                                if ($scope.options && $scope.options.selectedColumnIds && $scope.options.selectedColumnIds.length > 0 && tableEl[0].grid) {\n\n                                    initGrid();\n\n                                    if ($scope.options.data && $scope.options.data.length > 0) {\n                                        setRows($scope.options.data);\n                                    }\n                                }\n                            }\n\n                            function mediaBreakpointHandler(newBreakpoints) {\n                                breakpoints = newBreakpoints;\n                                reInitGrid();\n                            }\n\n                            function buildColumnClasses(column) {\n                                var classes = '';\n\n                                //if this column does not allow search then add the appropriate class. This is used when highlighting search results\n                                if (column.exclude_from_search) {\n                                    classes += \"bb-grid-no-search \";\n                                }\n\n                                return classes;\n                            }\n\n                            function getEmptyString() {\n                                return '';\n                            }\n\n                            function buildCellAttribute(rowId, cellValue, rawObject, column) {\n                                /*jslint unparam: true*/\n                                return \"data-grid-field='\" + column.name + \"'\" + \"data-bbauto-field='\" + column.name + \"'\" + \"data-bbauto-index='\" + (tableEl.getInd(rowId) - 1) + \"'\";\n                            }\n\n                            function getColumnById(columns, id) {\n                                var column,\n                                    i;\n\n                                for (i = 0; i < columns.length; i++) {\n                                    column = columns[i];\n                                    if (column.id === id) {\n                                        return column;\n                                    }\n                                }\n                            }\n\n                            function resetExtendedColumn() {\n                                //wipe out extended column stuff\n                                extendedColumnName = null;\n                                currentExtendedColumnWidth = null;\n                                originalExtendedColumnWidth = null;\n                                extendedColumnIndex = null;\n                                needsExtendedColumnResize = false;\n                            }\n\n                            function getBreakpointsWidth(column) {\n                                var columnDefault;\n\n                                if (column.width_all > 0) {\n                                    columnDefault = column.width_all;\n                                } else {\n                                    columnDefault = DEFAULT_COLUMN_SIZE;\n                                }\n\n                                if (breakpoints.xs) {\n                                    return column.width_xs > 0 ? column.width_xs : columnDefault;\n                                } else if (breakpoints.sm) {\n                                    return column.width_sm > 0 ? column.width_sm : columnDefault;\n                                } else if (breakpoints.md) {\n                                    return column.width_md > 0 ? column.width_md : columnDefault;\n                                } else if (breakpoints.lg) {\n                                    return column.width_lg > 0 ? column.width_lg : columnDefault;\n                                }\n\n                                return columnDefault;\n                            }\n\n                            function buildColumnModel(columns, selectedColumnIds) {\n                                var colModel = [],\n                                    column,\n                                    colWidth,\n                                    index,\n                                    gridColumn;\n\n                                hasTemplatedColumns = false;\n\n                                if (getContextMenuItems) {\n                                    colModel.push({\n                                        classes: 'bb-grid-dropdown-cell',\n                                        fixed: true,\n                                        sortable: false,\n                                        name: DROPDOWN_TOGGLE_COLUMN_NAME,\n                                        label: ' ',\n                                        width: DROPDOWN_TOGGLE_COLUMN_SIZE,\n                                        title: false,\n                                        hidedlg: true,\n                                        resizable: false,\n                                        search: false,\n                                        template_url: dropdown_template,\n                                        controller: 'bbGridContextMenuController',\n                                        cellattr: buildCellAttribute,\n                                        formatter: getEmptyString,\n                                        is_context_menu: true\n                                    });\n\n                                    /*istanbul ignore else: sanity check */\n                                    if (!compiledTemplates[dropdown_template]) {\n                                        compiledTemplates[dropdown_template] = $compile($templateCache.get(dropdown_template));\n                                    }\n\n                                    hasTemplatedColumns = true;\n\n                                    totalColumnWidth = totalColumnWidth + DROPDOWN_TOGGLE_COLUMN_SIZE;\n                                }\n\n\n                                resetExtendedColumn();\n\n                                for (index = 0; index < selectedColumnIds.length; index++) {\n                                    column = getColumnById(columns, selectedColumnIds[index]);\n\n                                    if (column) {\n\n                                        colWidth = getBreakpointsWidth(column);\n\n                                        //If this is the last selected column and the sum of the columns is shorter than the area available, extend the last column\n                                        if ((index === (selectedColumnIds.length - 1)) && (tableWrapper.width() > (colWidth + totalColumnWidth))) {\n                                            needsExtendedColumnResize = true;\n                                            originalExtendedColumnWidth = colWidth;\n                                            extendedColumnName = column.name;\n                                            extendedColumnIndex = index;\n\n                                            //If multiselect and/or contextmenu exist, then the last column index is shifted.\n                                            if (locals.multiselect) {\n                                                extendedColumnIndex =  extendedColumnIndex + 1;\n                                            }\n                                            if (getContextMenuItems) {\n                                                extendedColumnIndex = extendedColumnIndex + 1;\n                                            }\n\n                                            colWidth = tableWrapper.width() - totalColumnWidth;\n                                            currentExtendedColumnWidth = colWidth;\n                                        }\n\n                                        gridColumn = {\n                                            index: column.id.toString(),\n                                            sortable: false,\n                                            id: column.id,\n                                            name: column.name,\n                                            label: column.caption,\n                                            align: (column.right_align ? 'right' : (column.center_align ? 'center' : 'left')),\n                                            classes: buildColumnClasses(column),\n                                            cellattr: buildCellAttribute,\n                                            controller: column.controller,\n                                            template_url: column.template_url,\n                                            jsonmap: column.jsonmap,\n                                            allow_see_more: column.allow_see_more,\n                                            width: colWidth\n                                        };\n\n                                        if (column.allow_see_more && !gridColumn.template_url) {\n                                            gridColumn.template_url = seemore_template;\n\n                                            if (!compiledTemplates[seemore_template]) {\n                                                compiledTemplates[seemore_template] = $compile($templateCache.get(seemore_template));\n                                            }\n                                        }\n\n                                        if (gridColumn.template_url) {\n                                            //Setup a formatter to return an empty string until the\n                                            //angular template is processed for the cell.\n                                            gridColumn.formatter = getEmptyString;\n                                            hasTemplatedColumns = true;\n                                        } else if (column.colFormatter) {\n                                            gridColumn.formatter = column.colFormatter;\n                                        }\n\n                                        colModel.push(gridColumn);\n\n                                        totalColumnWidth = totalColumnWidth + colWidth;\n                                    }\n                                }\n\n                                return colModel;\n                            }\n\n                            function getColumnElementIdFromName(columnName) {\n                                return locals.gridId + \"_\" + columnName;\n                            }\n\n                            function getColumnNameFromElementId(columnName) {\n                                /*istanbul ignore else: sanity check */\n                                if (columnName) {\n                                    return columnName.replace(locals.gridId + \"_\", \"\");\n                                }\n                            }\n\n                            function getDesiredGridWidth() {\n                                var width = tableWrapper.width();\n\n                                if (width < totalColumnWidth) {\n                                    width = totalColumnWidth;\n                                    tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n                                } else {\n                                    tableWrapper.addClass('bb-grid-table-wrapper');\n                                }\n\n                                return width;\n                            }\n\n                            function setScrollbarHeight() {\n                                var topScrollbar = getTopScrollbar(),\n                                    topScrollbarDiv = getTopScrollbarDiv();\n\n                                if (totalColumnWidth > (topScrollbar.width()) && !breakpoints.xs) {\n                                    topScrollbar.height(scrollbarWidth);\n                                    topScrollbarDiv.height(scrollbarWidth);\n                                } else {\n                                    topScrollbar.height(0);\n                                    topScrollbarDiv.height(0);\n                                }\n                            }\n\n                            function resetTopScrollbar() {\n                                var topScrollbarDiv = getTopScrollbarDiv();\n                                topScrollbarDiv.width(totalColumnWidth);\n                                setScrollbarHeight();\n                            }\n\n                            function setColumnSize(columnName, columnSize, totalWidth) {\n                                var gridHeaders,\n                                    colSizePx = columnSize + 'px',\n                                    bodyScrollLeft,\n                                    tableGrid = tableEl[0].grid;\n\n                                gridHeaders = tableGrid.headers;\n                                bodyScrollLeft = tableGrid.bDiv.scrollLeft;\n                                /* jqGrid does not provide a function to change a single column column size.\n                                   This code snippet mirrors how jqGrid changes column size in their own dragEnd\n                                   function.\n                                */\n                                tableEl[0].p.colModel[extendedColumnIndex].width = columnSize;\n                                gridHeaders[extendedColumnIndex].width = columnSize;\n                                gridHeaders[extendedColumnIndex].el.style.width = colSizePx;\n                                tableGrid.cols[extendedColumnIndex].style.width = colSizePx;\n                                /* istanbul ignore next: sanity check */\n                                tableEl[0].p.tblwidth = totalWidth || tableEl[0].p.tblwidth;\n                                tableGrid.hDiv.scrollLeft = bodyScrollLeft;\n                            }\n\n                            function resizeExtendedColumn(changedWidth, isIncreasing) {\n                                var extendedShrinkWidth = currentExtendedColumnWidth - originalExtendedColumnWidth;\n\n                                //If the extended portion of the last column is less than the amount resized\n                                if (extendedShrinkWidth <= changedWidth) {\n                                    //decrease extended column to original size\n\n\n                                    //increase grid width by remainder and wipe out all the extended stuff\n                                    if (isIncreasing) {\n                                        totalColumnWidth = totalColumnWidth + (changedWidth - extendedShrinkWidth);\n                                    } else {\n                                        totalColumnWidth = totalColumnWidth - extendedShrinkWidth;\n                                    }\n                                    setColumnSize(extendedColumnName, originalExtendedColumnWidth, totalColumnWidth);\n\n                                    tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n                                    resetExtendedColumn();\n\n                                } else {\n                                    //decrease extended column width by changedWidth\n                                    currentExtendedColumnWidth = currentExtendedColumnWidth - changedWidth;\n\n\n                                    if (!isIncreasing) {\n                                        totalColumnWidth = totalColumnWidth - changedWidth;\n                                    }\n                                    setColumnSize(extendedColumnName, currentExtendedColumnWidth, totalColumnWidth);\n\n                                }\n                                tableEl.setGridWidth(totalColumnWidth, false);\n                                resetTopScrollbar();\n                            }\n\n                            function resetGridWidth(oldWidth, newWidth) {\n                                var changedWidth,\n                                    topScrollbar = getTopScrollbar(),\n                                    width;\n\n                                topScrollbar.width(tableWrapper.width());\n                                if (needsExtendedColumnResize && newWidth < oldWidth) {\n                                    changedWidth = oldWidth - newWidth;\n                                    resizeExtendedColumn(changedWidth, false);\n                                } else {\n                                    if (totalColumnWidth === oldWidth) {\n                                        totalColumnWidth = newWidth;\n                                    }\n\n                                    width = getDesiredGridWidth();\n\n                                    /*istanbul ignore else: sanity check */\n                                    if (width > 0) {\n                                        tableEl.setGridWidth(width);\n                                        resetTopScrollbar();\n                                    }\n                                }\n                            }\n\n                            function getLastIndex() {\n                                var lastIndex = $scope.options.selectedColumnIds.length - 1;\n\n                                if (locals.multiselect) {\n                                    lastIndex = lastIndex + 1;\n                                }\n                                if (getContextMenuItems) {\n                                    lastIndex = lastIndex + 1;\n                                }\n\n                                return lastIndex;\n                            }\n\n                            function resizeStart(event, index) {\n                                var lastIndex = getLastIndex(),\n                                    jqGridEl,\n                                    thEls;\n\n                                hasPristineColumns = false;\n\n                                jqGridEl = element.find('.ui-jqgrid');\n\n                                //if resizing last element and tableEl smaller than table wrapper\n\n                                if (index === lastIndex && tableWrapperWidth > jqGridEl.width()) {\n                                    //increase width of child of table-responsive\n                                    jqGridEl.width(tableWrapperWidth);\n                                    //increase width of hdiv\n                                    element.find('.ui-jqgrid-hdiv').width(tableWrapperWidth);\n                                    //make padding right on tr of headers\n                                    element.find('.ui-jqgrid-hdiv tr').css('padding-right', tableWrapperWidth.toString() + 'px');\n                                }\n\n                                fullGrid.find('.ui-jqgrid-resize-mark').height(fullGrid.height());\n                                thEls = element.find('.ui-jqgrid .ui-jqgrid-hdiv .ui-jqgrid-htable th');\n                                resizeStartColWidth = parseInt(thEls[index].style.width);\n\n                            }\n\n                            function syncHeaderToTableWrapper() {\n                                if (vkHeader && vkHeader.isFixed) {\n                                    header.width(tableWrapper.width());\n                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                }\n                            }\n\n                            function resizeStop(newWidth, index) {\n                                var changedWidth;\n\n                                tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n\n                                changedWidth = newWidth - resizeStartColWidth;\n\n                                //If your last column was extended and this is the first resize\n                                if (needsExtendedColumnResize) {\n                                    //If the column you're resizing is not the extended column and you're increasing the size\n                                    if (index !== extendedColumnIndex && changedWidth > 0) {\n\n                                        resizeExtendedColumn(changedWidth, true);\n\n                                        resetExtendedColumn();\n                                        syncHeaderToTableWrapper();\n\n                                        return;\n                                    }\n                                    resetExtendedColumn();\n                                }\n\n                                totalColumnWidth = totalColumnWidth + changedWidth;\n                                tableEl.setGridWidth(totalColumnWidth, false);\n                                resetTopScrollbar();\n                                syncHeaderToTableWrapper();\n\n                                return;\n                            }\n\n                            function setSortStyles() {\n                                var className,\n                                    headerElId,\n                                    sortOptions;\n                                /*istanbul ignore else: sanity check */\n                                if (header) {\n                                    header.find('th').removeClass('sorting-asc').removeClass('sorting-desc');\n                                    /* istanbul ignore else: sanity check */\n                                    if ($scope.options) {\n                                        sortOptions = $scope.options.sortOptions;\n                                        if (sortOptions && sortOptions.column) {\n                                            headerElId = getColumnElementIdFromName(sortOptions.column);\n\n                                            if (sortOptions.descending) {\n                                                className = 'sorting-desc';\n                                            } else {\n                                                className = 'sorting-asc';\n                                            }\n\n                                            header.find('#' + headerElId).addClass(className);\n                                        }\n                                    }\n                                }\n                            }\n\n                            function columnIsSortable(columnName) {\n                                var excludedColumns,\n                                    sortOptions = $scope.options.sortOptions;\n\n                                if (columnName === DROPDOWN_TOGGLE_COLUMN_NAME || columnName === MULTISELECT_COLUMN_NAME) {\n                                    return false;\n                                }\n\n\n                                /*istanbul ignore else: sanity check */\n                                if (sortOptions) {\n                                    excludedColumns = sortOptions.excludedColumns;\n                                    if (excludedColumns) {\n                                        if (excludedColumns.indexOf(columnName) > -1) {\n                                            return false;\n                                        }\n                                    }\n                                }\n                                return true;\n                            }\n\n                            function highlightSearchText() {\n                                var options = $scope.options;\n                                if (options && options.searchText) {\n                                    bbHighlight(tableEl.find(\"td\").not('.bb-grid-no-search'), options.searchText, 'highlight');\n                                } else {\n                                    bbHighlight.clear(tableEl);\n                                }\n                            }\n\n                            function linkCellValue(scope, cell, linkFunction) {\n                                linkFunction(scope, function (cloned) {\n                                    cell.append(cloned);\n                                });\n                            }\n\n                            function afterInsertRow(rowid, rowdata, rowelem) {\n                                /*jshint validthis: true */\n                                var cell,\n                                    column,\n                                    columnData,\n                                    i,\n                                    itemScope,\n                                    row,\n                                    rowIndex;\n\n                                if (hasTemplatedColumns) {\n\n                                    if (!tableBody) {\n                                        tableBody = $(this);\n                                    }\n\n                                    row = tableBody.find('#' + rowid);\n\n                                    for (i = 0; i < columnModel.length; i++) {\n                                        column = columnModel[i];\n\n                                        if (column.template_url) {\n\n                                            cell = row.find('[data-grid-field=\"' + column.name + '\"]');\n                                            columnData = rowdata[column.name];\n\n                                            //Create a new scope and apply the cell object's properties to it.\n                                            itemScope = $scope.$new(true);\n\n                                            itemScope.data = columnData;\n                                            itemScope.rowData = rowelem;\n\n                                            if (column.allow_see_more) {\n                                                itemScope.skyResources = $scope.resources;\n                                            }\n\n                                            if (column.is_context_menu) {\n                                                itemScope.getContextMenuItems = getContextMenuItems;\n                                            }\n\n                                            //make the resources from the caller available to the column templates\n                                            if ($scope.options.resources) {\n                                                itemScope.resources = $scope.options.resources;\n                                            }\n\n                                            if (column.controller) {\n                                                $controller(column.controller, {\n                                                    $scope: itemScope\n                                                });\n                                            }\n\n                                            cellScopes.push(itemScope); //Stash scope for cleanup later.\n\n                                            linkCellValue(itemScope, cell, compiledTemplates[column.template_url]);\n                                        }\n                                    }\n                                }\n\n                                rowIndex = tableEl.getInd(rowid);\n\n                                //check if row should be multiselected\n                                if ($scope.selectedRows && $scope.selectedRows.length > 0) {\n\n                                    row = $scope.options.data[(rowIndex - 1)];\n                                    if (row && arrayObjectIndexOf($scope.selectedRows, row) > -1) {\n                                        tableEl.setSelection(rowid, false);\n                                    }\n                                }\n                            }\n\n                            function setColumnHeaderAlignment() {\n                                var alignmentClass,\n                                    column,\n                                    i;\n\n                                for (i = 0; i < columnModel.length; i++) {\n                                    column = columnModel[i];\n                                    if (column.align === 'center') {\n                                        alignmentClass = 'bb-grid-th-center';\n                                    } else if (column.align === 'right') {\n                                        alignmentClass = 'bb-grid-th-right';\n                                    } else {\n                                        alignmentClass = 'bb-grid-th-left';\n                                    }\n\n                                    tableEl.setLabel(column.name, '', alignmentClass);\n\n                                }\n                            }\n\n                            function gridComplete() {\n                                setColumnHeaderAlignment();\n                            }\n\n                            function gridColumnsReordered(orderedColumns) {\n                                var i,\n                                    offset = 0,\n                                    oldIndex,\n                                    selectedColumnIds = $scope.options.selectedColumnIds,\n                                    newSelectedColumnIds = [];\n\n                                resetExtendedColumn();\n\n                                //Need to account for context menu if it exists.  It will always be the first\n                                //column before and after the reorder\n                                if (angular.isFunction(getContextMenuItems)) {\n                                    offset += 1;\n                                }\n\n                                if (locals.multiselect) {\n                                    offset += 1;\n                                }\n\n                                for (i = offset; i < orderedColumns.length; i++) {\n                                    oldIndex = orderedColumns[i];\n                                    newSelectedColumnIds.push(selectedColumnIds[oldIndex - offset]);\n                                }\n\n                                reorderingColumns = true;\n                                $scope.options.selectedColumnIds = newSelectedColumnIds;\n                                $scope.$apply();\n                            }\n\n                            function getSortable() {\n                                var sortable = {\n                                    update: gridColumnsReordered\n                                };\n\n                                if (getContextMenuItems) {\n                                    sortable.exclude = \"#\" + $scope.locals.gridId + \"_\" + DROPDOWN_TOGGLE_COLUMN_NAME;\n                                }\n\n                                return sortable;\n                            }\n\n                            function clearSelectedRowsObject() {\n                                $scope.selectedRows = [];\n                            }\n\n\n                            function resetMultiselect() {\n                                clearSelectedRowsObject();\n                                tableEl.resetSelection();\n                            }\n\n\n\n                            function onSelectAll(rowIds, status) {\n                                /*jslint unparam: true */\n                                var allRowData;\n\n                                localRowSelect = true;\n\n                                clearSelectedRowsObject();\n\n                                if (status === true) {\n                                    allRowData = $scope.options.data;\n                                    if (allRowData && allRowData.length > 0) {\n                                        $scope.selectedRows = allRowData.slice();\n                                    }\n                                }\n                                $scope.$apply();\n                            }\n\n\n                            function toggleMultiselectRows(visibleSelectedRows) {\n                                var i,\n                                    index,\n                                    rowIds;\n\n                                rowIds = tableEl.getDataIDs();\n\n                                for (i = 0; i < visibleSelectedRows.length; i++) {\n                                    index = arrayObjectIndexOf($scope.options.data, visibleSelectedRows[i]);\n                                    tableEl.setSelection(rowIds[index], true);\n                                }\n                            }\n\n\n                            function onSelectRow(rowId, status) {\n                                $timeout(function () {\n                                    var index,\n                                        rowIndex = tableEl.getInd(rowId),\n                                        row;\n                                    row = $scope.options.data[(rowIndex - 1)];\n\n                                    localRowSelect = true;\n\n                                    index = arrayObjectIndexOf($scope.selectedRows, row);\n\n                                    if (status === true && index === -1 && row) {\n                                        $scope.selectedRows.push(row);\n                                    } else if (status === false && index > -1) {\n                                        $scope.selectedRows.splice(index, 1);\n                                    }\n                                });\n                            }\n\n                            function setMultiselectRow(rowId, rowIndex) {\n                                var row;\n\n                                tableEl.setSelection(rowId, false);\n                                row  = $scope.options.data[(rowIndex - 1)];\n                                $scope.selectedRows.push(row);\n                            }\n\n                            function beforeSelectRow(rowId, e) {\n                                var endIndex,\n                                    i,\n                                    lastSelectedRow,\n                                    rowIds,\n                                    startIndex = parseInt(tableEl.getInd(rowId));\n\n                                localRowSelect = true;\n\n                                if (e.shiftKey) {\n                                    lastSelectedRow = tableEl.getInd(tableEl.getGridParam('selrow'));\n                                    resetMultiselect();\n\n                                    //if lastSelectedRow is undefined or null, set to 1\n                                    if (angular.isUndefined(lastSelectedRow) || lastSelectedRow === null) {\n                                        lastSelectedRow = 1;\n                                    }\n\n                                    endIndex = parseInt(lastSelectedRow);\n\n                                    rowIds = tableEl.getDataIDs();\n\n                                    //set shift click selection first so last selected row is set properly\n                                    if (endIndex < startIndex) {\n                                        for (i = startIndex; i >  endIndex - 1; i = i - 1) {\n                                            setMultiselectRow(rowIds[(i - 1)], i);\n                                        }\n                                    } else if (endIndex > startIndex) {\n                                        for (i = startIndex; i <  endIndex + 1; i = i + 1) {\n                                            setMultiselectRow(rowIds[(i - 1)], i);\n                                        }\n                                    } else {\n                                        $scope.$apply();\n                                        return true;\n                                    }\n\n                                    $scope.$apply();\n                                    return false;\n                                }\n                                return true;\n                            }\n\n                            function pageChanged() {\n                                var skip = ($scope.locals.currentPage - 1) * $scope.paginationOptions.itemsPerPage,\n                                    top = $scope.paginationOptions.itemsPerPage;\n\n                                $scope.$emit('loadMoreRows', {top: top, skip: skip});\n\n                            }\n\n                            function initializePagination() {\n                                if (angular.isDefined($scope.paginationOptions)) {\n\n                                    if (!$scope.paginationOptions.itemsPerPage) {\n                                        $scope.paginationOptions.itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n                                    }\n\n                                    if (!$scope.paginationOptions.maxPages) {\n                                        $scope.paginationOptions.maxPages = DEFAULT_MAX_PAGES;\n                                    }\n\n                                    $scope.paginationOptions.pageChanged = pageChanged;\n\n                                    $scope.locals.currentPage = 1;\n                                }\n                            }\n\n                            function fancyCheckOff() {\n                                element.find('td .bb-check-checkbox').off();\n                            }\n\n                            function wrapCheckboxEl(checkboxEl) {\n                                checkboxEl.wrap('<label class=\"bb-check-wrapper\"></label>');\n                                checkboxEl.after('<span class=\"bb-check-checkbox\"></span>');\n                            }\n\n                            function setUpFancyCheckHeader() {\n                                var headerCheckEl =  header.find('th .cbox');\n                                wrapCheckboxEl(headerCheckEl);\n                            }\n\n                            function setUpFancyCheckCell() {\n                                var checkCellEl = element.find('td > .cbox');\n                                wrapCheckboxEl(checkCellEl);\n                                element.find('td .bb-check-checkbox').on('click', function (event) {\n                                    event.preventDefault();\n                                });\n                            }\n\n                            function getIdPrefix() {\n                                return 'bb-grid-row-' + $scope.$id + '-';\n                            }\n\n                            function initGrid() {\n                                var columns,\n                                    jqGridOptions,\n                                    selectedColumnIds,\n                                    useGridView = true,\n                                    hoverrows = false;\n\n                                totalColumnWidth = 0;\n\n                                hasPristineColumns = true;\n\n                                tableWrapperWidth = tableWrapper.width();\n\n                                locals.multiselect = false;\n\n                                //Clear reference to the table body since it will be recreated.\n                                tableBody = null;\n\n                                //Unload grid if it already exists.\n                                tableEl.jqGrid('GridUnload');\n                                fancyCheckOff();\n\n                                tableEl = element.find('table');\n                                tableDomEl = tableEl[0];\n\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n\n                                    columns = $scope.options.columns;\n                                    selectedColumnIds = $scope.options.selectedColumnIds;\n                                    getContextMenuItems = $scope.options.getContextMenuItems;\n\n                                    if ($scope.options.multiselect) {\n                                        locals.multiselect = true;\n                                        hoverrows = true;\n\n                                        totalColumnWidth = totalColumnWidth + MULTISELECT_COLUMN_SIZE;\n                                    }\n                                    $scope.searchText = $scope.options.searchText;\n                                }\n\n                                // Allow grid styles to be changed when grid is in multiselect mode (such as the\n                                // header checkbox alignment).\n                                element[locals.multiselect ? 'addClass' : 'removeClass']('bb-grid-multiselect');\n\n\n                                if (getContextMenuItems) {\n                                    useGridView = false;\n                                }\n\n                                if (columns && selectedColumnIds) {\n\n\n                                    columnModel = buildColumnModel(columns, selectedColumnIds);\n                                    columnCount = columnModel.length;\n\n                                    jqGridOptions = {\n                                        afterInsertRow: afterInsertRow,\n                                        autoencode: true,\n                                        beforeSelectRow: beforeSelectRow,\n                                        colModel: columnModel,\n                                        datatype: angular.noop,\n                                        gridComplete: gridComplete,\n                                        gridView: useGridView,\n                                        height: 'auto',\n                                        hoverrows: hoverrows,\n                                        idPrefix: getIdPrefix(),\n                                        multiselect: locals.multiselect,\n                                        multiselectWidth: MULTISELECT_COLUMN_SIZE,\n                                        onSelectAll: onSelectAll,\n                                        onSelectRow: onSelectRow,\n                                        resizeStart: resizeStart,\n                                        resizeStop: resizeStop,\n                                        rowNum: -1,\n                                        shrinktofit: false,\n                                        sortable: getSortable(),\n                                        width: getDesiredGridWidth()\n                                    };\n\n\n                                    tableEl.jqGrid(jqGridOptions);\n\n                                    header = $(tableDomEl.grid.hDiv);\n\n                                    //Attach click handler for sorting columns\n                                    header.find('th').on('click', function () {\n                                        var sortOptions = $scope.options.sortOptions,\n                                            columnName;\n\n                                        if (!sortOptions) {\n                                            sortOptions = $scope.options.sortOptions = {};\n                                        }\n\n                                        columnName = getColumnNameFromElementId(this.id);\n\n                                        if (columnIsSortable(columnName)) {\n                                            sortOptions.column = columnName;\n                                            sortOptions.descending = $(this).hasClass('sorting-asc');\n                                            $scope.$apply();\n                                        }\n                                    });\n\n                                    fullGrid = header.parents('.ui-jqgrid:first');\n\n                                    if (vkHeader) {\n                                        vkHeader.destroy();\n                                    }\n\n                                    $scope.locals.showToolbar = true;\n\n                                    getTopScrollbar().width(tableWrapper.width());\n                                    resetTopScrollbar();\n\n                                    if (!$scope.options.fixedToolbar) {\n                                        vkHeader = new bbViewKeeperBuilder.create({\n                                            el: header[0],\n                                            boundaryEl: tableWrapper[0],\n                                            verticalOffSetElId: toolbarContainerId,\n                                            setWidth: true,\n                                            onStateChanged: function () {\n                                                if (vkHeader.isFixed) {\n                                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                                } else {\n                                                    header.scrollLeft(0);\n                                                }\n\n                                            }\n                                        });\n                                    }\n\n                                    setSortStyles();\n\n                                    setUpFancyCheckHeader();\n\n                                    $scope.gridCreated = true;\n\n                                }\n\n                            }\n\n                            function destroyCellScopes() {\n                                var i;\n                                if (cellScopes) {\n                                    for (i = 0; i < cellScopes.length; i++) {\n                                        cellScopes[i].$destroy();\n                                    }\n                                }\n                                cellScopes = [];\n                            }\n\n                            function loadColumnTemplates(callback) {\n                                var columns,\n                                    templateUrlsToLoad = {};\n\n                                //Identify any template URLs that haven't been compiled\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n                                    columns = $scope.options.columns;\n                                    /*istanbul ignore else: sanity check */\n                                    if (columns) {\n                                        angular.forEach(columns, function (column) {\n                                            var templateUrl = column.template_url;\n\n                                            if (templateUrl && !compiledTemplates[templateUrl]) {\n                                                templateUrlsToLoad[templateUrl] = templateUrl;\n                                            }\n                                        });\n                                    }\n                                }\n\n                                //Load template URLs that need compiling\n                                bbData.load({\n                                    text: templateUrlsToLoad\n                                }).then(function (result) {\n                                    var p,\n                                        template;\n\n                                    // Compile templates and store them for use when adding rows.\n                                    for (p in result.text) {\n                                        /*istanbul ignore else: sanity check */\n                                        if (result.text.hasOwnProperty(p)) {\n                                            template = result.text[p];\n\n                                            /*istanbul ignore else: sanity check */\n                                            if (template) {\n                                                compiledTemplates[p] = $compile(template);\n                                            }\n                                        }\n                                    }\n\n                                    callback();\n                                });\n                            }\n\n                            function handleTableWrapperResize() {\n                                var newWidth = tableWrapper.width(),\n                                    topScrollbar = getTopScrollbar();\n\n                                if (tableWrapperWidth && tableWrapperWidth !== newWidth) {\n                                    if (hasPristineColumns) {\n                                        resetGridWidth(tableWrapperWidth, newWidth);\n                                    } else {\n                                        topScrollbar.width(newWidth);\n                                    }\n                                    tableWrapperWidth = newWidth;\n                                } else {\n                                    tableWrapperWidth = newWidth;\n                                }\n                            }\n\n                            function setRows(rows) {\n                                /*istanbul ignore else: sanity check */\n                                if (tableDomEl.addJSONData) {\n                                    loadColumnTemplates(function () {\n\n                                        if (locals.multiselect) {\n                                            element.find('td').off('mousedown.gridmousedown');\n                                        }\n\n                                        tableEl.resetSelection();\n\n                                        fancyCheckOff();\n\n                                        destroyCellScopes();\n                                        tableDomEl.addJSONData(rows);\n                                        $timeout(highlightSearchText);\n                                        handleTableWrapperResize();\n                                        /*istanbul ignore next: sanity check */\n                                        updateGridLoadedTimestampAndRowCount(rows ? rows.length : 0);\n\n                                        setUpFancyCheckCell();\n\n                                    });\n                                }\n                            }\n\n                            function setupToolbarViewKeepers() {\n                                if (vkToolbars) {\n                                    vkToolbars.destroy();\n                                }\n\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n                                    verticalOffSetElId = $scope.options.viewKeeperOffsetElId;\n                                }\n\n                                if (!$scope.options || !$scope.options.fixedToolbar) {\n                                    vkToolbars = new bbViewKeeperBuilder.create({\n                                        el: toolbarContainer[0],\n                                        boundaryEl: tableWrapper[0],\n                                        setWidth: true,\n                                        verticalOffSetElId: verticalOffSetElId,\n                                        onStateChanged: function () {\n                                            $timeout(function () {\n                                                locals.isScrolled = vkToolbars.isFixed;\n                                            });\n                                        }\n                                    });\n                                }\n\n\n                                vkActionBarAndBackToTop = new bbViewKeeperBuilder.create({\n                                    el: element.find('.bb-grid-action-bar-and-back-to-top')[0],\n                                    boundaryEl: element[0],\n                                    setWidth: true,\n                                    verticalOffSetElId: verticalOffSetElId,\n                                    fixToBottom: true\n                                });\n                            }\n\n                            function backToTop() {\n                                vkToolbars.scrollToTop();\n                            }\n\n                            locals.resetMultiselect = resetMultiselect;\n\n                            locals.toggleMultiselectRows = toggleMultiselectRows;\n\n                            locals.setFilters = function (filters) {\n                                $scope.options.filters = filters;\n                                $scope.locals.applySearchText();\n                            };\n\n                            function loadMore() {\n                                var deferred = $q.defer(),\n                                    loadMorePromise = deferred.promise;\n\n                                loadMorePromise.then(function (moreRows) {\n                                    tableEl.addRowData('', moreRows);\n                                    $scope.options.data = $scope.options.data.concat(moreRows);\n                                    setUpFancyCheckCell();\n                                    doNotResetRows = true;\n                                });\n\n                                $scope.$emit('loadMoreRows', {\n                                    promise: deferred\n                                });\n\n                            }\n\n                            $scope.locals.loadMore = loadMore;\n\n                            if (angular.isUndefined($scope.selectedRows) || !angular.isArray($scope.selectedRows)) {\n                                $scope.selectedRows = [];\n                            }\n\n                            scrollbarWidth = bbWindow.getScrollbarWidth();\n\n                            id = $scope.$id;\n                            toolbarContainerId = id + '-toolbar-container';\n\n                            locals.backToTop = backToTop;\n\n                            //Apply unique id to the table.  ID is required by jqGrid.\n                            toolbarContainer.attr('id', toolbarContainerId);\n\n                            $scope.$watch('options.selectedColumnIds', function (newValue) {\n                                var columnChangedData;\n\n                                /*istanbul ignore else: sanity check */\n                                if (newValue) {\n                                    if (reorderingColumns) {\n                                        reorderingColumns = false;\n                                        return;\n                                    }\n\n                                    initGrid();\n\n                                    // re-evaluated so the grid won't automatically be reloaded with existing data.\n                                    columnChangedData = {\n                                        willResetData: false\n                                    };\n\n                                    $scope.$emit('includedColumnsChanged', columnChangedData);\n\n\n                                    if (!columnChangedData.willResetData && $scope.options.data && $scope.options.data.length > 0) {\n                                        // Data won't change as a result of the columns changing; reload existing data.\n                                        setRows($scope.options.data);\n                                    }\n                                }\n                            }, true);\n\n                            $scope.$watchCollection('selectedRows', function (newSelections) {\n                                var i,\n                                    index,\n                                    rowIds;\n\n                                if (localRowSelect) {\n                                    localRowSelect = false;\n                                    return;\n                                }\n\n                                if (tableEl[0].grid && $scope.options.data && $scope.options.data.length > 0) {\n                                    //blow away existing selections\n                                    tableEl.resetSelection();\n\n                                    rowIds = tableEl.getDataIDs();\n\n                                    for (i = 0; i < newSelections.length; i++) {\n\n                                        index = arrayObjectIndexOf($scope.options.data, newSelections[i]);\n\n                                        if (index > -1) {\n                                            tableEl.setSelection(rowIds[index], false);\n                                        }\n\n                                    }\n                                }\n\n                            });\n\n                            $scope.$watch('paginationOptions', initializePagination, true);\n\n                            $scope.$watchCollection('options.data', function (newValue) {\n                                if (doNotResetRows) {\n                                    doNotResetRows = false;\n                                } else {\n                                    setRows(newValue);\n                                }\n                            });\n\n                            $scope.syncViewKeepers = function () {\n                                /*istanbul ignore else: sanity check */\n                                if (vkToolbars) {\n                                    vkToolbars.syncElPosition();\n                                }\n                            };\n\n                            $scope.syncActionBarViewKeeper = function () {\n                                /*istanbul ignore else: sanity check */\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.syncElPosition();\n                                }\n                            };\n\n                            $scope.$watch('options.sortOptions', setSortStyles, true);\n\n                            $scope.$watchGroup(['options.viewKeeperOffsetElId', 'options.fixedToolbar'], function () {\n                                setupToolbarViewKeepers();\n                            });\n\n                            $scope.$watch('options.filters', function (f) {\n                                $scope.$broadcast('updateAppliedFilters', f);\n                            });\n\n                            bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                            tableWrapper.on('scroll', function () {\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkHeader) {\n                                    vkHeader.syncElPosition();\n                                }\n\n                                if (header.hasClass('bb-viewkeeper-fixed')) {\n                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                }\n\n                                getTopScrollbar().scrollLeft(tableWrapper.scrollLeft());\n                            });\n\n                            windowEventId = 'bbgrid' + id;\n\n                            windowEl.on('resize.' + windowEventId + ', orientationchange.' + windowEventId, function () {\n                                handleTableWrapperResize();\n                            });\n\n                            // Reinitialize grid when grid element resizes from 0\n                            $scope.$watch(function () {\n                                return element.width();\n                            }, function (newValue, oldValue) {\n                                if (newValue !== oldValue && oldValue === 0) {\n                                    reInitGrid();\n                                }\n                            });\n\n                            $scope.locals.topScrollbarScroll = function () {\n                                var topScrollbar = getTopScrollbar();\n                                tableWrapper.scrollLeft(topScrollbar.scrollLeft());\n                                if (header.hasClass('bb-viewkeeper-fixed')) {\n                                    header.scrollLeft(topScrollbar.scrollLeft());\n                                }\n                            };\n\n                            $scope.locals.hasWaitAndEmpty = function () {\n                                return $scope.options && $scope.options.loading && (!$scope.options.data || $scope.options.data.length < 1);\n                            };\n\n\n                            element.on('$destroy', function () {\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkToolbars) {\n                                    vkToolbars.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkHeader) {\n                                    vkHeader.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.destroy();\n                                }\n\n                                windowEl.off('resize.' + windowEventId + ', orientationchange.' + windowEventId);\n\n                                fancyCheckOff();\n\n                                bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                            });\n                        });\n                    },\n                    templateUrl: 'sky/templates/grids/grid.html'\n                };\n            }]);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function BBGridToolbar(bbResources, bbModal) {\n        return {\n            require: '?^bbGrid',\n            scope: {\n                options: '=?bbToolbarOptions'\n            },\n            transclude: true,\n            link: function ($scope, el, attr, bbGrid) {\n                var topScrollbarEl = el.find('.bb-grid-top-scrollbar');\n\n                function applySearchText() {\n                    var searchEl;\n\n                    searchEl = el.find('.bb-search-container input');\n                    /*istanbul ignore else: sanity check */\n                    if (angular.isFunction(searchEl.select) && searchEl.length > 0 && $scope.searchText) {\n                        searchEl.eq(0).select();\n                    }\n\n                    $scope.options.searchText = $scope.searchText;\n                }\n\n                function openColumnPicker() {\n                    bbModal.open({\n                        templateUrl: 'sky/templates/grids/columnpicker.html',\n                        controller: 'BBGridColumnPickerController',\n                        resolve: {\n                            columns: function () {\n                                return $scope.options.columns;\n                            },\n                            selectedColumnIds: function () {\n                                return $scope.options.selectedColumnIds;\n                            },\n                            columnPickerHelpKey: function () {\n                                return $scope.options.columnPickerHelpKey;\n                            },\n                            listMode: function () {\n                                return $scope.options.columnPickerMode;\n                            }\n                        }\n                    }).result.then(function (selectedColumnIds) {\n                        $scope.options.selectedColumnIds = selectedColumnIds;\n                    });\n                }\n\n                function toggleFilterMenu(isOpen) {\n                    if ($scope.options && $scope.options.hasInlineFilters) {\n                        if (angular.isDefined(isOpen)) {\n                            $scope.toolbarLocals.filtersVisible = isOpen;\n                        } else {\n                            $scope.toolbarLocals.filtersVisible = !$scope.toolbarLocals.filtersVisible;\n                        }\n                    /*istanbul ignore else: sanity check */\n                    } else if (bbGrid !== null && angular.isFunction(bbGrid.toggleFilterMenu)) {\n                        bbGrid.toggleFilterMenu(isOpen);\n                    }\n                }\n\n                function moveInlineFilters() {\n                    el.parents('.bb-grid-container').find('.bb-filters-inline')\n                        .appendTo(el.find('.bb-grid-filter-inline-container'));\n\n                }\n\n                $scope.toolbarLocals = {\n                    applySearchText: applySearchText,\n                    openColumnPicker: openColumnPicker,\n                    toggleFilterMenu: toggleFilterMenu\n                };\n\n                $scope.resources = bbResources;\n\n                /*istanbul ignore else: sanity check */\n                if (bbGrid !== null && angular.isUndefined($scope.options)) {\n                    $scope.$watch(function () {\n                        return bbGrid.scope.options;\n                    }, function (newValue) {\n                        $scope.options = newValue;\n                    });\n                }\n\n                //grid columns changed, initialize toolbar stuff\n                $scope.$watch('options.selectedColumnIds', function (newValue) {\n                    if (angular.isDefined(newValue)) {\n\n                        $scope.searchText = $scope.options.searchText;\n\n                        if ($scope.options.hasInlineFilters) {\n                            moveInlineFilters();\n                        }\n\n                        /*istanbul ignore else: sanity check */\n                        if (bbGrid !== null) {\n                            bbGrid.applySearchText = applySearchText;\n                        }\n\n                        if (angular.isFunction($scope.options.onAddClick)) {\n                            $scope.toolbarLocals.hasAdd = true;\n                        }\n                    }\n                }, true);\n\n                $scope.$watch('options.filtersOpen', function (newValue) {\n                    if (angular.isDefined(newValue)) {\n                        toggleFilterMenu(newValue);\n                    }\n                });\n\n                /*istanbul ignore else: sanity check */\n                if (bbGrid !== null) {\n                    topScrollbarEl.on('scroll', function () {\n                        bbGrid.syncGridHeaderScrollToTopScrollbar();\n                    });\n                }\n\n                $scope.$on('$destroy', function () {\n                    /*istanbul ignore else: sanity check */\n                    if (bbGrid !== null) {\n                        topScrollbarEl.off();\n                    }\n                });\n\n\n            },\n            templateUrl: 'sky/templates/grids/gridtoolbar.html'\n        };\n    }\n\n    BBGridToolbar.$inject = ['bbResources', 'bbModal'];\n\n    angular.module('sky.grids.toolbar', ['sky.resources', 'sky.modal', 'sky.grids.columnpicker'])\n        .directive('bbGridToolbar', BBGridToolbar);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular, jQuery */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.help', ['ui.router'])\n        .constant('bbHelpConfig', {\n            onHelpLoaded: null,\n            productId: 'Sky',\n            customLocales: [],\n            url: null\n        })\n        .factory('bbHelp', ['$q', '$state', '$window', 'bbHelpConfig', function ($q, $state, $window, bbHelpConfig) {\n            var initPromise;\n\n            function helpwidgetLoaded() {\n                return !!($window.BBHELP && $window.BBHELP.HelpWidget);\n            }\n\n            function init() {\n                var configOnHelpLoaded,\n                    deferred;\n\n                if (!initPromise) {\n                    deferred = $q.defer();\n                    initPromise = deferred.promise;\n\n                    if (helpwidgetLoaded()) {\n                        deferred.resolve();\n                    } else if (bbHelpConfig.url) {\n                        jQuery.ajax({\n                            cache: true,\n                            dataType: 'script',\n                            url: bbHelpConfig.url\n                        }).done(function () {\n                            var config = angular.extend({}, bbHelpConfig);\n\n                            if (!config.getCurrentHelpKey) {\n                                config.getCurrentHelpKey = function () {\n                                    // $state.current.helpKeyOverride outranks $state.current.pageData.helpKey\n                                    if ($state.current.helpKeyOverride) {\n                                        return $state.current.helpKeyOverride;\n                                    }\n\n                                    if ($state.current.pageData) {\n                                        return $state.current.pageData.helpKey;\n                                    }\n                                    return null;\n                                };\n                            }\n\n                            configOnHelpLoaded = config.onHelpLoaded;\n\n                            config.onHelpLoaded = function () {\n                                if (angular.isFunction(configOnHelpLoaded)) {\n                                    configOnHelpLoaded.apply(this, arguments);\n                                }\n\n                                deferred.resolve();\n                            };\n\n                            $window.BBHELP.HelpWidget.load(config);\n                        });\n                    } else {\n                        initPromise = null;\n                        throw new Error('bbHelpConfig.url is not defined.');\n                    }\n                }\n\n                return initPromise;\n            }\n\n            function open() {\n                var args = arguments;\n\n                init().then(function () {\n                    $window.BBHELP.HelpWidget.open.apply($window.BBHELP.HelpWidget, args);\n                });\n            }\n\n            function close() {\n                if (helpwidgetLoaded()) {\n                    $window.BBHELP.HelpWidget.close.apply($window.BBHELP.HelpWidget, arguments);\n                }\n            }\n\n            return {\n                init: init,\n                open: open,\n                close: close\n            };\n        }]);\n\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.helpbutton', ['sky.help'])\n        .directive('bbHelpButton', ['$state', '$window', 'bbHelp', function ($state, $window, bbHelp) {\n            /// <summary>\n            /// This directive provides a button that launches the Blackbaud Help Widget.\n            /// The bbHelpKey attribute sets the help key. The widget will show the given key's corresponding help page\n            /// The bbSetHelpKeyOverride attribute, when set to \"true\", makes this directive's help key override the current page help key.\n            ///     The help key override will be removed when the directive is removed from the page.\n            /// </summary>\n\n            function link(scope, el, attrs) {\n                /*jslint unparam: true */\n                var oldHelpKeyOverride;\n\n                el.addClass('bb-helpbutton fa fa-question-circle close');\n\n                if (attrs.bbSetHelpKeyOverride && attrs.bbSetHelpKeyOverride.toLowerCase() === 'true') {\n                    oldHelpKeyOverride = $state.current.helpKeyOverride;\n                    $state.current.helpKeyOverride = attrs.bbHelpKey;\n\n                    el.on(\"remove\", function () {\n                        $state.current.helpKeyOverride = oldHelpKeyOverride;\n                    });\n                }\n\n                el.click(function () {\n                    bbHelp.open(attrs.bbHelpKey);\n                });\n            }\n\n            return {\n                link: link\n            };\n        }]);\n\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.highlight', [])\n        .factory('bbHighlight', function () {\n            var DATA_CLASS_NAME = 'bb-hightlight-class',\n                DEFAULT_CLASS_NAME = 'highlight';\n\n            // Copied and modified from here so we don't have yet another jQuery plugin dependency.\n            // http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\n            function highlight(el, pat, classn) {\n                function innerHighlight(node, pat) {\n                    var pos,\n                        skip = 0,\n                        spannode,\n                        middlebit,\n                        i,\n                        middleclone;\n\n                    classn = classn || DEFAULT_CLASS_NAME;\n\n                    el.data(DATA_CLASS_NAME, classn);\n\n                    if (node.nodeType === 3) {\n                        pos = node.data.toUpperCase().indexOf(pat);\n                        if (pos >= 0) {\n                            spannode = document.createElement('span');\n                            spannode.className = String(classn);\n                            middlebit = node.splitText(pos);\n                            middlebit.splitText(pat.length);\n                            middleclone = middlebit.cloneNode(true);\n                            spannode.appendChild(middleclone);\n                            middlebit.parentNode.replaceChild(spannode, middlebit);\n                            skip = 1;\n                        }\n                    } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\n                        for (i = 0; i < node.childNodes.length; ++i) {\n                            i += innerHighlight(node.childNodes[i], pat);\n                        }\n                    }\n                    return skip;\n                }\n\n                return el.length && pat && pat.length ? el.each(function () {\n                    innerHighlight(this, pat.toUpperCase());\n                }) : el;\n            }\n\n            function removeHighlight(el) {\n                var classn = el.data(DATA_CLASS_NAME) || DEFAULT_CLASS_NAME;\n\n                return el.find('span.' + classn).each(function () {\n                    var parentNode = this.parentNode;\n\n                    parentNode.replaceChild(this.firstChild, this);\n                    parentNode.normalize();\n                }).end();\n            }\n\n            highlight.clear = removeHighlight;\n\n            return highlight;\n        })\n        .directive('bbHighlight', ['bbHighlight', function (bbHighlight) {\n            return {\n                link: function (scope, el, attrs) {\n                    function highlight() {\n                        var highlightText = scope.$eval(attrs.bbHighlight);\n\n                        bbHighlight.clear(el);\n\n                        if (highlightText) {\n                            bbHighlight(el, highlightText);\n                        }\n                    }\n\n                    scope.$watch(attrs.bbHighlight, function () {\n                        highlight();\n                    });\n\n                    if (attrs.bbHighlightBeacon) {\n                        scope.$watch(attrs.bbHighlightBeacon, function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                scope.$evalAsync(highlight);\n                            }\n                        }, true);\n                    }\n\n                    if (attrs.ngBind) {\n                        scope.$watch(attrs.ngBind, function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                highlight();\n                            }\n                        });\n                    }\n                },\n                priority: 1, // Make sure ng-bind (which has a priortiy of 0) is processed before this\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*global angular, define, enquire, require */\n\n(function () {\n    'use strict';\n\n    var mediaBreakpointsConfig = {\n            mediaQueries: {\n                xs: '(max-width: 767px)',\n                sm: '(min-width: 768px) and (max-width: 991px)',\n                md: '(min-width: 992px) and (max-width: 1199px)',\n                lg: '(min-width: 1200px)'\n            }\n        },\n        bp = {},\n        handlers = [],\n        mediaBreakpoints;\n\n\n\n    function runRegisterEnquire($window, $timeout) {\n        function registerEnquire(enquire) {\n            var mediaQueries = mediaBreakpointsConfig.mediaQueries,\n                p;\n\n            function updateStatus(newSize) {\n                var handler,\n                    i;\n                bp.xs = bp.sm = bp.md = bp.lg = false;\n                bp[newSize] = true;\n\n                for (i = 0; i < handlers.length; i += 1) {\n                    handler = handlers[i];\n\n                    /*istanbul ignore else */\n                    if (handler) {\n                        handler(bp);\n                    }\n                }\n                $timeout(angular.noop);\n            }\n\n\n            function registerQuery(name) {\n                if (!angular.isDefined(enquire.queries[mediaQueries[name]])) {\n                    enquire.register(mediaQueries[name], function () {\n                        updateStatus(name);\n                    });\n                }\n            }\n\n            for (p in mediaQueries) {\n                /*istanbul ignore else */\n                if (mediaQueries.hasOwnProperty(p)) {\n                    registerQuery(p);\n                }\n            }\n        }\n\n        /* istanbul ignore next boilerplate RequireJS detection */\n        if (typeof define === 'function' && define.amd) {\n            // AMD. Register as an anonymous module.\n            require(['enquire'], registerEnquire);\n        } else if ($window.enquire) {\n            // Browser globals\n            registerEnquire(enquire);\n        }\n    }\n\n    runRegisterEnquire.$inject = ['$window', '$timeout'];\n\n    mediaBreakpoints = {\n        register: function (callback) {\n            handlers.push(callback);\n\n            //Fire handler immediately\n            callback(bp);\n        },\n\n        unregister: function (callback) {\n            var i;\n\n            for (i = 0; i < handlers.length; i += 1) {\n                if (handlers[i] === callback) {\n                    handlers.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        getCurrent: function () {\n            return bp;\n        }\n    };\n\n    angular.module('sky.mediabreakpoints', [])\n        .constant('bbMediaBreakpointsConfig', mediaBreakpointsConfig)\n        .run(runRegisterEnquire)\n        .factory('bbMediaBreakpoints', [function () {\n            return mediaBreakpoints;\n        }]);\n}());\n","/*jshint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var openModalCount = 0;\n\n    angular.module('sky.modal', ['sky.helpbutton', 'sky.resources', 'ui.bootstrap'])\n        .factory('bbModal', ['$uibModal', '$window', function ($uibModal, $window) {\n            return {\n                open: function (opts) {\n                    var bodyEl,\n                        isIOS,\n                        modalInstance,\n                        scrollTop;\n\n                    function modalClosed() {\n                        openModalCount--;\n                        if (isIOS) {\n                            bodyEl\n                                .removeClass('bb-modal-open-mobile')\n                                .scrollTop(scrollTop);\n                        }\n\n                        bodyEl = null;\n                    }\n\n                    isIOS = /iPad|iPod|iPhone/i.test($window.navigator.userAgent);\n                    bodyEl = $(document.body);\n\n                    // Change default values for modal options\n                    opts = angular.extend({\n                        backdrop: 'static',\n                        windowClass: 'bb-modal'\n                    }, opts);\n\n                    // Mobile browsers exhibit weird behavior when focusing on an input element\n                    // inside a position: fixed element (in this case the modal), and it also\n                    // doesn't propery prohibit scrolling on the window.  Adding this CSS class\n                    // will change the body position to fixed and the modal position to absolute\n                    // to work around this behavior.\n                    if (isIOS) {\n                        // Setting the body position to be fixed causes it to be scrolled to the\n                        // top.  Cache the current scrollTop and set it back when the modal is\n                        // closed.\n                        scrollTop = bodyEl.scrollTop();\n                        bodyEl.addClass('bb-modal-open-mobile');\n                    }\n\n                    modalInstance = $uibModal.open(opts);\n                    openModalCount++;\n\n                    modalInstance.result.then(modalClosed, modalClosed);\n\n                    return modalInstance;\n                }\n            };\n        }])\n        .directive('bbModal', ['$timeout', function ($timeout) {\n            function getPixelValue(val) {\n                val = val || '0';\n\n                return parseFloat(val.replace('px', ''));\n            }\n\n            function getModalBodyWrapperMargin(el) {\n                var margin = 0;\n\n                while (el.not('.modal-dialog') && el.length > 0) {\n                    margin += el.outerHeight() - el.height();\n\n                    el = el.parent();\n                }\n\n                return margin;\n            }\n\n            return {\n                controller: ['$scope', function ($scope) {\n                    this.setBodyEl = function (bodyEl) {\n                        $scope.bodyEl = bodyEl;\n                    };\n                }],\n                replace: true,\n                transclude: true,\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modal.html',\n                link: function ($scope, el) {\n                    var bodyEl,\n                        resizeTimeout,\n                        windowEl = $(window);\n\n                    function fitToWindow() {\n                        var margin,\n                            modalParentEl,\n                            newMaxHeight,\n                            reservedHeight;\n\n                        if (bodyEl && bodyEl.length > 0) {\n                            modalParentEl = el.parents('.modal-dialog');\n\n                            if (modalParentEl.length > 0) {\n                                margin = getPixelValue(modalParentEl.css('margin-bottom')) + getPixelValue(modalParentEl.css('margin-top'));\n\n                                reservedHeight = margin + el.find('.modal-header').outerHeight() + el.find('.modal-footer').outerHeight();\n\n                                // Account for the border, padding, etc. of the elements that wrap the modal body.\n                                reservedHeight += getModalBodyWrapperMargin(el);\n\n                                newMaxHeight = windowEl.height() - reservedHeight;\n\n                                bodyEl.css('max-height', newMaxHeight);\n                            }\n                        }\n                    }\n\n                    $scope.$watch('bodyEl', function (newValue) {\n                        bodyEl = newValue;\n                        fitToWindow();\n                    });\n\n                    $timeout(function () {\n                        fitToWindow();\n                    }, 0);\n\n                    windowEl.on('resize.bbModal' + $scope.$id, function () {\n                        $timeout.cancel(resizeTimeout);\n\n                        resizeTimeout = $timeout(function () {\n                            fitToWindow();\n                        }, 250);\n                    });\n\n                    el.on('$destroy', function () {\n                        windowEl.off('.bbModal' + $scope.$id);\n                    });\n                }\n            };\n        }])\n        .directive('bbModalBody', function () {\n            return {\n                link: function (scope, el, attrs, modalCtrl) {\n                    el.addClass('modal-body container-fluid');\n                    modalCtrl.setBodyEl(el);\n                },\n                require: '^bbModal',\n                restrict: 'A'\n            };\n        })\n        .directive('bbModalHeader', function () {\n            return {\n                controller: angular.noop,\n                replace: true,\n                transclude: true,\n                require: '^bbModal',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalheader.html',\n                scope: {\n                    bbModalHelpKey: '='\n                }\n            };\n        })\n        .directive('bbModalFooter', function () {\n            return {\n                controller: angular.noop,\n                replace: true,\n                transclude: true,\n                require: '^bbModal',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooter.html'\n            };\n        })\n        .directive('bbModalFooterButton', function () {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbutton.html'\n            };\n        })\n        .directive('bbModalFooterButtonPrimary', ['bbResources', function (bbResources) {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbuttonprimary.html',\n                link: function ($scope, el) {\n                    if (el.children().length === 0) {\n                        el.append(\"<span>\" + bbResources.modal_footer_primary_button + \"</span>\");\n                    }\n                }\n            };\n        }])\n        .directive('bbModalFooterButtonCancel', ['bbResources', function (bbResources) {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbuttoncancel.html',\n                link: function ($scope, el) {\n                    if (el.children().length === 0) {\n                        el.append(\"<span>\" + bbResources.modal_footer_cancel_button + \"</span>\");\n                    }\n                }\n            };\n        }]);\n}(jQuery));\n","/*global angular, define, require */\n\n(function () {\n    'use strict';\n\n    function bbMoment($window) {\n        return $window.moment;\n    }\n\n    bbMoment.$inject = ['$window'];\n\n    /*istanbul ignore next boilerplate require gunk */\n    function runRegisterMoment($window) {\n\n        function registerMoment(moment) {\n            $window.moment = moment;\n        }\n\n        if (angular.isUndefined($window.moment) && typeof define === 'function' && define.amd) {\n            require(['moment'], registerMoment);\n        }\n    }\n\n    runRegisterMoment.$inject = ['$window'];\n\n    angular.module('sky.moment', [])\n        .run(runRegisterMoment)\n        .factory('bbMoment', bbMoment);\n\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function toggleOpen(el, action) {\n        $(el)[action + 'Class']('open');\n    }\n\n    angular.module('sky.navbar', [])\n        .directive('bbNavbar', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: 'sky/templates/navbar/navbar.html',\n                link: function (scope, el) {\n                    /*jslint unparam: true */\n                    $(el).on('mouseenter', '.dropdown', function () {\n                        toggleOpen(this, 'add');\n                    }).on('mouseleave', '.dropdown', function () {\n                        toggleOpen(this, 'remove');\n                    }).on('click', '.dropdown-menu a', function () {\n                        toggleOpen($('.dropdown', el), 'remove');\n                    });\n                }\n            };\n        });\n}(jQuery));\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.omnibar', [])\n        .constant('bbOmnibarConfig', {\n            appLookupUrl: '',\n            enableHelp: false,\n            enableSearch: false,\n            productId: 'Sky',\n            searchPlaceholder: 'Search',\n            serviceName: 'Sky',\n            signOutUrl: '',\n            tenantId: '',\n            url: 'https://signin.blackbaud.com/omnibar.min.js'\n        })\n        .directive('bbOmnibar', ['$window', 'bbOmnibarConfig', function ($window, bbOmnibarConfig) {\n            return {\n                transclude: true,\n                template: '<div class=\"bb-omnibar-wrap\"></div><div class=\"bb-omnibar-menu-wrap\" ng-transclude></div>',\n                link: function (scope, el) {\n                    var omnibarEl = el.children('.bb-omnibar-wrap'),\n                        omnibarMenuEl = el.find('.bb-omnibar-menu-wrap .bb-omnibar-menu');\n\n                    function afterLoad() {\n                        var searchBox = omnibarEl.find('.searchbox'),\n                            searchContainer = omnibarEl.find('.searchContainer'),\n                            searchValue;\n\n                        // No longer need this holding div now that the menu was moved into the right location in the omnibar.\n                        el.children(\".bb-omnibar-menu-wrap\").remove();\n\n                        if (omnibarEl.find(\".mobile .productmenucontainer\").length === 0) {\n                            $(\".bb-navbar\").addClass(\"bb-navbar-showmobile\");\n                        }\n\n                        searchBox.attr('placeholder', bbOmnibarConfig.searchPlaceholder);\n\n                        scope.searchBox = searchBox;\n\n                        searchBox.on('keyup', function (event) {\n                            var value = searchBox.val();\n\n                            /*istanbul ignore else */\n                            if (value !== searchValue) {\n                                searchValue = value;\n\n                                scope.searchText = value;\n                                scope.$apply();\n                            }\n\n                            scope.$emit('searchBoxKeyUp', event.keyCode);\n                        });\n\n                        scope.$watch('searching', function (searching) {\n                            if (searching) {\n                                searchContainer.addClass('searching');\n                            } else {\n                                searchContainer.removeClass('searching');\n                            }\n                        });\n\n                        scope.$watch('searchText', function (searchText) {\n                            searchText = searchText || '';\n                            if (searchText !== searchBox.val()) {\n                                searchValue = searchText;\n                                searchBox.val(searchText);\n                            }\n                        });\n\n                        scope.$apply();\n\n                        if (angular.isFunction(bbOmnibarConfig.afterLoad)) {\n                            /* jshint validthis: true */\n                            bbOmnibarConfig.afterLoad.apply(this, arguments);\n                        }\n                    }\n\n                    function userLoaded(userData) {\n                        var omnibarIndicatesNullUserTime;\n\n                        //If the user ID loaded in the omnibar does not match the user who loaded the page, sign the\n                        //user out of the application.  This will result in a redirect back to the auth size to update\n                        //the user's claims or ask the user to log back in.\n                        if (userData.id !== bbOmnibarConfig.authenticationUserId && bbOmnibarConfig.signOutUrl) {\n\n                            if (userData.id === null) {\n                                //If userData.id ==null then it may just means the omnibar is stale or there was a problem\n                                //with the interaction of the omnibar and the rex shell SPA client side code.\n                                //\n                                //If we can use localStorage to track data across sessions, then attempt to log out of NXT once\n                                //and see if this fixes it, but avoid an infinite redirect loop with the Auth Svc.\n                                //\n                                //If the browser doesn't support localStorage, then just return.\n                                //\n                                //If we don't back to the auth sign in site here, then it will just stay on the current page\n                                //with the understanding that the omnibar may be in a state of acting as though the user\n                                //is signed out.  The page is still secure because the Auth claims are evaluated on the server.\n                                //This special case is just about dealing with an edge case issue with client side javascript.\n                                if ($window.localStorage) {\n                                    omnibarIndicatesNullUserTime = $window.localStorage.omnibarIndicatesNullUserTime;\n                                    \n                                    if (omnibarIndicatesNullUserTime && (new Date() - Date.parse(omnibarIndicatesNullUserTime)) / 1000 <= 10) {\n                                        // We just looped through Auth within the last 10 seconds, so don't leave again now.\n                                        return;\n                                    }\n\n                                    try {\n                                        // Stash the time that we're doing this redirect to avoid infinite loops.\n                                        $window.localStorage.omnibarIndicatesNullUserTime = (new Date()).toString();\n                                    } catch (e) {\n                                        // Safari private browsing will throw an exception on setting localStroage.\n                                        /*istanbul ignore next: super edge case */\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            }\n\n                            // Log out and redirect to auth service.\n                            $window.location.href = bbOmnibarConfig.signOutUrl;\n                        }\n\n                        if (angular.isFunction(bbOmnibarConfig.userLoaded)) {\n                            /* jshint validthis: true */\n                            bbOmnibarConfig.userLoaded.apply(this, arguments);\n                        }\n                    }\n\n                    $.ajax({\n                        cache: true,\n                        dataType: 'script',\n                        url: bbOmnibarConfig.url\n                    }).done(function () {\n                        var loadOptions = angular.extend({}, bbOmnibarConfig, {\n                            afterLoad: afterLoad,\n                            userLoaded: userLoaded,\n                            menuEl: omnibarMenuEl\n                        });\n\n                        $window.BBAUTH.Omnibar.load(omnibarEl, loadOptions);\n                    });\n                }\n            };\n        }])\n        .directive('bbOmnibarMenu', function () {\n            return {\n                replace: true,\n                require: '^bbOmnibar',\n                restrict: 'E',\n                transclude: true,\n                template: '<div class=\"bb-omnibar-menu\" ng-transclude></div>'\n            };\n        });\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.page', [])\n        .constant('bbPageConfig', {\n            redirectUrl: null,\n            notFoundUrl: null\n        })\n        .factory('bbPage', [function () {\n            var pageStatuses;\n\n            pageStatuses = {\n                LOADING: 0,\n                LOADED: 1,\n                NOT_AUTHORIZED: 2,\n                //ERROR: 3,\n                NOT_FOUND: 4\n            };\n\n            return {\n                pageStatuses: pageStatuses\n            };\n        }])\n        .directive('bbPage', ['$window', 'bbResources', 'bbPage', 'bbPageConfig', 'bbData', '$location',\n            function ($window, bbResources, bbPage, bbPageConfig, bbData, $location) {\n                function link(scope, element) {\n                    var loadManager,\n                        locals;\n\n                    function navigateAway() {\n                        $window.location.href = bbPageConfig.redirectUrl || $window.location.origin;\n                    }\n\n                    function noPageStatusSpecified() {\n                        return element.attr('bb-page-status') === undefined;\n                    }\n\n                    function onShowing() {\n                        if (scope.bbPageUsesLoadManager) {\n                            loadManager = locals.loadManager = bbData.loadManager({\n                                scope: scope,\n                                waitForFirstItem: true,\n                                nonblockWaitForAdditionalItems: true,\n                                isAggregate: true\n                            });\n                        }\n                    }\n\n                    locals = scope.locals = {\n                        navigateAway: navigateAway,\n                        noPageStatusSpecified: noPageStatusSpecified,\n                        pageStatuses: bbPage.pageStatuses,\n                        onShowing: onShowing\n                    };\n\n                    scope.resources = bbResources;\n\n                    scope.$watch('bbPageStatus', function (value, oldValue) {\n                        scope.value = \"something\";\n                        scope.oldValue = oldValue;\n\n                        if (!value) {\n                            scope.$emit(\"bbBeginWait\");\n                        } else if (value && !oldValue) {\n                            scope.$emit(\"bbEndWait\");\n                        }\n\n                        if (value === locals.pageStatuses.NOT_AUTHORIZED) {\n                            if (loadManager) {\n                                loadManager.cancelWaiting();\n                            }\n                        } else if (value === locals.pageStatuses.NOT_FOUND) {\n                            if (loadManager) {\n                                loadManager.cancelWaiting();\n                            }\n\n                            $location.path(bbPageConfig.notFoundUrl).replace();\n                        }\n\n                    });\n                }\n\n                return {\n                    restrict: 'E',\n                    scope: {\n                        bbPageStatus: '=?',\n                        bbPageUsesLoadManager: '@?'\n                    },\n                    templateUrl: 'sky/templates/page/page.html',\n                    transclude: true,\n                    link: link\n                };\n            }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var components = [{\n        name: 'Alert',\n        cls: 'alert'\n    }, {\n        name: 'Content',\n        cls: 'content'\n    }, {\n        name: 'KeyInfo',\n        cls: 'key-info'\n    }, {\n        name: 'Image',\n        cls: 'image'\n    }, {\n        name: 'Status',\n        cls: 'status'\n    }, {\n        name: 'Title',\n        cls: 'title'\n    }, {\n        name: 'Subtitle',\n        cls: 'subtitle'\n    }, {\n        name: 'ActionBar',\n        cls: 'action-bar'\n    }],\n    pageSummaryModule = angular.module('sky.pagesummary');\n\n    function makePageSummaryComponent(component) {\n        var controllerName,\n            name = component.name;\n\n        function Controller($scope) {\n            var vm = this;\n\n            $scope.$on('$destroy', function () {\n                vm.onDestroy();\n                vm = null;\n            });\n        }\n\n        Controller.$inject = ['$scope'];\n\n        function componentFn() {\n            function link(scope, el, attrs, ctrls) {\n                var vm = ctrls[0],\n                    bbPageSummary = ctrls[1];\n\n                vm.el = el;\n\n                bbPageSummary['set' + name](vm);\n            }\n\n            return {\n                restrict: 'E',\n                require: ['bbPageSummary' + name, '^bbPageSummary'],\n                controller: controllerName,\n                controllerAs: 'bbPageSummary' + name,\n                bindToController: true,\n                link: link,\n                scope: {}\n            };\n        }\n\n        controllerName = 'BBPageSummary' + name + 'Controller';\n\n        pageSummaryModule\n            .controller(controllerName, Controller)\n            .directive('bbPageSummary' + name, componentFn);\n    }\n\n    function getCtrlPropName(component) {\n        var name = component.name;\n\n        return name.charAt(0).toLowerCase() + name.substr(1) + 'Ctrl';\n    }\n\n    function BBPageSummaryController() {\n        var vm = this;\n\n        function addComponentSetter(component) {\n            var name = component.name;\n\n            vm['set' + name] = function (ctrl) {\n                var propName = getCtrlPropName(component);\n\n                vm[propName] = ctrl;\n\n                ctrl.onDestroy = function () {\n                    vm[propName] = null;\n                };\n            };\n        }\n\n        components.forEach(addComponentSetter);\n\n        vm.getPageSummaryLeftCls = function () {\n            return {\n                'col-sm-9': !!vm.keyInfoCtrl\n            };\n        };\n    }\n\n    function bbPageSummary(bbMediaBreakpoints) {\n        function link(scope, el, attrs, vm) {\n            function watchForComponent(component) {\n                scope.$watch(function () {\n                    return vm[getCtrlPropName(component)];\n                }, function (newValue) {\n                    if (newValue) {\n                        el.find('.bb-page-summary-' + component.cls)\n                            .empty()\n                            .append(newValue.el);\n                    }\n                });\n            }\n\n            function mediaBreakpointHandler(breakpoint) {\n                var keyInfoEl = el.find('.bb-page-summary-key-info'),\n                    toEl;\n\n                if (breakpoint.xs) {\n                    toEl = el.find('.bb-page-summary-key-info-xs');\n                } else {\n                    toEl = el.find('.bb-page-summary-key-info-sm');\n                }\n\n                if (!keyInfoEl.parent().is(toEl)) {\n                    toEl.append(keyInfoEl);\n                }\n            }\n\n            components.forEach(watchForComponent);\n\n            bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n            scope.$on('$destroy', function () {\n                bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n            });\n        }\n\n        return {\n            restrict: 'E',\n            controller: 'BBPageSummaryController',\n            controllerAs: 'bbPageSummary',\n            bindToController: true,\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/pagesummary/pagesummary.directive.html',\n            transclude: true\n        };\n    }\n\n    bbPageSummary.$inject = ['bbMediaBreakpoints'];\n\n    pageSummaryModule\n        .controller('BBPageSummaryController', BBPageSummaryController)\n        .directive('bbPageSummary', bbPageSummary);\n\n    components.forEach(makePageSummaryComponent);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var evtNsPos = 0;\n\n    angular.module('sky.pagination', ['ui.bootstrap.pagination'])\n        .config(['uibPaginationConfig', function (paginationConfig) {\n            paginationConfig.maxSize = 4;\n            paginationConfig.itemsPerPage = 5;\n\n            paginationConfig.nextText = paginationConfig.previousText = '';\n        }])\n        .factory('bbPaging', function () {\n            return {\n                init: function (sourceData, config) {\n                    var paging;\n\n                    function setPageData() {\n                        var startingIndex,\n                            currentPage;\n\n                        if (!paging.disabled && sourceData) {\n                            currentPage = paging.currentPage - 1; // 1-based\n\n                            startingIndex = currentPage * paging.itemsPerPage;\n\n                            paging.items = sourceData.slice(startingIndex, startingIndex + paging.itemsPerPage);\n                        }\n                    }\n\n                    paging = {\n                        currentPage: 1,\n                        itemsPerPage: 5,\n                        totalItems: sourceData ? sourceData.length : 0,\n                        pageChanged: setPageData\n                    };\n\n                    angular.extend(paging, config);\n\n                    setPageData();\n\n                    return paging;\n                }\n            };\n        })\n        .directive('bbPagination', function () {\n            return {\n                restrict: 'A',\n                scope: {\n                    paginationDisabled: '=bbPaginationDisabled'\n                },\n                compile: function (el, attrs) {\n                    var pagedData = attrs.bbPagination;\n\n                    /*jslint white: true */\n                    el.html(\n                        '<uib-pagination ng-show=\"' + pagedData + '.totalItems > ' + pagedData + '.itemsPerPage\" total-items=\"' + pagedData + '.totalItems\" ng-model=\"' + pagedData + '.currentPage\" ng-change=\"' + pagedData + '.pageChanged()\" items-per-page=\"' + pagedData + '.itemsPerPage\"></uib-pagination>' +\n                        '<div class=\"clearfix\"></div>'\n                    );\n                    /*jslint white: false */\n\n                    return function (scope, el) {\n                        scope.$watch('paginationDisabled', function (newValue) {\n                            var paginationDummyEl,\n                                paginationEl;\n\n                            // Since we don't have complete control over the Angular Bootstrap UI pagination directive,\n                            // we can't disable it directly.  Instead just clone the pagination element, disable it\n                            // and show it while hiding the original element when pagination is disabled.\n                            if (angular.isDefined(newValue)) {\n                                paginationEl = el.find('.pagination');\n\n                                if (newValue) {\n                                    paginationDummyEl = paginationEl\n                                        .clone()\n                                        .addClass('bb-pagination-dummy');\n\n                                    paginationEl\n                                        .before(paginationDummyEl)\n                                        .hide();\n\n                                    paginationDummyEl.find('li').addClass('disabled');\n                                } else {\n                                    el.find('.bb-pagination-dummy').remove();\n                                    paginationEl.show();\n                                }\n                            }\n                        });\n                    };\n                }\n            };\n        })\n        .directive('bbPaginationContent', ['$timeout', '$window', '$animate', function ($timeout, $window, $animate) {\n            return {\n                link: function (scope, el) {\n                    var evtNs;\n\n                    evtNsPos += 1;\n\n                    evtNs = \"bbPaginationContent\" + evtNsPos;\n\n                    function removeWindowResizeHandler() {\n                        angular.element($window).off('.' + evtNs);\n                    }\n\n                    scope.$watch('pagedData', function () {\n                        var pageCount,\n                            pagedData,\n                            tries = 0,\n                            windowResizeTimeout;\n\n                        // Try for 1 second to set a min-height on paged data so the paging bar doesn't jump\n                        // up when the user hits a page with less than the max number of items.\n                        function trySetMinHeight() {\n                            $timeout(function () {\n                                var currentPage,\n                                    height = el.height(),\n                                    i,\n                                    maxHeight = 0;\n\n                                function changePage(pageNumber) {\n                                    /* Disable animation for the page change\n                                       to prevent issues with ng-repeat\n                                       that impact min-height measurements */\n                                    $animate.enabled(false, el);\n                                    pagedData.currentPage = pageNumber;\n\n                                    pagedData.pageChanged();\n                                    scope.$apply();\n                                    $animate.enabled(true, el);\n\n                                }\n\n                                if (height === 0 && tries < 5) {\n                                    tries += 1;\n                                    trySetMinHeight();\n                                    return;\n                                }\n\n                                el.addClass('bb-pagination-content bb-pagination-content-calculating');\n\n                                // Cache the current page so we can put it back.\n                                currentPage = pagedData.currentPage;\n\n                                // Reset the min height from any previous iteration.\n                                el.css('min-height', 0);\n\n                                // Navigate through each page and find the tallest page.\n                                for (i = 1; i <= pageCount; i += 1) {\n                                    changePage(i);\n                                    maxHeight = Math.max(el.height(), maxHeight);\n                                }\n\n                                // Set the min height to the height of the tallest page.\n                                el.css('min-height', maxHeight);\n\n                                // Navigate back to the initial page.\n                                changePage(currentPage);\n\n                                el.removeClass('bb-pagination-content-calculating');\n                            }, 200);\n                        }\n\n                        pagedData = scope.pagedData;\n\n                        if (angular.isDefined(scope.pagedData)) {\n                            pageCount = Math.ceil(pagedData.totalItems / (pagedData.itemsPerPage || 1));\n\n                            if (pageCount > 1) {\n                                trySetMinHeight();\n\n                                removeWindowResizeHandler();\n\n                                angular.element($window).on('resize.' + evtNs, function () {\n                                    if (windowResizeTimeout) {\n                                        $timeout.cancel(windowResizeTimeout);\n                                    }\n\n                                    windowResizeTimeout = $timeout(trySetMinHeight, 500);\n                                });\n\n                                el.on('$destroy', removeWindowResizeHandler);\n                            }\n                        }\n                    });\n                },\n                scope: {\n                    pagedData: '=bbPaginationContent'\n                }\n            };\n        }]);\n}());\n","/*jshint unused: false */\n/*global angular, bbPaletteConfig */\n\n(function () {\n'use strict';\n\nvar bbPaletteConfig;\n\n/* LINES BELOW ARE AUTO GENERATED */\nbbPaletteConfig = {\n    \"multi\": [\n        \"#1f91da\",\n        \"#f9b66d\",\n        \"#1dc8a6\",\n        \"#9176c6\",\n        \"#28d7d9\",\n        \"#ef6977\",\n        \"#919191\",\n        \"#7ec2ed\",\n        \"#fbcf9f\",\n        \"#75ebd3\",\n        \"#beaedd\",\n        \"#85e8ea\",\n        \"#f59ca6\",\n        \"#afafaf\"\n    ],\n    \"mono\": [\n        \"#156395\",\n        \"#1c84c6\",\n        \"#44a6e5\",\n        \"#83c4ed\",\n        \"#c1e1f6\"\n    ]\n};\n\nangular.module('sky.palette.config', [])\n    .constant('bbPaletteConfig', bbPaletteConfig);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.palette', ['sky.palette.config'])\n        .factory('bbPalette', ['bbPaletteConfig', function (bbPaletteConfig) {\n\n            function getPaletteByType(paletteType) {\n                return bbPaletteConfig[paletteType || 'multi'];\n            }\n\n            return {\n                getColorByIndex: function (index, paletteType) {\n                    var palette = getPaletteByType(paletteType);\n                    return palette[index % palette.length];\n                },\n                getColorSequence: function (requestedLength, paletteType) {\n\n                    var i,\n                        palette = getPaletteByType(paletteType),\n                        paletteLength,\n                        r = [];\n\n                    paletteLength = palette.length;\n                    requestedLength = requestedLength || paletteLength;\n\n                    for (i = 0; i < requestedLength; i++) {\n                        r.push(palette[i % paletteLength]);\n                    }\n\n                    return r;\n                }\n            };\n        }]);\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function bbPopoverTemplate($compile) {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function ($scope, el) {\n                var bbPopoverOpenAttr = 'bbPopoverOpen' + $scope.$id;\n\n                //prevent breaking change by adding quotes around template url and\n                //passing to new directive\n                /*istanbul ignore else */\n                if (!el.attr('bb-uib-popover-template')) {\n                    el.attr('bb-uib-popover-template', \"'\" + el.attr('bb-popover-template') + \"'\");\n                }\n\n                if (!el.attr('popover-is-open')) {\n                    el.attr('popover-is-open', bbPopoverOpenAttr);\n                }\n\n                $scope.bbPopoverAttr = el.attr('popover-is-open');\n\n\n                el.removeAttr('bb-popover-template');\n                $compile(el)($scope);\n            }\n        };\n    }\n\n    bbPopoverTemplate.$inject = ['$compile'];\n\n    function bbUibPopoverTemplate($uibTooltip) {\n        var tooltip = $uibTooltip('bbUibPopoverTemplate', 'popover', 'click', {\n            useContentExp: true\n        });\n\n        return tooltip;\n    }\n\n    bbUibPopoverTemplate.$inject = ['$uibTooltip'];\n\n    function bbUibPopoverTemplatePopup($window, $parse) {\n        return {\n            replace: true,\n            scope: { title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&', originScope: '&' },\n            link: function ($scope, el) {\n\n                var origScope = $scope.originScope(),\n                    popoverIsOpenAttr,\n                    windowEl = $($window),\n                    scopeId = $scope.$id;\n\n                popoverIsOpenAttr = origScope.bbPopoverAttr;\n\n                function closePopover() {\n\n                    /* Set the popover is open attribute this way to account for\n                       both variables directly on scope as well as using 'controller\n                       as'\n                    */\n                    /* istanbul ignore else: sanity check */\n                    if (angular.isDefined(origScope.$eval(popoverIsOpenAttr))) {\n                        $parse(popoverIsOpenAttr).assign(origScope, false);\n                    }\n                }\n\n                origScope.hide = function () {\n                    closePopover();\n                };\n\n                $scope.$watch('isOpen()', function (value) {\n                    if (value) {\n                        windowEl.on('click.popover' + scopeId, function (event) {\n                            if (!el.is(event.target) && el.has(event.target).length === 0 && $scope.isOpen) {\n                                $scope.$apply(function () {\n                                    closePopover();\n                                });\n                            }\n                        });\n                    }\n\n                });\n\n\n                $scope.$on('$destroy', function () {\n                    windowEl.off('click.popover' + scopeId);\n                });\n            },\n            templateUrl: 'sky/templates/popover/popup.html'\n        };\n    }\n    bbUibPopoverTemplatePopup.$inject = ['$window', '$parse'];\n\n    angular.module('sky.popover', ['ui.bootstrap.tooltip'])\n        .directive('bbUibPopoverTemplatePopup', bbUibPopoverTemplatePopup)\n        .directive('bbUibPopoverTemplate', bbUibPopoverTemplate)\n        .directive('bbPopoverTemplate', bbPopoverTemplate);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var serviceModules = [];\n    \n    function bbResoucesFilter(bbResources) {\n        return function (name) {\n            return bbResources[name];\n        };\n    }\n    \n    bbResoucesFilter.$inject = ['bbResources'];\n\n    angular.module('sky.resources', serviceModules)\n        .constant('bbResources', {\n            /* Strings are defined in separate JSON files located in js/sky/locales. */\n        })\n        .filter('bbResources', bbResoucesFilter);\n}());","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var CLS_HIGHLIGHTING = 'bb-scroll-into-view-highlighting',\n        RETRY_INTERVAL = 100,\n        RETRY_MAX = 10;\n\n    angular.module('sky.scrollintoview', [])\n        .constant('bbScrollIntoViewConfig', {\n            reservedBottom: 0,\n            reservedTop: 0\n        })\n        .factory('bbScrollIntoView', ['$window', 'bbScrollIntoViewConfig', function ($window, bbScrollIntoViewConfig) {\n            function highlightEl(el, options) {\n                if (options.highlight) {\n\n                    // The automatic CSS class removal should be factored out once we have some more instances\n                    // where we use animations.\n                    el\n                        .addClass(CLS_HIGHLIGHTING)\n                        .one(\n                            'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',\n                            /*istanbul ignore next */\n                            function () {\n                                el.removeClass(CLS_HIGHLIGHTING);\n                            }\n                        );\n                }\n            }\n\n            function getScrollableParentEl(el) {\n                var overflowY,\n                    parentEl = el.parent();\n\n                while (parentEl.length > 0) {\n                    if (parentEl.is('body')) {\n                        return parentEl;\n                    }\n\n                    overflowY = parentEl.css('overflow-y');\n\n                    /*istanbul ignore else: sanity check (the computed overflow property will likely never return a non-string value) */\n                    if (angular.isString(overflowY)) {\n                        switch (overflowY.toUpperCase()) {\n                        case 'AUTO':\n                        case 'HIDDEN':\n                        case 'SCROLL':\n                            return parentEl;\n                        }\n                    }\n\n                    parentEl = parentEl.parent();\n                }\n            }\n\n            function getHtmlOrBodyScrollTop() {\n                return angular.element('html').scrollTop() || angular.element('body').scrollTop();\n            }\n\n            function scrollIntoView(el, options) {\n                var currentScrollTop,\n                    elBottom,\n                    elHeight,\n                    elOffset,\n                    elTop,\n                    elToScroll,\n                    isScrolledOffBottom,\n                    isScrolledOffTop,\n                    newScrollTop,\n                    parentEl,\n                    parentElIsBody,\n                    parentHeight,\n                    reservedBottom,\n                    reservedTop,\n                    viewportHeight;\n\n                parentEl = getScrollableParentEl(el);\n                parentElIsBody = parentEl.is('body');\n\n                options = options || {};\n\n                reservedBottom = options.reservedBottom;\n                reservedTop = options.reservedTop;\n\n                if (!angular.isDefined(reservedBottom)) {\n                    reservedBottom = 0;\n\n                    if (parentElIsBody) {\n                        reservedBottom = bbScrollIntoViewConfig.reservedBottom || 0;\n                    }\n                }\n\n                if (!angular.isDefined(reservedTop)) {\n                    reservedTop = 0;\n\n                    if (parentElIsBody) {\n                        reservedTop = bbScrollIntoViewConfig.reservedTop || 0;\n                    }\n                }\n\n                if (options.highlight) {\n                    reservedBottom += 50;\n                    reservedTop += 50;\n                }\n\n                if (parentElIsBody) {\n                    currentScrollTop = getHtmlOrBodyScrollTop();\n                } else {\n                    currentScrollTop = parentEl.scrollTop();\n                }\n\n                elOffset = el.offset();\n                elHeight = el.outerHeight();\n\n                elTop = elOffset.top;\n\n                if (!parentElIsBody) {\n                    elTop = (elTop - parentEl.offset().top) + currentScrollTop;\n                }\n\n                elBottom = elTop + elHeight;\n\n                parentHeight = parentElIsBody ? angular.element(window).height() : parentEl.height();\n\n                isScrolledOffBottom = elBottom > parentHeight + (currentScrollTop - reservedBottom);\n                isScrolledOffTop = elTop < (currentScrollTop + reservedTop);\n\n                if (isScrolledOffBottom || isScrolledOffTop) {\n                    if (isScrolledOffBottom) {\n                        newScrollTop = elBottom - (parentHeight - reservedBottom);\n                    }\n\n                    viewportHeight = parentHeight - (reservedTop + reservedBottom);\n\n                    // Ensure the top of the element is visible after scrolling even if it is currently\n                    // scrolled off the bottom of the viewport.\n                    if (!isScrolledOffBottom || elHeight > viewportHeight) {\n                        newScrollTop = elTop - reservedTop;\n                    }\n\n                    elToScroll = parentElIsBody ? angular.element('html, body') : parentEl;\n\n                    elToScroll.animate(\n                        {\n                            scrollTop: Math.round(newScrollTop)\n                        },\n                        {\n                            duration: 250,\n                            always: function () {\n                                highlightEl(el, options);\n                            }\n                        }\n                    );\n                } else {\n                    highlightEl(el, options);\n                }\n            }\n\n            return scrollIntoView;\n        }])\n        .directive('bbScrollIntoView', ['$timeout', 'bbScrollIntoViewConfig', 'bbScrollIntoView', function ($timeout, bbScrollIntoViewConfig, bbScrollIntoView) {\n            function link(scope, el, attrs) {\n                var options,\n                    previousTimeout,\n                    retryCount;\n\n                function doScroll(firstTry) {\n                    if (previousTimeout) {\n                        // Make sure any pending scrolling is canceled.\n                        $timeout.cancel(previousTimeout);\n                    }\n\n                    if (firstTry) {\n                        retryCount = 0;\n                    }\n\n                    /*istanbul ignore else: hard to reach in a unit test */\n                    if (el.is(':visible') && el.children('.collapsing').length === 0) {\n                        options = angular.extend({}, bbScrollIntoViewConfig);\n\n                        if (attrs.bbScrollIntoViewHighlight) {\n                            options.highlight = scope.$eval(attrs.bbScrollIntoViewHighlight);\n                        }\n\n                        bbScrollIntoView(el, options);\n                    } else if (retryCount < RETRY_MAX) {\n                        // Keep trying to scroll until the element is visible or we run out of retry attempts.\n                        retryCount++;\n                        previousTimeout = $timeout(doScroll, RETRY_INTERVAL);\n                    }\n                }\n\n                /*istanbul ignore else: sanity check */\n                if (attrs.bbScrollIntoView) {\n                    scope.$watch(attrs.bbScrollIntoView, function (newValue, oldValue) {\n                        if (newValue && newValue !== oldValue) {\n                            doScroll(true);\n                        }\n                    });\n                }\n            }\n\n            return {\n                link: link,\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.searchfield', ['sky.resources'])\n        .directive('uiSelectMatch', ['$timeout', function ($timeout) {\n            return {\n                restrict: 'EA',\n                replace: false,\n                require: '^uiSelect',\n                link: function (scope, element, attrs, $select) {\n                    var selectContainerEl,\n                        origSizeSearchInputFunc,\n                        matchEl,\n                        windowResizeTimeout;\n\n                    function sizeMatchItems() {\n                        //The main logic flow for this function was taken from the ui-select's \"sizeSearchInput()\" function.\n                        //Some things are done below in order to give the tags time to render before we try to fix any\n                        //text overflow issues that may be present.\n\n                        function updateIfVisible(containerOffsetWidth) {\n                            var visible = (containerOffsetWidth > 0);\n\n                            if (visible) {\n                                //Get the container width minus any padding\n                                containerOffsetWidth -= containerOffsetWidth - angular.element(selectContainerEl).width();\n\n                                //For each match item, set the properly width so that text overflows properly\n                                matchEl.find('.ui-select-match-item').css({\n                                    overflow: 'hidden',\n                                    textOverflow: 'ellipsis',\n                                    maxWidth: containerOffsetWidth\n                                });\n                            }\n\n                            return visible;\n                        }\n\n                        $timeout(function () { //Give tags time to render correctly\n                            updateIfVisible(selectContainerEl.offsetWidth);\n                        });\n                    }\n\n                    if ($select.multiple) {\n                        matchEl = element;\n                        selectContainerEl = matchEl.parent().parent()[0];\n                        origSizeSearchInputFunc = $select.sizeSearchInput;\n\n                        //Hook into the ui-select function that controls resizing for multi search\n                        $select.sizeSearchInput = function () {\n                            origSizeSearchInputFunc();\n                            sizeMatchItems();\n                        };\n\n                        //Resize any tags on load\n                        sizeMatchItems();\n\n                        $(window).on('resize.searchField' + scope.$id, function () {\n                            $timeout.cancel(windowResizeTimeout);\n\n                            windowResizeTimeout = $timeout(function () {\n                                sizeMatchItems();\n                            }, 250);\n                        });\n\n                        scope.$on('$destroy', function () {\n                            $(window).off('resize.searchField' + scope.$id);\n                        });\n                    }\n                }\n            };\n        }])\n        .directive('uiSelectChoices', ['$templateCache', 'bbResources', function ($templateCache, bbResources) {\n            return {\n                restrict: 'EA',\n                replace: false,\n                require: '^uiSelect',\n                link: function (scope, element, attrs, $select) {\n                    var searching,\n                        selectContainerEl,\n                        msgEl;\n\n                    function updateUIForSearch(showSearchingMsg) {\n                        var msg;\n\n                        // Remove the no results message if it's currently displayed\n                        if (msgEl) {\n                            msgEl.remove();\n                            msgEl = null;\n                        }\n\n                        if (searching && $select.items.length === 0) {\n                            // Display the \"Searching...\" or \"No results...\" message - only when we have empty results because we\n                            //don't want the message to popup over a list of results as the user types.\n                            msg = showSearchingMsg ? bbResources.searchfield_searching : bbResources.searchfield_no_records;\n\n                            msgEl = angular.element($templateCache.get('sky/templates/searchfield/choices.html'));\n                            msgEl.find('.bb-searchfield-no-records').text(msg);\n\n                            selectContainerEl.append(msgEl);\n                        }\n                    }\n\n                    function clearResults() {\n                        searching = false;\n                        $select.items = []; // Clear out current result set\n                        updateUIForSearch();\n                    }\n\n                    //Remote Searches Only\n                    //If the refresh attribute is set the control is being used as a remote search\n                    if (attrs.refresh) {\n                        selectContainerEl = angular.element(element).parent();\n                        searching = false;\n\n                        //Watch when the search field is opened/closed so that we can update the UI and remove\n                        //the no results message, and remove the results for the next search.\n                        scope.$watch('$select.open', function () {\n                            clearResults();\n                        });\n\n                        //Watch the search results collection for any changes.\n                        //NOTE: This does NOT fire when the collection is empty and the search result\n                        //comes back empty.  To handle that case, see the \"bbSearchFinished\" event below.\n                        scope.$watchCollection('$select.items', function () {\n                            updateUIForSearch();\n                        });\n\n                        //This event should be fired by the consuming code after it gets and stores the results\n                        //from the remote server.  This allows us to handle the problem above where $watchCollection\n                        //doesn't fire when the collection is empty and the results also come back empty.\n                        scope.$on(\"bbSearchFinished\", function () {\n                            updateUIForSearch();\n                        });\n\n                        //Watch all changes to the search text that the user is typing.\n                        scope.$watch('$select.search', function (search) {\n                            searching = (search && search.length > 0);\n\n                            if (searching) {\n                                //Initially shows the \"Searching...\" message until results come back from the remote server\n                                updateUIForSearch(true);\n                            } else {\n                                clearResults();\n                            }\n                        });\n                    }\n                }\n            };\n        }]);\n}(jQuery));\n","/*jslint nomen: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var tabScrollId = 0;\n    angular.module('sky.tabscroll', ['ui.bootstrap.tabs'])\n        .directive('bbTabScroll', ['$timeout', '$window', function ($timeout, $window) {\n            return {\n                link: function (scope, el, attrs) {\n                    var lastWindowResizeTimeout,\n                        lastWindowWidth;\n\n                    function getNavTabsEl() {\n                        return el.children('.nav-tabs');\n                    }\n\n                    function getScrollLeftForEl(navTabsEl, selector) {\n                        var elWidth,\n                            scrollLeft,\n                            tabEl,\n                            tabLeft,\n                            tabPosition,\n                            tabRight;\n\n                        if (angular.isString(selector)) {\n                            tabEl = navTabsEl.children(selector);\n                        } else {\n                            tabEl = selector;\n                        }\n\n                        tabPosition = tabEl.position();\n\n                        if (tabPosition) {\n                            tabLeft = tabPosition.left;\n\n                            if (tabLeft < 0) {\n                                scrollLeft = tabLeft + navTabsEl[0].scrollLeft;\n                            } else {\n                                elWidth = el.width();\n                                tabRight = tabLeft + tabEl.width();\n\n                                if (tabRight > elWidth) {\n                                    scrollLeft = navTabsEl[0].scrollLeft + (tabRight - elWidth);\n                                }\n                            }\n                        }\n\n                        return scrollLeft;\n                    }\n\n                    function getScrollLeft(navTabsEl) {\n                        return getScrollLeftForEl(navTabsEl, '.active') || 0;\n                    }\n\n                    function stopAnimateTabScroll(navTabsEl) {\n                        navTabsEl.stop(true, true);\n                    }\n\n                    function animateTabScroll(navTabsEl, scrollLeft, duration) {\n                        stopAnimateTabScroll(navTabsEl);\n\n                        navTabsEl\n                            .animate(\n                                {\n                                    scrollLeft: scrollLeft\n                                },\n                                {\n                                    duration: duration || 500\n                                }\n                            );\n                    }\n\n                    function showTabsCanScroll(force) {\n                        var hasOverflow,\n                            navTabsEl = getNavTabsEl(),\n                            overflowOccurred,\n                            scrollLeft;\n\n                        /*istanbul ignore else: sanity check */\n                        if (navTabsEl.length > 0) {\n                            hasOverflow = angular.isDefined(getScrollLeftForEl(navTabsEl, 'li:first')) ||\n                                angular.isDefined(getScrollLeftForEl(navTabsEl, 'li:last'));\n\n                            force = force || angular.isDefined(getScrollLeftForEl(navTabsEl, '.active'));\n\n                            overflowOccurred = !showTabsCanScroll.previousHadOverflow && hasOverflow;\n\n                            if (force || overflowOccurred) {\n                                scrollLeft = getScrollLeft(navTabsEl);\n\n                                stopAnimateTabScroll(navTabsEl);\n\n                                if (overflowOccurred) {\n                                    navTabsEl.scrollLeft(navTabsEl[0].scrollWidth - el.width());\n                                }\n\n                                animateTabScroll(navTabsEl, scrollLeft);\n                            }\n                        }\n\n                        showTabsCanScroll.previousHadOverflow = hasOverflow;\n                    }\n\n                    tabScrollId++;\n\n                    el.addClass('bb-tab-scroll');\n\n                    if (attrs.bbTabScrollReady) {\n                        scope.$watch(attrs.bbTabScrollReady, function (newValue, oldValue) {\n                            if (newValue && newValue !== oldValue) {\n                                showTabsCanScroll(true);\n                            }\n                        });\n                    }\n\n                    lastWindowWidth = $($window).width();\n\n                    // Show initial scroll animation whenever the window width changes.\n                    $($window).on('resize.tabscroll' + tabScrollId, function () {\n                        var windowWidth = $($window).width();\n\n                        if (lastWindowWidth !== windowWidth) {\n                            $timeout.cancel(lastWindowResizeTimeout);\n\n                            lastWindowResizeTimeout = $timeout(function () {\n                                showTabsCanScroll();\n                            }, 250);\n                        }\n\n                        lastWindowWidth = windowWidth;\n                    });\n\n                    // Ensure that when a tab is clicked the tab is fully visible and not partially\n                    // scrolled off either side.\n                    el.on('click', '> .nav-tabs > li', function () {\n                        var navTabsEl,\n                            scrollLeft;\n\n                        navTabsEl = getNavTabsEl();\n                        scrollLeft = getScrollLeftForEl(navTabsEl, $(this));\n\n                        if (angular.isDefined(scrollLeft)) {\n                            animateTabScroll(navTabsEl, scrollLeft, 250);\n                        }\n                    });\n\n                    el.on('$destroy', function () {\n                        $($window).off('.tabscroll' + tabScrollId);\n                    });\n                }\n            };\n        }]);\n}(jQuery));\n","/*jslint nomen: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var DROPDOWN_CARET_WIDTH = 45,\n        TAB_PADDING = 15;\n\n    function getTemplate($templateCache, name) {\n        return $templateCache.get('sky/templates/tabset/' + name + '.html');\n    }\n\n    function tabset($compile, $templateCache) {\n        return {\n            link: function ($scope, el, attr) {\n                var ulEl,\n                    liEl;\n\n                if (angular.isDefined(attr.bbTabsetAdd) || angular.isDefined(attr.bbTabsetOpen)) {\n                    ulEl = el.find('ul');\n                    liEl = angular.element(getTemplate($templateCache, 'tabbutton'));\n                    ulEl.append(liEl);\n\n                    if (angular.isDefined(attr.bbTabsetAdd)) {\n                        liEl.append($compile(getTemplate($templateCache, 'addbutton'))($scope));\n\n                        $scope.bbTabAdd = function () {\n                            $scope.$eval(attr.bbTabsetAdd);\n                        };\n                    }\n\n                    if (angular.isDefined(attr.bbTabsetOpen)) {\n                        liEl.append($compile(getTemplate($templateCache, 'openbutton'))($scope));\n\n                        $scope.bbTabOpen = function () {\n                            $scope.$eval(attr.bbTabsetOpen);\n                        };\n                    }\n                }\n            }\n        };\n    }\n\n    tabset.$inject = ['$compile', '$templateCache'];\n\n    function BBTabsetCollapsibleController($scope) {\n        var self = this;\n\n        self.updateCollapsibleHeader = function (header) {\n            $scope.bbTabsetOptions.selectedTabHeader = header;\n        };\n\n        self.tabAdded = function () {\n            if (!$scope.bbTabsetOptions) {\n                $scope.bbTabsetOptions = {\n                    isSmallScreen: false,\n                    tabCount: 0\n                };\n            }\n\n            if ($scope.bbTabsetOptions.isSmallScreen) {\n                $scope.setupCollapsibleTabs($scope.bbTabsetOptions.isSmallScreen && $scope.bbTabsetOptions.tabCount > 1);\n            }\n            $scope.bbTabsetOptions.tabCount++;\n        };\n\n        self.tabRemoved = function () {\n            $scope.bbTabsetOptions.tabCount--;\n        };\n\n    }\n\n    BBTabsetCollapsibleController.$inject = ['$scope'];\n\n    function bbTabsetCollapsible($compile, $templateCache, $window, bbMediaBreakpoints) {\n        return {\n            restrict: 'A',\n            controller: BBTabsetCollapsibleController,\n            link: function ($scope, el) {\n                var lastWindowWidth,\n                    tabCollapseId = $scope.$id;\n\n\n                function getBootstrapTabs() {\n                    return el.find('li:not(.bb-tab-button):not(.bb-tabset-dropdown)');\n                }\n\n                function getDropdownEl() {\n                    return angular.element(getTemplate($templateCache, 'dropdown'));\n                }\n\n                function setTabMaxWidth() {\n                    //later this will resize tabs to fit the window\n                    el.find('ul.nav-tabs li a').css('max-width', '');\n                }\n\n                function setDropdownMaxWidth() {\n                    var availableWidth,\n                        addOpenWidth = 0,\n                        addOpenButtonEl,\n                        i,\n                        dropdownTextMaxWidth;\n\n                    availableWidth = el.width();\n\n                    addOpenButtonEl = el.find('.bb-tab-button-wrap');\n\n                    for (i = 0; i < addOpenButtonEl.length; i++) {\n                        addOpenWidth += addOpenButtonEl.eq(i).width();\n                    }\n\n                    dropdownTextMaxWidth = availableWidth - addOpenWidth - DROPDOWN_CARET_WIDTH - TAB_PADDING;\n\n                    el.find('.bb-tab-header-text').css('max-width', (dropdownTextMaxWidth.toString() + 'px'));\n\n                    el.find('.bb-tabset-dropdown ul.dropdown-menu li a').css('max-width', (availableWidth.toString() + 'px'));\n\n                }\n\n                function setupCollapsibleTabs(isCollapsed) {\n                    var tabsEl,\n                        dropdownContainerEl,\n                        ulEl,\n                        dropdownButtonsEl;\n\n                    tabsEl = getBootstrapTabs();\n                    dropdownButtonsEl = el.find('.bb-tab-button-wrap');\n\n                    ulEl = el.find('ul:not(.bb-tabset-dropdown)');\n                    if (isCollapsed) {\n                        dropdownContainerEl = el.find('.bb-tabset-dropdown');\n\n                        ulEl.addClass('dropdown-menu');\n                        ulEl.removeClass('nav');\n                        ulEl.removeClass('nav-tabs');\n                        dropdownContainerEl.append(ulEl);\n                        dropdownContainerEl.append(dropdownButtonsEl);\n                        setDropdownMaxWidth();\n                    } else {\n                        ulEl.removeClass('dropdown-menu');\n                        ulEl.addClass('nav');\n                        ulEl.addClass('nav-tabs');\n\n                        el.prepend(ulEl);\n\n                        ulEl.find('.bb-tab-button').append(dropdownButtonsEl);\n                        setTabMaxWidth();\n                    }\n                }\n\n                $scope.setupCollapsibleTabs = setupCollapsibleTabs;\n\n                function mediaBreakpointHandler(newBreakpoints) {\n                    $scope.bbTabsetOptions.isSmallScreen = newBreakpoints.xs;\n                    setupCollapsibleTabs(newBreakpoints.xs && ($scope.bbTabsetOptions.tabCount > 1));\n                }\n                if (!$scope.bbTabsetOptions) {\n                    $scope.bbTabsetOptions = {\n                        isSmallScreen: false,\n                        tabCount: 0\n                    };\n                }\n\n                el.prepend($compile(getDropdownEl())($scope));\n\n                $scope.$watch('bbTabsetOptions.tabCount', function (newValue) {\n                    if ($scope.bbTabsetOptions.isSmallScreen) {\n                        if (newValue && newValue > 1) {\n                            setupCollapsibleTabs(true);\n                        } else {\n                            setupCollapsibleTabs(false);\n                        }\n                    }\n\n                });\n\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                // Show initial scroll animation whenever the window width changes.\n                $($window).on('resize.tabcollapse' + tabCollapseId, function () {\n                    var windowWidth = $($window).width();\n\n                    if (lastWindowWidth !== windowWidth && $scope.bbTabsetOptions.isSmallScreen && $scope.bbTabsetOptions.tabCount > 1) {\n                        setDropdownMaxWidth();\n                    }\n\n                    lastWindowWidth = windowWidth;\n                });\n\n                $scope.$on('$destroy', function () {\n                    bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                    $($window).off('.tabcollapse' + tabCollapseId);\n                });\n            }\n        };\n    }\n\n    bbTabsetCollapsible.$inject = ['$compile', '$templateCache', '$window', 'bbMediaBreakpoints'];\n\n    function collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading) {\n        //get ui-bootstrap tab scope\n        var tabScope = el.isolateScope();\n        $scope.$watch(function () {\n            return tabScope.active;\n        }, function (active) {\n            if (active) {\n                bbTabsetCollapsibleCtrl.updateCollapsibleHeader(getTabHeading());\n            }\n        });\n\n        $scope.$watch(function () {\n            return getTabHeading();\n        }, function (collapseTitle) {\n            if (tabScope.active) {\n                bbTabsetCollapsibleCtrl.updateCollapsibleHeader(collapseTitle);\n            }\n        });\n\n        bbTabsetCollapsibleCtrl.tabAdded();\n\n        $scope.$on('$destroy', function () {\n            bbTabsetCollapsibleCtrl.tabRemoved();\n        });\n    }\n\n    function bbTabCollapseHeader() {\n        return {\n            require: '^bbTabsetCollapsible',\n            link: function ($scope, el, attr, bbTabsetCollapsibleCtrl) {\n                function getTabHeading() {\n                    return $scope.$eval(attr.bbTabCollapseHeader);\n                }\n\n                collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading);\n            }\n        };\n    }\n\n    function tab() {\n        return {\n            require: '?^bbTabsetCollapsible',\n            link: function ($scope, el, attr, bbTabsetCollapsibleCtrl) {\n                var tabScope = el.isolateScope();\n\n                function getTabHeading() {\n                    return tabScope.heading;\n                }\n\n                if (bbTabsetCollapsibleCtrl !== null && !angular.isDefined(attr.bbTabCollapseHeader)) {\n                    collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading);\n                }\n            }\n        };\n    }\n\n    angular.module('sky.tabset', ['ui.bootstrap.tabs', 'sky.mediabreakpoints'])\n        .directive('uibTabset', tabset)\n        .directive('tabset', tabset)\n        .directive('bbTabsetCollapsible', bbTabsetCollapsible)\n        .directive('bbTabCollapseHeader', bbTabCollapseHeader)\n        .directive('tab', tab)\n        .directive('uibTab', tab);\n\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.tabsref', ['ui.bootstrap.tabs'])\n        .directive('bbTabSref', ['$rootScope', '$state', '$timeout', function ($rootScope, $state, $timeout) {\n            return {\n                require: ['^?tabset', '^?uibTabset'],\n                link: function (scope, el, attrs, controllers) {\n                    var active = attrs.active,\n                        sref = attrs.bbTabSref,\n                        stateChangeDeregistration,\n                        tabsetCtrl;\n\n                    tabsetCtrl = controllers[0] !== null ? controllers[0] : controllers[1];\n\n\n                    function checkCurrentState() {\n                        if ($state.is(sref)) {\n                            tabsetCtrl.select(el.isolateScope());\n                        }\n                    }\n\n                    /*istanbul ignore else sanity check */\n                    if (active && sref) {\n                        checkCurrentState();\n\n                        stateChangeDeregistration = $rootScope.$on('$stateChangeSuccess', function () {\n                            checkCurrentState();\n                        });\n\n                        scope.$watch(active, function (newValue) {\n                            if (newValue && !$state.is(sref)) {\n                                // JPB - Delay calling state.go because the state change will fail\n                                // if it is triggered while in the middle of processing of another state change.\n                                // This can happen if you browse to the page without specifying the state of a particular tab\n                                // and then this code tries to switch you over to the state of the first tab.\n                                $timeout(function () {\n                                    $state.go(sref);\n                                });\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            stateChangeDeregistration();\n                        });\n                    }\n                }\n            };\n        }]);\n}());\n","/*jslint nomen: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var BB_TEMPLATE_RESULT = 'bb-template-result';\n\n    function createItemClassName(index) {\n        return 'bb-template-item-' + index;\n    }\n\n    function insertTemplateItems(templateEl, items) {\n        var i,\n            n;\n\n        // Move each item into the template element.\n        for (i = 0, n = items.length; i < n; i++) {\n            items[i].appendTo(templateEl.find('.' + createItemClassName(i)));\n        }\n    }\n\n    angular.module('sky.templating', ['sky.format'])\n        .directive('bbTemplate', ['bbFormat', function (bbFormat) {\n            function createTemplateHtml(template) {\n                // The template string itself should not contain HTML, so be sure to escape it to avoid HTML injection.\n                template = bbFormat.escape(template);\n\n                // Replace {0}, {1}, etc. with span elements that will serve as placeholders for the item elements.\n                return template.replace(/\\{(\\d+)\\}/g, function (match, number) {\n                    /*jslint unparam: true */\n                    return '<span class=\"' + createItemClassName(number) + '\"></span>';\n                });\n            }\n\n            return {\n                controller: ['$scope', function ($scope) {\n                    $scope.items = [];\n\n                    this.addItem = function (item) {\n                        $scope.items.push(item);\n                    };\n                }],\n                link: function (scope, el) {\n\n                    scope.$watch('template', function (newValue) {\n                        var newEl,\n                            oldEl = el.find('.' + BB_TEMPLATE_RESULT),\n                            templateHtml;\n\n                        if (angular.isDefined(newValue)) {\n                            templateHtml = createTemplateHtml(newValue);\n\n                            // Create and append a new template item, move the existing items to it, then\n                            // destroy the old items.  Doing it in this order should ensure any elements\n                            // with bindings remain bound after being moved.\n                            newEl = angular.element('<span class=\"' + BB_TEMPLATE_RESULT + '\">' + templateHtml + '</span>')\n                                .appendTo(el);\n\n                            insertTemplateItems(newEl, scope.items);\n\n                            // Remove old elements if they exist.\n                            oldEl.remove();\n                        }\n                    });\n                },\n                scope: {\n                    template: '=bbTemplate'\n                },\n                restrict: 'A'\n            };\n        }])\n        .directive('bbTemplateItem', function () {\n            return {\n                link: function (scope, el, attr, bbFormatCtrl) {\n                    /*jslint unparam: true */\n                    bbFormatCtrl.addItem(el);\n                },\n                require: '^bbTemplate',\n                restrict: 'AE'\n            };\n        });\n}());\n","/*jslint plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var modules = [\n            'sky.resources',\n            'sky.scrollintoview',\n            'sky.modal'\n        ];\n\n    function getNewlineCount(value) {\n        var matches = value.match(/\\n/gi);\n\n        if (matches) {\n            return matches.length;\n        }\n\n        return 0;\n    }\n\n    function createEl($templateCache, templateName) {\n        return angular.element($templateCache.get('sky/templates/textexpand/' + templateName + '.html'));\n    }\n\n    function BBTextExpandController(textExpandContent, headerContent, closeText) {\n        var self = this;\n        self.textExpandContent = textExpandContent;\n        self.headerContent = headerContent;\n        self.closeText = closeText;\n    }\n\n    BBTextExpandController.$inject = ['textExpandContent', 'headerContent', 'closeText'];\n\n    angular.module('sky.textexpand', modules)\n        .directive('bbTextExpandRepeater', ['$templateCache', 'bbResources', function ($templateCache, bbResources) {\n            function link(scope, el, attrs) {\n                scope.$watch(attrs.bbTextExpandRepeaterData, function (data) {\n                    var length,\n                        maxToShow,\n                        seeMoreEl,\n                        seeMoreText = bbResources.text_expand_see_more,\n                        seeLessText = bbResources.text_expand_see_less;\n\n                    if (data) {\n                        length = data.length;\n                        maxToShow = +attrs.bbTextExpandRepeaterMax;\n                        seeMoreEl = createEl($templateCache, 'seemore').text(seeMoreText);\n\n                        if (length > maxToShow) {\n                            el.find('li:gt(' + (maxToShow - 1) + ')').addClass('bb-text-expand-toggle-li').hide().end().append(\n                                seeMoreEl.click(function () {\n                                    seeMoreEl.siblings('.bb-text-expand-toggle-li').toggle(100);\n                                    if (seeMoreEl.hasClass('bb-text-expand-see-more')) {\n                                        seeMoreEl.text(seeLessText);\n                                    } else {\n                                        seeMoreEl.text(seeMoreText);\n                                    }\n\n                                    seeMoreEl.toggleClass('bb-text-expand-see-more');\n\n                                    return false;\n                                })\n                            );\n                        }\n                    }\n                });\n            }\n\n            return {\n                link: link\n            };\n        }])\n        .directive('bbTextExpand', ['$templateCache', 'bbResources', 'bbScrollIntoView', 'bbModal', function ($templateCache, bbResources, bbScrollIntoView, bbModal) {\n            function link(scope, el, attrs) {\n                var isExpanded,\n                    maxLength = +attrs.bbTextExpandMaxLength || 200,\n                    maxExpandedLength = +attrs.bbTextExpandMaxExpandedLength || 600,\n                    maxNewlines = 1,\n                    maxExpandedNewlines = +attrs.bbTexExpandMaxExpandedNewlines || 3;\n\n                function getTruncatedText(value, length, newlines) {\n                    var i;\n\n                    if (newlines && getNewlineCount(value) >= newlines) {\n                        value = value.replace(/\\s+/gi, ' ');\n                    }\n\n                    // Jump ahead one character and see if it's a space, and if it isn't,\n                    // back up to the first space and break there so a word doesn't get cut\n                    // in half.\n                    for (i = length; i > length - 10; i--) {\n                        if (/\\s/.test(value.charAt(i))) {\n                            length = i;\n                            break;\n                        }\n                    }\n\n                    return value.substr(0, length);\n                }\n\n                scope.$watch(attrs.bbTextExpand, function (newValue) {\n                    var collapsedText,\n                        expandedText,\n                        containerEl,\n                        currentHeight,\n                        ellipsisEl,\n                        expandEl,\n                        newHeight,\n                        textEl,\n                        spaceEl;\n\n                    function animateText(previousText, newText, newExpandText, showEllipsis) {\n                        // Measure the current height so we can animate from it.\n                        currentHeight = containerEl.height();\n\n                        expandEl.text(newExpandText);\n                        textEl.text(newText);\n\n                        newHeight = containerEl.height();\n\n                        if (newHeight < currentHeight) {\n                            // The new text is smaller than the old text, so put the old text back before doing\n                            // the collapse animation to avoid showing a big chunk of whitespace.\n                            textEl.text(previousText);\n                        }\n\n                        ellipsisEl.text(showEllipsis ? '...' : '');\n\n                        containerEl\n                            .height(currentHeight)\n                            .animate(\n                                {\n                                    height: newHeight\n                                },\n                                250,\n                                function () {\n                                    if (newHeight < currentHeight) {\n                                        textEl.text(newText);\n                                    }\n                                    containerEl.css('height', 'auto');\n                                }\n                            );\n                    }\n\n                    containerEl = createEl($templateCache, 'container');\n\n                    /* istanbul ignore else: nothing happens when there's no value, so there's nothing to test. */\n                    if (newValue) {\n                        collapsedText = getTruncatedText(newValue, maxLength, maxNewlines);\n                        expandedText = getTruncatedText(newValue, maxExpandedLength, maxExpandedNewlines); // Get text based on max expanded length\n\n                        if (collapsedText !== newValue) {\n                            isExpanded = true;\n\n                            textEl = createEl($templateCache, 'text').text(collapsedText);\n                            ellipsisEl = createEl($templateCache, 'ellipsis');\n                            spaceEl = createEl($templateCache, 'space');\n                            expandEl = createEl($templateCache, 'seemore').text(bbResources.text_expand_see_more);\n\n\n                            containerEl\n                                .empty()\n                                .append(textEl)\n                                .append(ellipsisEl)\n                                .append(spaceEl)\n                                .append(expandEl);\n\n                            if (getNewlineCount(newValue) >= maxExpandedNewlines || newValue.length > maxExpandedLength) {\n                                expandEl.on('click', function () {\n                                    bbModal.open({\n                                        templateUrl: 'sky/templates/textexpand/expandmodal.html',\n                                        controller: BBTextExpandController,\n                                        controllerAs: 'expandCtrl',\n                                        resolve: {\n                                            textExpandContent: function () {\n                                                return newValue;\n                                            },\n                                            headerContent: function () {\n                                                return scope.$eval(attrs.bbTextExpandModalTitle) || bbResources.text_expand_modal_title;\n                                            },\n                                            closeText: function () {\n                                                return bbResources.text_expand_close_text;\n                                            }\n                                        }\n                                    });\n                                });\n\n                            } else {\n                                expandEl.on('click', function () {\n                                    if (isExpanded) {\n                                        animateText(collapsedText, expandedText, bbResources.text_expand_see_less, (expandedText !== newValue));\n                                    } else {\n                                        animateText(expandedText, collapsedText, bbResources.text_expand_see_more, true);\n                                    }\n\n                                    bbScrollIntoView(expandEl);\n                                    isExpanded = !isExpanded;\n\n                                    return false;\n                                });\n                            }\n\n\n                        } else {\n                            containerEl.text(newValue);\n                        }\n                    }\n\n                    el.empty().append(containerEl);\n\n                    /* istanbul ignore next: these internal variables can't be tested. */\n                    el.on('$destroy', function () {\n                        containerEl = null;\n                        expandEl = null;\n                        textEl = null;\n                        spaceEl = null;\n                    });\n                });\n            }\n\n            return {\n                link: link\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    //Removes the specified tiles from the source container and appends them\n    //in the specified order to the target container.\n    function moveTilesToContainer(sourceContainer, targetContainer, tiles) {\n        angular.forEach(tiles, function (tileId) {\n            var tile = sourceContainer.find('[data-tile-id=\"' + tileId + '\"]');\n            targetContainer.append(tile);\n        });\n    }\n\n    //Returns an array of tile names in the order they appear in the specified container.\n    function parseTileOrder(container) {\n        var tiles = [];\n        container.find('[data-tile-id]').each(function () {\n            tiles.push(angular.element(this).data('tile-id'));\n        });\n        return tiles;\n    }\n\n    angular.module('sky.tiles', ['sky.mediabreakpoints'])\n        .directive('bbTile', ['$timeout', function ($timeout) {\n            return {\n                link: function (scope, el, attrs, dashboardCtrl) {\n                    var dashboardState = {},\n                        displayModeChanging = false,\n                        tileInitialized = false;\n\n                    //determines whether or not a tile is collapsed\n                    function tileIsCollapsed(tileId, tiles) {\n                        var i,\n                            len = tiles.length,\n                            tile;\n\n                        for (i = 0; i < len; i++) {\n                            tile = tiles[i];\n\n                            if (tile.id === tileId) {\n                                return scope.smallTileDisplayMode ? tile.collapsed_small : tile.collapsed;\n                            }\n                        }\n\n                        return !!scope.smallTileDisplayMode;\n                    }\n\n                    //sets the collapsed state of the tile based on the tile settings and the display mode\n                    function updateTileState(tiles) {\n                        var collapsed,\n                            oldCollapsed;\n\n                        tiles = tiles || /*istanbul ignore next: default value */ [];\n\n                        oldCollapsed = scope.isCollapsed;\n\n                        collapsed = tileIsCollapsed(scope.tileId, tiles);\n\n                        if (oldCollapsed === collapsed) {\n                            displayModeChanging = false;\n                        }\n\n                        scope.isCollapsed = collapsed;\n\n                        if (collapsed && !tileInitialized) {\n                            //in some cases the tile-content div is left in a partially collapsed state.\n                            //   this will ensure that the tile is styled corretly and the tile is completely collapsed\n                            $timeout(function () {\n                                var contentEl;\n                                contentEl = el.find('.bb-tile-content');\n                                contentEl.removeClass('collapsing').addClass('collapse');\n                            }, 1);\n                        }\n                    }\n\n                    function updateHeaderContent() {\n                        var wrapperEl;\n\n                        scope.hasHeaderContent = !!scope.headerContentEl;\n\n                        if (scope.headerContentEl) {\n                            wrapperEl = el.find('.bb-tile-header-with-content:first');\n\n                            wrapperEl.append(scope.headerContentEl);\n                        }\n                    }\n\n                    function initializeTile(data) {\n                        $timeout(function () {\n                            var tiles = data.tiles || /*istanbul ignore next: default value */ [];\n\n                            if (!tileInitialized) {\n                                //retrieve the tile id from the parent container\n                                scope.tileId = el.parent().attr('data-tile-id') || /*istanbul ignore next: default value */ '';\n                                scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\n                            }\n\n                            updateTileState(tiles);\n\n                            tileInitialized = true;\n                        });\n                    }\n\n                    scope.isCollapsed = scope.bbTileCollapsed || false;\n                    scope.smallTileDisplayMode = false;\n                    scope.tileId = '';\n\n                    scope.titleClick = function () {\n                        scope.isCollapsed = !scope.isCollapsed;\n                        scope.scrollIntoView = !scope.isCollapsed;\n                    };\n\n                    //listens for the tileModeChanged event from the tileDashboard and updates the collapsed state of the tiles based on whether or not the tiles are in small display mode\n                    scope.$on('tileDisplayModeChanged', function (event, data) {\n                        /*jslint unparam: true */\n                        scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\n\n                        if (tileInitialized) {\n                            displayModeChanging = true;\n                            updateTileState(data.tiles);\n                        }\n                    });\n\n                    //listens for the tilesInitialized event from the tileDashboard and updates the initial collapsed state of the tiles\n                    scope.$on('tilesInitialized', function (event, data) {\n                        /*jslint unparam: true */\n\n                        initializeTile(data);\n                    });\n\n                    //if the collapsed state changes, notify the tileDashboard\n                    scope.$watch('isCollapsed', function () {\n                        if (tileInitialized && !displayModeChanging) {\n                            $timeout(function () {\n                                scope.$emit('tileStateChanged', {\n                                    tileId: scope.tileId,\n                                    collapsed: scope.isCollapsed\n                                });\n                            });\n                        }\n                        displayModeChanging = false;\n\n                        if (!scope.isCollapsed) {\n                            $timeout(function () {\n                                scope.$broadcast('tileRepaint');\n                            });\n                        }\n\n                        scope.bbTileCollapsed = scope.isCollapsed;\n                    });\n\n                    if (attrs.bbTileCollapsed) {\n                        scope.$watch('bbTileCollapsed', function (newValue) {\n                            scope.isCollapsed = newValue;\n                        });\n                    }\n\n                    scope.hasSettings = !!attrs.bbTileSettingsClick;\n\n                    updateHeaderContent();\n\n                    //If the dashboard has already been initialized and this tile hasn't, initialize tile.\n                    if (dashboardCtrl !== null) {\n                        if (dashboardCtrl.dashboardInitialized() && !tileInitialized) {\n                            dashboardState = dashboardCtrl.getDashboardState();\n                            initializeTile(dashboardState);\n                            dashboardCtrl.layoutTiles();\n                        }\n                    }\n                },\n                replace: true,\n                restrict: 'E',\n                require: '?^^bbTileDashboard',\n                scope: {\n                    bbTileCollapsed: '=?',\n                    bbTileSettingsClick: '&?',\n                    tileHeader: '=bbTileHeader'\n                },\n                controller: ['$scope', function ($scope) {\n                    this.setHeaderContentEl = function (el) {\n                        $scope.headerContentEl = el;\n                    };\n                }],\n                templateUrl: 'sky/templates/tiles/tile.html',\n                transclude: true\n            };\n        }])\n        .directive('bbTileHeaderContent', function () {\n            return {\n                replace: true,\n                require: '^bbTile',\n                restrict: 'E',\n                link: function (scope, el, attrs, tileCtrl) {\n                    tileCtrl.setHeaderContentEl(el);\n                },\n                templateUrl: 'sky/templates/tiles/tileheadercontent.html',\n                transclude: true\n            };\n        })\n        .directive('bbTileHeaderCheck', function () {\n            return {\n                replace: true,\n                require: '^bbTileHeaderContent',\n                restrict: 'E',\n                templateUrl: 'sky/templates/tiles/tileheadercheck.html'\n            };\n        })\n        .directive('bbTileSection', function () {\n            return {\n                restrict: 'A',\n                template: function (el) {\n                    el.addClass('bb-tile-content-section');\n                }\n            };\n        })\n        .directive('bbTileDashboard', ['$timeout', 'bbMediaBreakpoints', function ($timeout, bbMediaBreakpoints) {\n            return {\n                replace: true,\n                restrict: 'E',\n                scope: {\n                    tiles: '=bbTiles',\n                    layout: '=bbLayout',\n                    allCollapsed: '=bbTileDashboardAllCollapsed'\n                },\n                link: function (scope, element, attrs) {\n                    var column1 = element.find('[data-dashboard-column=\"1\"]'),\n                        column2 = element.find('[data-dashboard-column=\"2\"]'),\n                        singleColumnMode = false,\n                        sortableOptions;\n\n                    scope.dashboardInitialized = false;\n                    scope.smallTileDisplayMode = false;\n\n                    //Inspects the tiles in each column and updates model accordingly.\n                    function parseColumnTiles() {\n                        scope.$apply(function () {\n                            var layout = scope.layout;\n\n                            if (singleColumnMode) {\n                                layout.one_column_layout = parseTileOrder(column1);\n                            } else {\n                                layout.two_column_layout[0] = parseTileOrder(column1);\n                                layout.two_column_layout[1] = parseTileOrder(column2);\n                            }\n                        });\n                    }\n\n                    //Layouts out the tiles based on the current one column or two column configuration\n                    function layoutTiles() {\n                        var layout = scope.layout;\n\n                        if (layout) {\n                            if (singleColumnMode) {\n                                moveTilesToContainer(element, column1, layout.one_column_layout);\n                            } else {\n                                moveTilesToContainer(element, column1, layout.two_column_layout[0]);\n                                moveTilesToContainer(element, column2, layout.two_column_layout[1]);\n                            }\n                        }\n                    }\n\n                    function fireDisplayModeChanged() {\n                        scope.$broadcast('tileDisplayModeChanged', {\n                            smallTileDisplayMode: scope.smallTileDisplayMode,\n                            tiles: scope.tiles\n                        });\n                    }\n\n                    function mediabreakpointChangeHandler(breakPoints) {\n                        singleColumnMode = (breakPoints.xs || breakPoints.sm);\n                        layoutTiles();\n\n                        if (singleColumnMode) {\n                            element.removeClass('bb-page-content-multicolumn');\n                            column2.hide();\n                        } else {\n                            element.addClass('bb-page-content-multicolumn');\n                            column2.show();\n                        }\n\n                        scope.smallTileDisplayMode = breakPoints.xs;\n\n                        fireDisplayModeChanged();\n                    }\n\n                    //Setup jQuery sortable (drag and drop) options for the dashboard columns\n                    sortableOptions = {\n                        connectWith: '[data-dashboard-column]',\n                        update: parseColumnTiles,\n                        opacity: 0.8,\n                        handle: '.bb-tile-grab-handle',\n                        placeholder: 'placeholder bb-tile',\n                        forcePlaceholderSize: true,\n                        revert: 250\n                    };\n\n                    //Setup jQuery sortable drag/drop for the columns\n                    column1.sortable(sortableOptions);\n                    column2.sortable(sortableOptions);\n\n                    bbMediaBreakpoints.register(mediabreakpointChangeHandler);\n\n                    scope.layoutTiles = layoutTiles;\n\n                    element.on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediabreakpointChangeHandler);\n                    });\n\n                    scope.$watch('tiles', function () {\n                        $timeout(function () {\n                            layoutTiles();\n                            scope.$broadcast('tilesInitialized', {\n                                smallTileDisplayMode: scope.smallTileDisplayMode,\n                                tiles: scope.tiles\n                            });\n\n                            scope.dashboardInitialized = true;\n                        });\n                    });\n\n                    scope.$watch('allCollapsed', function (newValue) {\n                        var i,\n                            n,\n                            tiles = scope.tiles;\n\n                        // Check for an explicit true/false here since null/undefined is the\n                        // indeterminate state.\n                        if (newValue === true || newValue === false) {\n                            for (i = 0, n = tiles.length; i < n; i++) {\n                                if (scope.smallTileDisplayMode) {\n                                    tiles[i].collapsed_small = newValue;\n                                } else {\n                                    tiles[i].collapsed = newValue;\n                                }\n                            }\n\n                            fireDisplayModeChanged();\n                        }\n                    });\n\n                    scope.$on('tileStateChanged', function (event, data) {\n                        /*jslint unparam: true */\n                        scope.$apply(function () {\n                            var allCollapsed = null,\n                                collapsed,\n                                collapsedProp,\n                                i,\n                                n,\n                                tile,\n                                tileId = data.tileId || /*istanbul ignore next: default value */ '',\n                                tiles = scope.tiles;\n\n                            collapsed = data.collapsed || false;\n                            collapsedProp = scope.smallTileDisplayMode ? 'collapsed_small' : 'collapsed';\n\n                            for (i = 0, n = tiles.length; i < n; i++) {\n                                tile = tiles[i];\n\n                                if (tile.id === tileId) {\n                                    tile[collapsedProp] = collapsed;\n                                }\n\n                                if (i > 0 && tile[collapsedProp] !== allCollapsed) {\n                                    allCollapsed = null;\n                                } else {\n                                    allCollapsed = tile[collapsedProp];\n                                }\n                            }\n\n                            if (attrs.bbTileDashboardAllCollapsed) {\n                                scope.allCollapsed = allCollapsed;\n                            }\n                        });\n                    });\n                },\n                controller: ['$scope', function ($scope) {\n                    var self = this;\n\n                    self.getDashboardState = function () {\n                        return {tiles: $scope.tiles, smallTileDisplayMode: $scope.smallTileDisplayMode};\n                    };\n\n                    self.dashboardInitialized = function () {\n                        return $scope.dashboardInitialized;\n                    };\n\n                    self.layoutTiles = function () {\n                        /* This timeout is in place to allow a state change to\n                           complete before laying out tiles\n                        */\n                        $timeout(function () {\n                            $scope.layoutTiles();\n                        });\n                    };\n                }],\n                templateUrl: 'sky/templates/tiles/tiledashboard.html'\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    function nextId() {\n        nextId.index = nextId.index || 0;\n        nextId.index++;\n        return 'bbtoast-' + nextId.index;\n    }\n\n    function validateOptions(opts) {\n        if (opts.message && opts.templateUrl) {\n            throw 'You must not provide both a message and a templateUrl.';\n        } else if (!opts.message && !opts.templateUrl) {\n            throw 'You must provide either a message or a templateUrl.';\n        }\n    }\n\n    angular.module('sky.toast', ['toastr'])\n        .config(['toastrConfig', function (toastrConfig) {\n            angular.extend(toastrConfig, {\n                closeButton: true,\n                newestOnTop: true,\n                positionClass: 'toast-bottom-right',\n                tapToDismiss: false,\n                timeOut: 6000\n            });\n        }])\n        .factory('bbToast', ['toastr', '$templateCache', '$compile', '$controller', '$rootScope', '$q', '$injector', function (toastr, $templateCache, $compile, $controller, $rootScope, $q, $injector) {\n            //Based on $modal approach to resolves\n            function getResolvePromises(resolves) {\n                var promisesArr = [];\n                angular.forEach(resolves, function (value) {\n                    if (angular.isFunction(value) || angular.isArray(value)) {\n                        promisesArr.push($q.when($injector.invoke(value)));\n                    }\n                });\n                return promisesArr;\n            }\n\n            function open(message, config) {\n                config = config || {};\n                config.iconClass = 'bb-toast';\n                return toastr.info(message, '', config);\n            }\n\n            function openMessage(opts) {\n                return open(opts.message);\n            }\n\n            function openWithTemplate(opts) {\n                var controller = opts.controller,\n                    controllerLocals,\n                    elId,\n                    resolveIter = 0,\n                    resolvesPromise,\n                    templateHtml,\n                    toast,\n                    toastScope;\n\n                function insertTemplateInToast() {\n                    var templateEl = toast.el.find('#' + elId);\n\n                    templateEl.html(templateHtml);\n\n                    if (controller) {\n                        $controller(controller, controllerLocals);\n                        $compile(templateEl)(controllerLocals.$scope);\n                    }\n                }\n\n                opts.resolve = opts.resolve || {};\n\n                resolvesPromise = $q.all(getResolvePromises(opts.resolve));\n\n                resolvesPromise.then(function (resolvedVars) {\n                    if (controller) {\n                        controllerLocals = {};\n                        controllerLocals.$scope = $rootScope.$new();\n                        angular.forEach(opts.resolve, function (value, key) {\n                            controllerLocals[key] = resolvedVars[resolveIter++];\n                        });\n                    }\n\n                    templateHtml = $templateCache.get(opts.templateUrl);\n\n                    elId = nextId();\n\n                    toast = open(\"<div id='\" + elId + \"'></div>\", { allowHtml: true });\n                    toastScope = toast.scope;\n\n                    //We need to hook in after the toast element has been created and the temporary message\n                    //defined above exists, but before the toast is visually displayed.  The toastr code adds\n                    //an init function to the scope when the toast directive is being linked.  An EvalAsync\n                    //after this occurs will allow us to hook in at the correct moment.\n                    toastScope.$watch('init', function () {\n                        toastScope.$evalAsync(function () {\n                            insertTemplateInToast();\n                        });\n                    });\n                });\n            }\n\n            return {\n                open: function (opts) {\n                    opts = opts || {};\n                    validateOptions(opts);\n\n                    if (opts.templateUrl) {\n                        openWithTemplate(opts);\n                    } else {\n                        openMessage(opts);\n                    }\n                }\n            };\n        }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function bbTooltip($compile) {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function ($scope, el) {\n                //Add bootstrap directive\n                /*istanbul ignore else */\n                if (!el.attr('uib-tooltip-template')) {\n                    el.attr('uib-tooltip-template', \"'\" + el.attr('bb-tooltip') + \"'\");\n                }\n\n                el.removeAttr('bb-tooltip');\n                $compile(el)($scope);\n            }\n        };\n    }\n\n    bbTooltip.$inject = ['$compile'];\n\n    angular.module('sky.tooltip', ['ui.bootstrap.tooltip'])\n        .directive('bbTooltip', bbTooltip);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.utilities', ['sky.format'])\n        .filter('encodeURIComponent', ['$window', function ($window) {\n            return function (value) {\n                return $window.encodeURIComponent(value);\n            };\n        }])\n        .filter('format', ['bbFormat', function (bbFormat) {\n            return function () {\n                return bbFormat.formatText.apply(this, arguments);\n            };\n        }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.validation', [])\n        .directive('bbEmailValidation', [function () {\n            var EMAIL_REGEXP = /[\\w\\-]+@([\\w\\-]+\\.)+[\\w\\-]+/;\n            return {\n                require: 'ngModel',\n                restrict: '',\n                link: function (scope, elm, attrs, ctrl) {\n                    /*jslint unparam: true */\n                    if (ctrl && ctrl.$validators.email) {\n                        ctrl.$validators.email = function (modelValue) {\n                            return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\n                        };\n                    }\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var CLS_VIEWKEEPER_FIXED = 'bb-viewkeeper-fixed',\n        config = {\n            viewportMarginTop: 0\n        },\n        ViewKeeper;\n\n    function nextId() {\n        nextId.index = nextId.index || 0;\n        nextId.index++;\n        return 'viewkeeper-' + nextId.index;\n    }\n\n    function getSpacerId(vk) {\n        return vk.id + \"-spacer\";\n    }\n\n    function setElPosition(elQ, left, top, bottom, width) {\n        elQ.css({\n            \"top\": top,\n            \"bottom\": bottom,\n            \"left\": left\n        });\n\n        /*istanbul ignore else: sanity check */\n        if (width !== null) {\n            elQ.css({ \"width\": width });\n        }\n    }\n\n    function unfixEl(vk) {\n        var elQ = angular.element(vk.el),\n            width;\n\n        angular.element(\"#\" + getSpacerId(vk)).remove();\n\n        elQ.removeClass(CLS_VIEWKEEPER_FIXED);\n\n        vk.currentElFixedLeft = null;\n        vk.currentElFixedTop = null;\n        vk.currentElFixedBottom = null;\n        vk.currentElFixedWidth = null;\n\n        if (vk.setWidth) {\n            width = \"auto\";\n        }\n        setElPosition(elQ, \"\", \"\", \"\", width);\n    }\n\n    function calculateVerticalOffset(vk) {\n        var offset,\n            verticalOffSetElTop;\n\n        offset = vk.verticalOffSet;\n\n        if (vk.verticalOffSetEl) {\n            verticalOffSetElTop = vk.verticalOffSetEl.css('top');\n\n            /*istanbul ignore else: sanity check */\n            if (verticalOffSetElTop) {\n                verticalOffSetElTop = parseInt(verticalOffSetElTop, 10);\n                if (isNaN(verticalOffSetElTop)) {\n                    verticalOffSetElTop = 0;\n                }\n            }\n\n            offset += (vk.verticalOffSetEl.outerHeight() + verticalOffSetElTop);\n        }\n\n        return offset;\n    }\n\n    ViewKeeper = function (options) {\n        var id,\n            vk = this;\n\n        options = options || /* istanbul ignore next */ {};\n\n        vk.fixToBottom = options.fixToBottom;\n        vk.setWidth = options.setWidth;\n        vk.id = id = nextId();\n        vk.el = options.el;\n        vk.boundaryEl = options.boundaryEl;\n        vk.verticalOffSet = options.verticalOffSet || 0;\n        vk.setPlaceholderHeight = (options.setPlaceholderHeight !== false);\n        vk.onStateChanged = options.onStateChanged;\n        vk.isFixed = false;\n\n        if (options.verticalOffSetElId) {\n            vk.verticalOffSetEl = angular.element('#' + options.verticalOffSetElId);\n\n            vk.verticalOffSetEl.on('afterViewKeeperSync.' + id, function () {\n                vk.syncElPosition();\n            });\n        }\n\n        angular.element(window).on(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id, function () {\n            vk.syncElPosition();\n        });\n    };\n\n    ViewKeeper.prototype = {\n\n        syncElPosition: function () {\n            var anchorTop,\n                anchorHeight,\n                isCurrentlyFixed,\n                currentElFixedLeft,\n                currentElFixedTop,\n                currentElFixedBottom,\n                currentElFixedWidth,\n                documentQ,\n                fixEl,\n                boundaryBottom,\n                boundaryOffset,\n                boundaryQ,\n                boundaryTop,\n                elFixedLeft,\n                elFixedTop,\n                elFixedBottom,\n                elFixedWidth,\n                elHeight,\n                elQ,\n                needsUpdating,\n                scrollLeft,\n                scrollTop,\n                spacerHeight,\n                spacerId,\n                spacerQ,\n                verticalOffSet,\n                vk = this,\n                width;\n\n            isCurrentlyFixed = vk.isFixed;\n\n            verticalOffSet = calculateVerticalOffset(vk);\n\n            elQ = angular.element(vk.el);\n\n            // When the element isn't visible, its size can't be calculated, so don't attempt syncing position in this case.\n            if (!elQ.is(':visible')) {\n                return;\n            }\n\n            boundaryQ = angular.element(vk.boundaryEl);\n            spacerId = getSpacerId(vk);\n\n            spacerQ = angular.element(\"#\" + spacerId);\n            documentQ = angular.element(window.document);\n\n            boundaryOffset = boundaryQ.offset();\n            boundaryTop = boundaryOffset.top;\n            boundaryBottom = boundaryTop + boundaryQ.height();\n\n            scrollLeft = documentQ.scrollLeft();\n            scrollTop = documentQ.scrollTop();\n\n            elHeight = elQ.outerHeight(true);\n\n            if (vk.fixToBottom) {\n                elFixedBottom = 0;\n            } else {\n                // If the element needs to be fixed, this will calculate its position.  The position will be 0 (fully visible) unless\n                // the user is scrolling the boundary out of view.  In that case, the element should begin to scroll out of view with the\n                // rest of the boundary by setting its top position to a negative value.\n                elFixedTop = Math.min((boundaryBottom - elHeight) - scrollTop, verticalOffSet);\n            }\n\n\n            elFixedWidth = boundaryQ.width();\n            elFixedLeft = boundaryOffset.left - scrollLeft;\n\n            currentElFixedLeft = vk.currentElFixedLeft;\n            currentElFixedTop = vk.currentElFixedTop;\n            currentElFixedBottom = vk.currentElFixedBottom;\n            currentElFixedWidth = vk.currentElFixedWidth;\n\n            if (spacerQ.length > 0) {\n                anchorTop = spacerQ.offset().top;\n                anchorHeight = spacerQ.outerHeight(true);\n            } else {\n                anchorTop = elQ.offset().top;\n                anchorHeight = elHeight;\n            }\n\n            if (vk.fixToBottom) {\n                //Fix el if the natural bottom of the element would not be on the screen\n                fixEl = (anchorTop + anchorHeight > scrollTop + window.innerHeight);\n            } else {\n                fixEl = scrollTop + verticalOffSet + config.viewportMarginTop > anchorTop;\n            }\n\n            if ((fixEl && currentElFixedLeft === elFixedLeft && currentElFixedTop === elFixedTop && currentElFixedBottom === elFixedBottom && currentElFixedWidth === elFixedWidth) || (!fixEl && !(currentElFixedLeft !== undefined && currentElFixedLeft !== null))) {\n                // The element is either currently fixed and its position and width do not need to change, or the element is not\n                // currently fixed and does not need to be fixed.  No changes are needed.\n                needsUpdating = false;\n            } else {\n                needsUpdating = true;\n            }\n\n            if (needsUpdating) {\n                if (fixEl) {\n                    vk.isFixed = true;\n                    if (spacerQ.length === 0) {\n                        if (vk.setPlaceholderHeight) {\n                            spacerHeight = elHeight;\n                        } else {\n                            spacerHeight = 0;\n                        }\n                        elQ.after('<div id=\"' + spacerId + '\" style=\"height: ' + spacerHeight + 'px;\"></div>');\n                    }\n\n                    elQ.addClass(CLS_VIEWKEEPER_FIXED);\n\n                    vk.currentElFixedTop = elFixedTop;\n                    vk.currentElFixedBottom = elFixedBottom;\n                    vk.currentElFixedLeft = elFixedLeft;\n                    vk.currentElFixedWidth = elFixedWidth;\n\n                    if (vk.setWidth) {\n                        width = elFixedWidth;\n                    }\n\n                    setElPosition(elQ, elFixedLeft, elFixedTop, elFixedBottom, width);\n                } else {\n                    vk.isFixed = false;\n                    unfixEl(vk);\n                }\n\n                //If we changed if the item is fixed, fire the callback\n                if (vk.onStateChanged && isCurrentlyFixed !== vk.isFixed) {\n                    vk.onStateChanged();\n                }\n            }\n            elQ.trigger('afterViewKeeperSync');\n        },\n\n        scrollToTop: function () {\n            var anchorTop,\n                elQ,\n                documentQ,\n                spacerId,\n                spacerQ,\n                verticalOffset,\n                vk = this;\n\n            verticalOffset = calculateVerticalOffset(vk);\n\n            documentQ = angular.element(window.document);\n            spacerId = getSpacerId(vk);\n            spacerQ = angular.element(\"#\" + spacerId);\n            elQ = angular.element(vk.el);\n\n            if (spacerQ.length > 0) {\n                anchorTop = spacerQ.offset().top;\n            } else {\n                anchorTop = elQ.offset().top;\n            }\n\n            documentQ.scrollTop(anchorTop - verticalOffset - config.viewportMarginTop);\n        },\n\n        destroy: function () {\n            var id,\n                vk = this;\n\n            if (!vk.isDestroyed) {\n                id = vk.id;\n\n                angular.element(window).off(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id);\n                unfixEl(vk);\n\n                if (vk.verticalOffSetEl) {\n                    vk.verticalOffSetEl.off(\"afterViewKeeperSync.\" + vk.id);\n                    vk.verticalOffSetEl = null;\n                }\n\n                vk.isDestroyed = true;\n            }\n        }\n\n    };\n\n    angular.module('sky.viewkeeper', ['sky.mediabreakpoints', 'sky.window'])\n        .constant('bbViewKeeperConfig', config)\n        .factory('bbViewKeeperBuilder', function () {\n            return {\n                create: function (options) {\n                    return new ViewKeeper(options);\n                }\n            };\n        })\n        .run(['$document', '$window', 'bbMediaBreakpoints', 'bbViewKeeperConfig', function ($document, $window, bbMediaBreakpoints, bbViewKeeperConfig) {\n            function mediaBreakpointHandler(breakpoints) {\n                //For user agents in which the omnibar follows you down the page, the ViewKeeper needs\n                //to adjust for the height of the omnibar.\n\n                //Ideally these values should be driven from a more appropriate source (omnibar js?)\n                bbViewKeeperConfig.viewportMarginTop = breakpoints.xs ? 50 : 30;\n            }\n\n            if (/iPad|iPod|iPhone/i.test($window.navigator.userAgent)) {\n                //On iOS the omnibar doesn't scroll with you.  Need to account for this on the styling.\n                angular.element('body').addClass('omnibar-not-fixed');\n\n                //On iOS we need to have special handling when entering textboxes to correct an issue with fixed\n                //elements used by view keeper when the keyboard flys out.\n                angular.element(document).on('focus', 'input', function () {\n                    angular.element('body').addClass('bb-viewkeeper-ignore-fixed');\n                }).on('blur', 'input', function () {\n                    angular.element('body').removeClass('bb-viewkeeper-ignore-fixed');\n                });\n            } else {\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n            }\n        }])\n        .directive('bbViewKeeper', ['bbViewKeeperBuilder', function (bbViewKeeperBuilder) {\n            function link(scope, el) {\n                var vk;\n\n                function destroyVk() {\n                    if (vk) {\n                        vk.destroy();\n                        vk = null;\n                    }\n                }\n\n                el.on('$destroy', function () {\n                    destroyVk();\n                });\n\n                scope.$watch('bbBoundaryElId', function () {\n                    var boundaryEl,\n                        bbBoundaryElId = scope.bbBoundaryElId;\n\n                    /*istanbul ignore else */\n                    if (bbBoundaryElId) {\n                        boundaryEl = angular.element('#' + bbBoundaryElId);\n\n                        /*istanbul ignore else */\n                        if (boundaryEl.length === 1) {\n                            destroyVk();\n\n                            vk = bbViewKeeperBuilder.create({\n                                el: el[0],\n                                boundaryEl: boundaryEl[0],\n                                setWidth: true\n                            });\n                        }\n                    }\n                });\n            }\n\n            return {\n                link: link,\n                restrict: 'A',\n                scope: {\n                    bbBoundaryElId: '='\n                }\n            };\n        }])\n        .directive('bbScrollingViewKeeper', ['$window', 'bbWindow', function ($window, bbWindow) {\n            return {\n                scope: {\n                    bbScrollingViewKeeper: \"=\"\n                },\n                link: function (scope, element) {\n                    var elementStart,\n                        scrollPos,\n                        prevScroll,\n                        scrollingDown = true,\n                        tempTop,\n                        verticalOffset,\n                        id = scope.$id;\n\n                    function scroll() {\n                        if (!element.is(':visible')) {\n                            return;\n                        }\n\n                        if (angular.element('.bb-omnibar>.desktop').is(':visible')) {\n                            verticalOffset = angular.element('.bb-omnibar>.desktop>.bar').outerHeight();\n                        } else {\n                            verticalOffset = 0;\n                        }\n\n                        if (scope.bbScrollingViewKeeper && scope.bbScrollingViewKeeper.viewKeeperOffsetElId) {\n                            verticalOffset += angular.element('#' + scope.bbScrollingViewKeeper.viewKeeperOffsetElId).outerHeight();\n                        }\n\n                        if (!elementStart) {\n                            elementStart = element.offset().top;\n                        }\n                        scrollPos = $window.scrollY || $window.pageYOffset || $window.document.body.scrollTop || 0;\n                        if (prevScroll > scrollPos) {\n                            scrollingDown = false;\n                        } else {\n                            scrollingDown = true;\n                        }\n                        prevScroll = scrollPos;\n\n                        if (scrollPos >= elementStart - verticalOffset && element.height() + verticalOffset <= $window.document.body.offsetHeight) {\n                            if (element.height() + verticalOffset < $window.innerHeight) {\n                                tempTop = 0;\n\n                                element.removeClass('bb-grid-filters-fixed-bottom').addClass('bb-grid-filters-fixed-top');\n\n                                element.css({\n                                    top: verticalOffset + 'px'\n                                });\n                            } else if (scrollingDown) {\n                                if (element.offset().top + element.height() >= scrollPos + $window.innerHeight) {\n                                    /*istanbul ignore else: sanity check */\n                                    if (!tempTop) {\n                                        tempTop = element.offset().top - elementStart;\n                                    }\n\n                                    element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom');\n\n                                    element.css({\n                                        top: tempTop\n                                    });\n                                } else {\n                                    tempTop = 0;\n                                    element.css({\n                                        top: ''\n                                    });\n                                    element.removeClass('bb-grid-filters-fixed-top').addClass('bb-grid-filters-fixed-bottom');\n                                }\n                            } else {\n                                if (element.offset().top < scrollPos + verticalOffset) {\n                                    /*istanbul ignore else: sanity check */\n                                    if (!tempTop) {\n                                        tempTop = element.offset().top - elementStart;\n                                    }\n\n                                    element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom ');\n\n                                    element.css({\n                                        top: tempTop\n                                    });\n                                } else {\n                                    tempTop = 0;\n\n                                    element.removeClass('bb-grid-filters-fixed-bottom').addClass('bb-grid-filters-fixed-top');\n\n                                    element.css({\n                                        top: verticalOffset + 'px'\n                                    });\n                                }\n                            }\n                        } else {\n                            tempTop = 0;\n                            element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom grid-filters-fixed-top grid-filters-fixed-bottom');\n                            element.css({\n                                top: 0\n                            });\n                        }\n                    }\n\n                    if (!bbWindow.isIosUserAgent()) {\n                        angular.element($window).on('scroll.' + id + ', orientationchange.' + id, scroll);\n\n                        element.on('$destroy', function () {\n                            angular.element($window).off(\"scroll.\" + id + \", orientationchange.\" + id);\n                        });\n                    }\n                },\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.wait', [])\n        .factory('bbWait', ['$timeout', function ($timeout) {\n\n            var addWait,\n                removeWait,\n                clearBlockOptions,\n                fullPageClearBlockOptions,\n                fullPageVisibleBlockOptions,\n                fullPageZIndex = 20000,\n                nonBlockWaitCountAttr = 'bb-wait-non-block-count',\n                visibleBlockOptions,\n                showingWaitAttr = 'bb-wait-showingwait',\n                waitCountAttr = 'bb-wait-count';\n\n            visibleBlockOptions = {\n                message: '<div class=\"bb-wait-wrap\"><div class=\"bb-wait-spinner\"></div></div>'\n            };\n\n            clearBlockOptions = {\n                message: \"\",\n                fadeOut: 0,\n                fadeIn: 0,\n                overlayCSS: {\n                    opacity: 0\n                }\n            };\n\n            fullPageClearBlockOptions = angular.copy(clearBlockOptions);\n            fullPageClearBlockOptions.overlayCSS[\"z-index\"] = fullPageZIndex;\n\n            fullPageVisibleBlockOptions = angular.copy(visibleBlockOptions);\n            fullPageVisibleBlockOptions.overlayCSS = { \"z-index\": fullPageZIndex };\n            fullPageVisibleBlockOptions.css = { \"z-index\": fullPageZIndex + 1 };\n\n            function isBlockUISupported() {\n                // Returns whether jquery.blockUI is loaded.\n                return ($ && $.blockUI);\n            }\n\n            function isFullPage(el) {\n                // Returns whether the element specified should be causing a\n                // full page wait rather than just on the element itself.\n                return $(el)[0] === document.body;\n            }\n\n            function getWaitCount(el, nonblocking) {\n                // Returns the elements current wait count\n                var attr = nonblocking ? nonBlockWaitCountAttr : waitCountAttr;\n                return parseInt($(el).data(attr) || 0, 10);\n            }\n\n            function setWaitCount(el, count, nonblocking) {\n                var attr = nonblocking ? nonBlockWaitCountAttr : waitCountAttr;\n\n                // Sets the elements current wait count\n                if (!count) {\n                    $(el).removeData(attr);\n                } else {\n                    $(el).data(attr, count);\n                }\n            }\n\n            function nonblockEl(el, options) {\n                var childOptions = angular.extend({}, options),\n                    nonblock = $(el).children(\".bb-wait-nonblock\");\n\n                if (nonblock.length === 0) {\n                    nonblock = $(\"<div class='bb-wait-nonblock'></div>\");\n                    $(el).append(nonblock);\n                    $(nonblock).click(function () {\n                        nonblock.hide();\n                    });\n                }\n                nonblock.show();\n\n                childOptions.nonblocking = false;\n\n                addWait(nonblock[0], childOptions);\n            }\n\n            function unNonblockEl(el, options) {\n                var childOptions = angular.extend({}, options),\n                    nonblock = $(el).children(\".bb-wait-nonblock\");\n\n                if (nonblock.length > 0) {\n                    childOptions.nonblocking = false;\n                    removeWait(nonblock[0], childOptions);\n                }\n            }\n\n            function blockEl(el, options) {\n                // Shows the element block UI.\n\n                var customBlockOptions,\n                    $el = $(el);\n\n                if (!isBlockUISupported()) {\n                    return;\n                }\n\n                /* istanbul ignore if: this doesn't seem ever be hit; maybe revisit. */\n                if ($el.data(showingWaitAttr)) {\n                    // If we're already showing the block, then don't start this again.\n                    // Using a different flag than the count itself to support delaying the unblock.\n                    return;\n                }\n\n                function showFullBlock() {\n                    /* istanbul ignore if: this doesn't seem ever be hit; maybe revisit. */\n                    if (!$el.data(showingWaitAttr)) {\n                        // If we're no longer showing the wait then the block was removed before the visible block was added.\n                        // We shouldn't continue to add the visible block.\n                        return;\n                    }\n\n                    if (isFullPage(el)) {\n                        $.blockUI(angular.extend({}, fullPageVisibleBlockOptions, customBlockOptions));\n                    } else {\n                        $el.block(angular.extend({}, visibleBlockOptions, customBlockOptions));\n                    }\n                }\n\n                options = angular.extend({}, {\n                    visualBlockDelay: 300\n                }, options || /* istanbul ignore next: sanity check */ {});\n\n                customBlockOptions = {\n                    fadeIn: options.fadeIn\n                };\n\n                $el.data(showingWaitAttr, true);\n\n                if (options.visualBlockDelay) {\n                    if (isFullPage(el)) {\n                        $.blockUI(fullPageClearBlockOptions);\n                    } else {\n                        $el.block(clearBlockOptions);\n                    }\n\n                    $timeout(showFullBlock, options.visualBlockDelay);\n                } else {\n                    showFullBlock();\n                }\n            }\n\n            function unblockEl(el) {\n                // Removes the element block UI.\n\n                // Including a setTimeout here so that if a block is immediately re-added, then there won't be a blink\n                // between turning off the current block and then adding another.\n                // This timeout could default to something higher than 0 or we could make it configurable if needed.\n                // A set timeout of 0 handles blocks added without async operations before starting another, which\n                // would indicate that the block should have been maintained anyways.\n                $timeout(function () {\n                    var $el;\n\n                    /* istanbul ignore else: sanity check */\n                    if (getWaitCount(el) === 0) {\n                        $el = $(el);\n\n                        if (!isBlockUISupported()) {\n                            return;\n                        }\n\n                        if (isFullPage(el)) {\n                            $.unblockUI();\n                        } else {\n                            $el.unblock();\n                        }\n                        $el.removeData(showingWaitAttr);\n                    }\n                }, 0);\n            }\n\n            addWait = function (el, options) {\n                var count;\n                options = options || {};\n\n                // Increases the element wait count and shows the wait if the count is above 0.\n                count = getWaitCount(el, options.nonblocking);\n                count += 1;\n\n                setWaitCount(el, count, options.nonblocking);\n                if (count === 1) {\n                    if (options.nonblocking) {\n                        nonblockEl(el, options);\n                    } else {\n                        blockEl(el, options);\n                    }\n                }\n            };\n\n            removeWait = function (el, options) {\n                var count;\n                options = options || {};\n\n                // Decreases the element wait count and hides the wait if the count is at 0.\n                count = getWaitCount(el, options.nonblocking);\n                if (count > 0) {\n                    count -= 1;\n\n                    setWaitCount(el, count, options.nonblocking);\n                    if (count === 0) {\n                        if (options.nonblocking) {\n                            unNonblockEl(el, options);\n                        } else {\n                            unblockEl(el, options);\n                        }\n                    }\n                }\n            };\n\n            function clearAllWaits(el) {\n                // Forcibly clears out the wait count for an element\n                setWaitCount(el, 0);\n                unblockEl(el);\n                setWaitCount(el, 0, true);\n                unNonblockEl(el);\n            }\n\n            if (isBlockUISupported()) {\n                // Clear any blockUI defaults.  Specifying these in the block call itself just gets appended to the defaults\n                // but is incapable of generically clearing them all.\n                $.blockUI.defaults.css = {};\n                $.blockUI.defaults.overlayCSS = {};\n            }\n\n            return {\n                beginElWait: function (el, options) {\n                    addWait(el, options);\n                },\n                beginPageWait: function (options) {\n                    addWait(document.body, options);\n                },\n                clearElWait: function (el) {\n                    clearAllWaits(el);\n                },\n                clearPageWait: function () {\n                    clearAllWaits(document.body);\n                },\n                endElWait: function (el, options) {\n                    removeWait(el, options);\n                },\n                endPageWait: function (options) {\n                    removeWait(document.body, options);\n                }\n            };\n        }])\n        .directive('bbWait', ['bbWait', function (bbWait) {\n            /// <summary>\n            /// This directive provides an attribute that can be placed on elements indicating whether they should or shouldn't be blocked for waiting.\n            /// </summary>\n            return {\n                restrict: 'A',\n                link: function (scope, el, attrs) {\n                    var firstScopeLoad = true;\n                    scope.$watch(attrs.bbWait, function (value, oldValue) {\n                        if (value && (!oldValue || firstScopeLoad)) {\n                            bbWait.beginElWait(el);\n                        } else if (oldValue && !value) {\n                            bbWait.endElWait(el);\n                        }\n                        firstScopeLoad = false;\n                    });\n                }\n            };\n        }]);\n\n}(jQuery));\n","/*global angular*/\n\n(function () {\n    'use strict';\n\n    angular.module('sky.window', [])\n        .constant('bbWindowConfig', {\n            productName: ''\n        })\n        .factory('bbWindow', ['$window', 'bbWindowConfig', '$timeout', '$document', function ($window, bbWindowConfig, $timeout, $document) {\n            var scrollbarWidth;\n\n            function calculateScrollbarWidth() {\n                var inner,\n                    outer,\n                    w1,\n                    w2;\n\n                inner = angular.element('<p></p>');\n                inner.css('width', '100%');\n                inner.css('height', '200px');\n\n                outer = angular.element('<div></div>');\n                outer.css('position', 'absolute');\n                outer.css('top', '0px');\n                outer.css('left', '0px');\n                outer.css('visibility', 'hidden');\n                outer.css('width', '200px');\n                outer.css('height', '150px');\n                outer.css('overflow', 'hidden');\n\n                outer.append(inner);\n\n                $document.find('body').append(outer);\n\n                w1 = inner[0].offsetWidth;\n\n                outer.css('overflow', 'scroll');\n                w2 = inner[0].offsetWidth;\n\n                /*istanbul ignore next: sanity check */\n                if (w1 === w2) {\n                    w2 = outer[0].clientWidth;\n                }\n                outer.remove();\n                return (w1 - w2);\n            }\n\n            return {\n                setWindowTitle: function (title) {\n                    var textToAppend = bbWindowConfig.productName;\n\n                    if (textToAppend) {\n                        title = title || '';\n\n                        if (title) {\n                            title += ' - ';\n                        }\n\n                        title += textToAppend;\n                    }\n\n                    //Adding a delay so the setWindowTitle method can be safely called after an angular\n                    //state change without taking affect until after the browser has completed its\n                    //state change.  Without this, the previous page will be renamed in the browser history.\n                    $timeout(function () {\n                        $window.document.title = title;\n                    });\n                },\n                getScrollbarWidth: function () {\n                    if (!scrollbarWidth && scrollbarWidth !== 0) {\n                        scrollbarWidth = calculateScrollbarWidth();\n                    }\n\n                    return scrollbarWidth;\n                },\n                isIosUserAgent: function () {\n                    return /iPad|iPod|iPhone/i.test($window.navigator.userAgent);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.wizard', ['sky.resources', 'ui.bootstrap.tabs'])\n        .directive('bbWizard', function () {\n            return {\n                link: function (scope, el) {\n                    /*jslint unparam: true */\n                    el.addClass('bb-wizard');\n                },\n                restrict: 'A'\n            };\n        })\n        .directive('bbWizardStepComplete', function () {\n            return {\n                link: function (scope, el, attrs) {\n                    scope.$watch(attrs.bbWizardStepComplete, function (newValue) {\n                        el[newValue ? 'addClass' : 'removeClass']('bb-wizard-step-complete');\n                    });\n                }\n            };\n        })\n        .factory('bbWizardNavigator', ['bbResources', function (bbResources) {\n            function stepIsDisabled(step) {\n                return angular.isFunction(step.disabled) && step.disabled();\n            }\n\n            return {\n                init: function (options) {\n                    /*jslint unparam: true */\n                    var steps,\n                        finish;\n\n                    function getPreviousStep() {\n                        var i,\n                            n,\n                            previousStep,\n                            step;\n\n                        for (i = 0, n = steps.length; i < n; i++) {\n                            step = steps[i];\n\n                            if (step.active && i > 0) {\n                                previousStep = steps[i - 1];\n\n                                if (!stepIsDisabled(previousStep)) {\n                                    return previousStep;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        return null;\n                    }\n\n                    function getNextStep() {\n                        var i,\n                            n,\n                            nextStep,\n                            step;\n\n                        for (i = 0, n = steps.length; i < n; i++) {\n                            step = steps[i];\n\n                            if (step.active && i + 1 < n) {\n                                nextStep = steps[i + 1];\n\n                                if (!stepIsDisabled(nextStep)) {\n                                    return nextStep;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        return null;\n                    }\n\n                    function setActiveStep(step) {\n                        if (step) {\n                            step.active = true;\n                        }\n                    }\n\n                    function lastStepIsActive() {\n                        return steps[steps.length - 1].active;\n                    }\n\n                    options = options || {};\n\n                    steps = options.steps;\n                    finish = options.finish;\n\n                    return {\n                        previousText: function () {\n                            return bbResources.wizard_navigator_previous;\n                        },\n                        nextText: function () {\n                            return lastStepIsActive() ? bbResources.wizard_navigator_finish : bbResources.wizard_navigator_next;\n                        },\n                        goToPrevious: function () {\n                            setActiveStep(getPreviousStep());\n                        },\n                        goToNext: function () {\n                            if (lastStepIsActive()) {\n                                if (angular.isFunction(finish)) {\n                                    finish();\n                                }\n                            } else {\n                                setActiveStep(getNextStep());\n                            }\n                        },\n                        previousDisabled: function () {\n                            return !getPreviousStep();\n                        },\n                        nextDisabled: function () {\n                            return !getNextStep() && !lastStepIsActive();\n                        }\n                    };\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var modules = [\n        'sky.actionbar',\n        'sky.alert',\n        'sky.autofocus',\n        'sky.autonumeric',\n        'sky.avatar',\n        'sky.check',\n        'sky.checklist',\n        'sky.contextmenu',\n        'sky.data',\n        'sky.datepicker',\n        'sky.daterangepicker',\n        'sky.error',\n        'sky.format',\n        'sky.grids',\n        'sky.help',\n        'sky.helpbutton',\n        'sky.highlight',\n        'sky.mediabreakpoints',\n        'sky.modal',\n        'sky.moment',\n        'sky.navbar',\n        'sky.omnibar',\n        'sky.palette',\n        'sky.page',\n        'sky.pagesummary',\n        'sky.pagination',\n        'sky.popover',\n        'sky.resources',\n        'sky.scrollintoview',\n        'sky.searchfield',\n        'sky.tabscroll',\n        'sky.tabset',\n        'sky.tabsref',\n        'sky.templates',\n        'sky.templating',\n        'sky.textexpand',\n        'sky.tiles',\n        'sky.tooltip',\n        'sky.utilities',\n        'sky.validation',\n        'sky.viewkeeper',\n        'sky.wait',\n        'sky.window',\n        'sky.wizard'\n    ];\n\n    try {\n        angular.module('toastr');\n        modules.push('sky.toast');\n    } catch (ignore) {\n        /* The toastr module isn't defined.  Do not load sky.toast module */\n    }\n\n    try {\n        angular.module('ngFileUpload');\n        modules.push('sky.fileattachments');\n    } catch (ignore) {\n\n    }\n\n    angular.module('sky', modules);\n\n}());\n","/*jshint unused: false */\n/*global angular */\n\n(function () {\n'use strict';\n\nvar bbResourcesOverrides;\n\nbbResourcesOverrides = {\"action_bar_actions\":\"Actions\",\"alert_close\":\"Close\",\"autonumeric_abbr_billions\":\"b\",\"autonumeric_abbr_millions\":\"m\",\"autonumeric_abbr_thousands\":\"k\",\"avatar_error_not_image_description\":\"Please choose a file that is a valid image.\",\"avatar_error_not_image_title\":\"File is not an image.\",\"avatar_error_too_large_description\":\"Please choose an image that is less than {0}.\",\"avatar_error_too_large_title\":\"File is too large.\",\"checklist_select_all\":\"Select all\",\"checklist_clear_all\":\"Clear all\",\"checklist_no_items\":\"No items found\",\"grid_back_to_top\":\"Back to top\",\"grid_column_picker_all_categories\":\"All\",\"grid_column_picker_description_header\":\"Description\",\"grid_column_picker_header\":\"Choose columns to show in the list\",\"grid_column_picker_name_header\":\"Column\",\"grid_column_picker_search_placeholder\":\"Search by name\",\"grid_column_picker_submit\":\"Apply changes\",\"grid_columns_button\":\" Choose columns\",\"grid_filters_apply\":\"Apply filters\",\"grid_filters_button\":\"Filters\",\"grid_filters_clear\":\"Clear\",\"grid_filters_header\":\"Filter\",\"grid_filters_hide\":\"Hide\",\"grid_filters_summary_header\":\"Filter:\",\"grid_load_more\":\"Load more\",\"grid_search_placeholder\":\"Find in this list\",\"grid_column_picker_search_no_columns\":\"No columns found\",\"modal_footer_cancel_button\":\"Cancel\",\"modal_footer_primary_button\":\"Save\",\"month_short_april\":\"Apr\",\"month_short_august\":\"Aug\",\"month_short_december\":\"Dec\",\"month_short_february\":\"Feb\",\"month_short_january\":\"Jan\",\"month_short_july\":\"Jul\",\"month_short_june\":\"Jun\",\"month_short_march\":\"Mar\",\"month_short_may\":\"May\",\"month_short_november\":\"Nov\",\"month_short_october\":\"Oct\",\"month_short_september\":\"Sep\",\"page_noaccess_button\":\"Return to a non-classified page\",\"page_noaccess_description\":\"Sorry, you don't have rights to this page.\\nIf you feel you should, please contact your system administrator.\",\"page_noaccess_header\":\"Move along, there's nothing to see here\",\"text_expand_see_less\":\"See less\",\"text_expand_see_more\":\"See more\",\"text_expand_modal_title\":\"Expanded view\",\"text_expand_close_text\":\"Close\",\"grid_action_bar_clear_selection\":\"Clear selection\",\"grid_action_bar_cancel_mobile_actions\":\"Cancel\",\"grid_action_bar_choose_action\":\"Choose an action\",\"date_field_invalid_date_message\":\"Please enter a valid date\",\"date_range_picker_this_week\":\"This week\",\"date_range_picker_last_week\":\"Last week\",\"date_range_picker_next_week\":\"Next week\",\"date_range_picker_this_month\":\"This month\",\"date_range_picker_last_month\":\"Last month\",\"date_range_picker_next_month\":\"Next month\",\"date_range_picker_this_calendar_year\":\"This calendar year\",\"date_range_picker_last_calendar_year\":\"Last calendar year\",\"date_range_picker_next_calendar_year\":\"Next calendar year\",\"date_range_picker_this_fiscal_year\":\"This fiscal year\",\"date_range_picker_last_fiscal_year\":\"Last fiscal year\",\"date_range_picker_next_fiscal_year\":\"Next fiscal year\",\"date_range_picker_this_quarter\":\"This quarter\",\"date_range_picker_last_quarter\":\"Last quarter\",\"date_range_picker_next_quarter\":\"Next quarter\",\"date_range_picker_at_any_time\":\"At any time\",\"date_range_picker_today\":\"Today\",\"date_range_picker_tomorrow\":\"Tomorrow\",\"date_range_picker_yesterday\":\"Yesterday\",\"date_range_picker_specific_range\":\"Specific range\",\"date_range_picker_filter_description_this_week\":\"{0} for this week\",\"date_range_picker_filter_description_last_week\":\"{0} from last week\",\"date_range_picker_filter_description_next_week\":\"{0} for next week\",\"date_range_picker_filter_description_this_month\":\"{0} for this month\",\"date_range_picker_filter_description_last_month\":\"{0} from last month\",\"date_range_picker_filter_description_next_month\":\"{0} for next month\",\"date_range_picker_filter_description_this_calendar_year\":\"{0} for this calendar year\",\"date_range_picker_filter_description_last_calendar_year\":\"{0} from last calendar year\",\"date_range_picker_filter_description_next_calendar_year\":\"{0} for next calendar year\",\"date_range_picker_filter_description_this_fiscal_year\":\"{0} for this fiscal year\",\"date_range_picker_filter_description_last_fiscal_year\":\"{0} from last fiscal year\",\"date_range_picker_filter_description_next_fiscal_year\":\"{0} for next fiscal year\",\"date_range_picker_filter_description_this_quarter\":\"{0} for this quarter\",\"date_range_picker_filter_description_last_quarter\":\"{0} from last quarter\",\"date_range_picker_filter_description_next_quarter\":\"{0} for next quarter\",\"date_range_picker_filter_description_at_any_time\":\"{0} at any time\",\"date_range_picker_filter_description_today\":\"{0} for today\",\"date_range_picker_filter_description_yesterday\":\"{0} from yesterday\",\"date_range_picker_filter_description_tomorrow\":\"{0} for tomorrow\",\"date_range_picker_filter_description_specific_range\":\"{0} from {1} to {2}\",\"date_range_picker_from_date\":\"From date\",\"date_range_picker_to_date\":\"To date\",\"date_range_picker_min_date_error\":\"End date must be after start date\",\"date_range_picker_max_date_error\":\"Start date must be before end date\",\"errormodal_ok\":\"OK\",\"file_size_b_plural\":\"{0} bytes\",\"file_size_b_singular\":\"{0} byte\",\"file_size_kb\":\"{0} KB\",\"file_size_mb\":\"{0} MB\",\"file_size_gb\":\"{0} GB\",\"file_upload_drag_file_here\":\"Drag a file here\",\"file_upload_drop_files_here\":\"Drop files here\",\"file_upload_invalid_file\":\"This file type is invalid\",\"file_upload_link_placeholder\":\"http://www.something.com/file\",\"file_upload_or_click_to_browse\":\"or click to browse\",\"file_upload_paste_link\":\"Paste a link to a file\",\"file_upload_paste_link_done\":\"Done\",\"searchfield_searching\":\"Searching...\",\"searchfield_no_records\":\"Sorry, no matching records found\",\"wizard_navigator_finish\":\"Finish\",\"wizard_navigator_next\":\"Next\",\"wizard_navigator_previous\":\"Previous\",\"datepicker_today\":\"Today\",\"datepicker_clear\":\"Clear\",\"datepicker_close\":\"Done\"};\n\nangular.module('sky.resources')\n    .config(['bbResources', function (bbResources) {\n        angular.extend(bbResources, bbResourcesOverrides);\n    }]);\n}());\n","angular.module('sky.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('sky/templates/actionbar/actionbar.html',\n        '<div class=\"bb-action-bar\">\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/actionbar/actionbaritem.html',\n        '<button class=\"btn bb-btn-secondary bb-action-bar-item-button\" type=\"button\">\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/actionbar/actionbaritemgroup.html',\n        '<div class=\"bb-action-bar-group\">\\n' +\n        '    <div class=\"bb-action-bar-buttons hidden-xs\">\\n' +\n        '        <ng-transclude />\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-action-bar-dropdown hidden-sm hidden-md hidden-lg\">\\n' +\n        '        <div uib-dropdown>\\n' +\n        '             <button class=\"btn bb-btn-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\\n' +\n        '            {{bbActionBarItemGroup.title}}<span class=\"caret\"/>\\n' +\n        '            </button>\\n' +\n        '\\n' +\n        '            <ul uib-dropdown-menu>\\n' +\n        '\\n' +\n        '            </ul>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/alert/alert.html',\n        '<div class=\"alert\" ng-class=\"[\\'alert-\\' + (bbAlert.bbAlertType || \\'warning\\'), bbAlert.bbAlertCloseable === \\'true\\' ? \\'alert-dismissible\\' : null]\" ng-show=\"!bbAlert.bbAlertClosed\" role=\"alert\">\\n' +\n        '    <button ng-show=\"bbAlert.bbAlertCloseable === \\'true\\'\" type=\"button\" class=\"close\" ng-click=\"bbAlert.close({$event: $event})\">\\n' +\n        '        <span aria-hidden=\"true\">&times;</span>\\n' +\n        '        <span class=\"sr-only\">{{\\'alert_close\\' | bbResources}}</span>\\n' +\n        '    </button>\\n' +\n        '    <div ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/avatar/avatar.directive.html',\n        '<div class=\"bb-avatar\" ng-switch=\"bbAvatar.canChange\">\\n' +\n        '  <div ng-switch-when=\"true\">\\n' +\n        '    <div\\n' +\n        '       class=\"bb-avatar-file-drop\"\\n' +\n        '       bb-file-drop\\n' +\n        '       bb-file-drop-change=\"bbAvatar.photoDrop(files, rejectedFiles)\"\\n' +\n        '       bb-file-drop-accept=\"\\'image/*\\'\"\\n' +\n        '       >\\n' +\n        '      <ng-include src=\"\\'sky/templates/avatar/avatarinner.include.html\\'\" onload=\"bbAvatar.onTemplateLoad()\"></ng-include>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '  <div ng-switch-default>\\n' +\n        '    <ng-include src=\"\\'sky/templates/avatar/avatarinner.include.html\\'\" onload=\"bbAvatar.onTemplateLoad()\"></ng-include>\\n' +\n        '  </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/avatar/avatarinner.include.html',\n        '<div class=\"bb-avatar-wrapper\">\\n' +\n        '  <div class=\"bb-avatar-image\" ng-show=\"bbAvatar.bbAvatarSrc\"></div>\\n' +\n        '  <canvas class=\"bb-avatar-initials\" ng-show=\"bbAvatar.showInitials()\"></canvas>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/check/styled.html',\n        '<span role=\"input\"></span>\\n' +\n        '');\n    $templateCache.put('sky/templates/check/wrapper.html',\n        '<label class=\"bb-check-wrapper\"></label>\\n' +\n        '');\n    $templateCache.put('sky/templates/checklist/checklist.html',\n        '<div>\\n' +\n        '    <div>\\n' +\n        '        <div ng-if=\"bbChecklistIncludeSearch\" class=\"bb-checklist-filter-bar\">\\n' +\n        '            <div class=\"bb-checklist-search\">\\n' +\n        '                <input type=\"text\" class=\"bb-checklist-search-box\" maxlength=\"255\" placeholder=\"{{bbChecklistSearchPlaceholder}}\" ng-model=\"locals.searchText\" ng-model-options=\"{debounce: bbChecklistSearchDebounce}\" data-bbauto-field=\"ChecklistSearch\">\\n' +\n        '                <div class=\"bb-checklist-search-icon\">\\n' +\n        '                    <i class=\"fa fa-search\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div ng-if=\"bbChecklistCategories && bbChecklistCategories.length > 0\" class=\"bb-checklist-filter-bar bb-checklist-category-bar\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-sm\" ng-click=\"locals.filterByCategory()\" ng-class=\"locals.selectedCategory ? \\'btn-default\\' : \\'btn-primary\\'\">{{\\'grid_column_picker_all_categories\\' | bbResources}}</button>\\n' +\n        '            <button ng-repeat=\"category in bbChecklistCategories\" type=\"button\" class=\"btn btn-sm\" ng-click=\"locals.filterByCategory(category)\" ng-class=\"locals.selectedCategory === category ? \\'btn-primary\\' : \\'btn-default\\'\">{{category}}</button>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"bb-checklist-filter-bar bb-checklist-select-all-bar\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-link\" data-bbauto-field=\"ChecklistSelectAll\" ng-click=\"locals.selectAll()\">{{\\'checklist_select_all\\' | bbResources}}</button>\\n' +\n        '            <button type=\"button\" class=\"btn btn-link\" data-bbauto-field=\"ChecklistClear\" ng-click=\"locals.clear()\">{{\\'checklist_clear_all\\' | bbResources}}</button>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-checklist-wrapper\" ng-switch=\"bbChecklistMode\">\\n' +\n        '        <div ng-switch-when=\"list\" data-bbauto-repeater=\"ChecklistItems\" data-bbauto-repeater-count=\"{{locals.filteredItems.length}}\">\\n' +\n        '            <label class=\"bb-checklist-list-row\" ng-repeat=\"item in locals.filteredItems\" data-bbauto-field=\"{{item.name}}\">\\n' +\n        '                <div class=\"bb-checklist-list-col bb-checklist-list-col-checkbox\">\\n' +\n        '                    <input\\n' +\n        '                           bb-check\\n' +\n        '                           type=\"checkbox\"\\n' +\n        '                           checklist-model=\"bbChecklistSelectedItems\"\\n' +\n        '                           checklist-value=\"item\"\\n' +\n        '                           />\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-checklist-list-col\">\\n' +\n        '                    <div class=\"bb-checklist-list-title\" bb-highlight=\"locals.searchText\" ng-bind=\"item.title\"></div>\\n' +\n        '                    <div class=\"bb-checklist-list-description\" bb-highlight=\"locals.searchText\" ng-bind=\"item.description\"></div>\\n' +\n        '                </div>\\n' +\n        '            </label>\\n' +\n        '        </div>\\n' +\n        '        <table class=\"table bb-checklist-table\" ng-switch-default>\\n' +\n        '            <thead>\\n' +\n        '                <tr>\\n' +\n        '                    <th class=\"bb-checklist-checkbox-column\"></th>\\n' +\n        '                    <th ng-repeat=\"column in locals.columns\" class=\"{{column.class}}\" ng-style=\"{\\'width\\': column.width}\">{{column.caption}}</th>\\n' +\n        '                </tr>\\n' +\n        '            </thead>\\n' +\n        '            <tbody bb-highlight=\"locals.searchText\" bb-highlight-beacon=\"locals.highlightRefresh\" data-bbauto-repeater=\"ChecklistItems\" data-bbauto-repeater-count=\"{{locals.filteredItems.length}}\">\\n' +\n        '                <tr ng-repeat=\"item in locals.filteredItems\" ng-click=\"locals.rowClicked(item);\" class=\"bb-checklist-row\">\\n' +\n        '                    <td>\\n' +\n        '                        <input bb-check type=\"checkbox\" checklist-model=\"bbChecklistSelectedItems\" checklist-value=\"item\" data-bbauto-field=\"{{item[bbChecklistAutomationField]}}\" />\\n' +\n        '                    </td>\\n' +\n        '                    <td ng-repeat=\"column in locals.columns\" class=\"{{column.class}}\" data-bbauto-field=\"{{column.automationId}}\" data-bbauto-index=\"{{$parent.$index}}\">{{item[column.field]}}</td>\\n' +\n        '                </tr>\\n' +\n        '            </tbody>\\n' +\n        '        </table>\\n' +\n        '        <div class=\"bb-checklist-no-items\" ng-if=\"!locals.filteredItems.length\">{{bbChecklistNoItemsMessage || (\\'checklist_no_items\\' | bbResources)}}</div>\\n' +\n        '    </div>\\n' +\n        '    <div ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/contextmenu.html',\n        '<div class=\"bb-context-menu\" data-bbauto-field=\"ContextMenuActions\" uib-dropdown>\\n' +\n        '    <bb-context-menu-button data-bbauto-field=\"ContextMenuAnchor\" ng-click=\"contextButtonStopPropagation($event)\" uib-dropdown-toggle></bb-context-menu-button>\\n' +\n        '    <ul uib-dropdown-menu role=\"menu\">\\n' +\n        '        <ng-transclude/>\\n' +\n        '    </ul>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/menubutton.html',\n        '<button type=\"button\" class=\"btn bb-btn-secondary bb-context-menu-btn\"><i class=\"fa fa-ellipsis-h\"></i></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/menuitem.html',\n        '<li role=\"presentation\"><a role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"clickItem()\"><ng-transclude/></a></li>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/submenu.html',\n        '<div class=\"bb-submenu\">\\n' +\n        '    <uib-accordion>\\n' +\n        '        <uib-accordion-group is-open=\"accordionLocals.accordionOpen\">\\n' +\n        '\\n' +\n        '            <uib-accordion-heading ng-if=\"accordionLocals.staticHeader\">\\n' +\n        '                <div ng-click=\"toggleAccordion($event)\">\\n' +\n        '                    <span>\\n' +\n        '                        {{heading}}\\n' +\n        '                    <span>\\n' +\n        '                    <i ng-class=\"\\'fa-chevron-\\' + (accordionLocals.accordionOpen ? \\'up\\' : \\'down\\')\" class=\"fa bb-submenu-chevron\"></i>\\n' +\n        '                </div>\\n' +\n        '            </uib-accordion-heading>\\n' +\n        '            <ng-transclude></ng-transclude>\\n' +\n        '        </uib-accordion-group>\\n' +\n        '    </uib-accordion>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/submenuheading.html',\n        '<uib-accordion-heading>\\n' +\n        '    <div ng-click=\"toggleAccordion($event)\">\\n' +\n        '        <ng-transclude></ng-transclude>\\n' +\n        '        <i ng-class=\"\\'fa-chevron-\\' + (accordionLocals.accordionOpen ? \\'up\\' : \\'down\\')\" class=\"fa bb-submenu-chevron\"></i>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '</uib-accordion-heading>\\n' +\n        '');\n    $templateCache.put('sky/templates/datefield/datefield.html',\n        '<span class=\"add-on input-group-btn\">\\n' +\n        '    <button type=\"button\" class=\"btn btn-default bb-date-field-calendar-button\">\\n' +\n        '        <i class=\"fa fa-calendar\"></i>\\n' +\n        '    </button>\\n' +\n        '</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/datepicker/datepicker.html',\n        '<div>\\n' +\n        '    <div ng-if=\"locals.loaded\" class=\"input-group bb-datefield\">\\n' +\n        '        <input name=\"{{locals.inputName}}\" type=\"text\" class=\"form-control\" ng-model=\"locals.date\" is-open=\"locals.opened\" datepicker-options=\"locals.dateOptions\" uib-datepicker-popup=\"{{format}}\" show-button-bar=\"locals.showButtonBar\" current-text=\"{{resources.datepicker_today}}\" clear-text=\"{{resources.datepicker_clear}}\" close-text=\"{{resources.datepicker_close}}\" datepicker-append-to-body=\"{{locals.appendToBody}}\" close-on-date-selection=\"{{locals.closeOnSelection}}\" bb-datepicker-custom-validate=\"{{locals.hasCustomValidation}}\" placeholder=\"{{placeholderText}}\" max-date=\"maxDate\" min-date=\"minDate\" ng-required=\"locals.required\" bb-min-date bb-max-date />\\n' +\n        '        <span class=\"bb-datepicker-button-container add-on input-group-btn\" ng-class=\"{\\'bb-datefield-open\\': locals.opened}\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-default bb-date-field-calendar-button\" ng-click=\"locals.open($event)\">\\n' +\n        '                <i class=\"fa fa-calendar\"></i>\\n' +\n        '            </button>\\n' +\n        '        </span>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/daterangepicker/daterangepicker.html',\n        '<div class=\"form-inline\" ng-form=\"bbDateRangePickerCtrl.dateRangeForm\">\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"bbDateRangePickerCtrl.pickerLabel && !bbDateRangePickerCtrl.noLabels\">{{bbDateRangePickerCtrl.pickerLabel}}</label>\\n' +\n        '      <select data-bbauto-field=\"{{bbDateRangePickerCtrl.bbDateRangePickerAutomationId}}_DateRangeType\"\\n' +\n        '        class=\"form-control\"\\n' +\n        '        ng-options=\"bbDateRangePickerCtrl.getDateRangeTypeCaption(t) for t in (bbDateRangePickerCtrl.bbDateRangePickerOptions.availableDateRangeTypes || bbDateRangePickerCtrl.defaultDateRangeOptions)\"\\n' +\n        '        ng-model=\"bbDateRangePickerCtrl.bbDateRangePickerValue.dateRangeType\" />\\n' +\n        '    </div>\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\" ng-if=\"bbDateRangePickerCtrl.specificRangeIsVisible\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"!bbDateRangePickerCtrl.noLabels\">{{::bbDateRangePickerCtrl.resources.date_range_picker_from_date}}</label>\\n' +\n        '      <bb-datepicker ng-model=\"bbDateRangePickerCtrl.fromDate\" max-date=\"bbDateRangePickerCtrl.maxDate\" bb-datepicker-name=\"fromDate\" datepicker-append-to-body=\"true\" placeholder=\"bbDateRangePickerCtrl.fromPlaceholder\"></bb-datepicker>\\n' +\n        '      <label class=\"bb-date-range-picker-date-format-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.fromDate.$error.dateFormat\">{{::bbDateRangePickerCtrl.resources.date_field_invalid_date_message}}</label>\\n' +\n        '      <label class=\"bb-date-range-picker-date-max-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.fromDate.$error.maxDate\">{{::bbDateRangePickerCtrl.resources.date_range_picker_max_date_error}}</label>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\" ng-if=\"bbDateRangePickerCtrl.specificRangeIsVisible\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"!bbDateRangePickerCtrl.noLabels\">{{::bbDateRangePickerCtrl.resources.date_range_picker_to_date}}</label>\\n' +\n        '      <bb-datepicker ng-model=\"bbDateRangePickerCtrl.toDate\" min-date=\"bbDateRangePickerCtrl.minDate\" bb-datepicker-name=\"toDate\" datepicker-append-to-body=\"true\" placeholder=\"bbDateRangePickerCtrl.toPlaceholder\"></bb-datepicker>\\n' +\n        '      <label class=\"bb-date-range-picker-date-format-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.toDate.$error.dateFormat\">{{::bbDateRangePickerCtrl.resources.date_field_invalid_date_message}}</label>\\n' +\n        '      <label class=\"bb-date-range-picker-date-min-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.toDate.$error.minDate\">{{::bbDateRangePickerCtrl.resources.date_range_picker_min_date_error}}</label>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/error/error.directive.html',\n        '<div class=\"row\">\\n' +\n        '  <section class=\"col-xs-12 text-center\">\\n' +\n        '    <div class=\"bb-error-image\" ng-show=\"bbError.imageCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-title\" ng-show=\"bbError.titleCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-description\" ng-show=\"bbError.descriptionCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-action\" ng-show=\"bbError.actionCtrl\"></div>\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '  </section>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/error/errormodal.template.html',\n        '<bb-modal>\\n' +\n        '  <div class=\"modal-form\">\\n' +\n        '    <div bb-modal-body>\\n' +\n        '      <bb-error>\\n' +\n        '        <bb-error-title>\\n' +\n        '          {{bbErrorModal.options.errorTitle}}\\n' +\n        '        </bb-error-title>\\n' +\n        '        <bb-error-description>\\n' +\n        '          {{bbErrorModal.options.errorDescription}}\\n' +\n        '        </bb-error-description>\\n' +\n        '        <bb-error-action>\\n' +\n        '          <button type=\"button\" class=\"btn btn-primary\" ng-click=\"bbErrorModal.close()\">{{\\'errormodal_ok\\' | bbResources}}</button>\\n' +\n        '        </bb-error-action>\\n' +\n        '      </bb-error>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '</bb-modal>\\n' +\n        '');\n    $templateCache.put('sky/templates/fileattachments/filedrop.html',\n        '<div class=\"row bb-file-drop-row\">\\n' +\n        '    <div class=\"col-xs-12 bb-file-drop-col\" ng-class=\"{\\'col-sm-6\\': bbFileDrop.allowLinks}\">\\n' +\n        '        <div\\n' +\n        '             class=\"bb-file-drop bb-file-drop-target\"\\n' +\n        '             ngf-drop\\n' +\n        '             ngf-keep=\"false\"\\n' +\n        '             ngf-drag-over-class=\"{accept: \\'bb-file-drop-accept\\', reject: \\'bb-file-drop-reject\\'}\"\\n' +\n        '             ngf-change=\"bbFileDrop.fileChange($files, $event, $rejectedFiles)\"\\n' +\n        '             >\\n' +\n        '            <div class=\"bb-file-drop-contents\" ng-if=\"!bbFileDrop.hasTranscludeContents\">\\n' +\n        '                <div class=\"bb-file-drop-contents-not-over\">\\n' +\n        '                    <h4>{{\\'file_upload_drag_file_here\\' | bbResources}}</h4>\\n' +\n        '                    <h5>{{\\'file_upload_or_click_to_browse\\' | bbResources}}</h5>\\n' +\n        '                    <i class=\"fa fa-cloud-upload bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-file-drop-contents-accept\">\\n' +\n        '                    <h4>{{\\'file_upload_drop_files_here\\' | bbResources}}</h4>\\n' +\n        '                    <i class=\"fa fa-bullseye bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-file-drop-contents-reject\">\\n' +\n        '                    <h4>{{\\'file_upload_invalid_file\\' | bbResources}}</h4>\\n' +\n        '                    <i class=\"fa fa-times-circle bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-file-drop-contents-custom\" ng-transclude></div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"col-sm-6 col-xs-12 bb-file-drop-col\" ng-if=\"bbFileDrop.allowLinks\">\\n' +\n        '        <div class=\"bb-file-drop-contents\">\\n' +\n        '            <div class=\"bb-file-drop-link\">\\n' +\n        '                <h4 class=\"bb-file-drop-link-header\">{{\\'file_upload_paste_link\\' | bbResources}}</h4>\\n' +\n        '                <div class=\"form-group\">\\n' +\n        '                    <input\\n' +\n        '                           type=\"text\"\\n' +\n        '                           class=\"form-control\"\\n' +\n        '                           placeholder=\"{{\\'file_upload_link_placeholder\\' | bbResources}}\"\\n' +\n        '                           ng-model=\"bbFileDrop.url\"\\n' +\n        '                           ng-keypress=\"$event.keyCode === 13 && bbFileDrop.addLink($event)\"\\n' +\n        '                           />\\n' +\n        '                </div>\\n' +\n        '                <button type=\"button\" class=\"btn btn-primary\" ng-disabled=\"!bbFileDrop.url\" ng-click=\"bbFileDrop.addLink($event)\">\\n' +\n        '                    {{\\'file_upload_paste_link_done\\' | bbResources}}\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/fileattachments/fileitem.html',\n        '<div class=\"bb-file-item\">\\n' +\n        '    <div class=\"row bb-file-item-title\">\\n' +\n        '        <div class=\"col-xs-10\">\\n' +\n        '            <div class=\"bb-file-item-name\">\\n' +\n        '                <strong>{{item.name || item.url}}</strong>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-file-item-size\" ng-if=\"bbFileItem.isFile()\">\\n' +\n        '                ({{item.size | bbFileSize}})\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"col-xs-2\">\\n' +\n        '            <div class=\"pull-right\">\\n' +\n        '                <button type=\"button\" class=\"btn bb-btn-secondary bb-file-item-btn-delete\" ng-click=\"itemDelete()\">\\n' +\n        '                    <i class=\"glyphicon glyphicon-trash\"></i>\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"row\">\\n' +\n        '        <div ng-switch=\"bbFileItem.isImg()\" class=\"col-xs-3\">\\n' +\n        '            <div ng-switch-when=\"true\" class=\"center-block\">\\n' +\n        '              <img ng-if=\"item.url\" class=\"bb-file-item-preview-img\" ng-src=\"{{item.url}}\" />\\n' +\n        '              <img ng-if=\"!item.url\" class=\"bb-file-item-preview-img\" ngf-src=\"item\" />\\n' +\n        '            </div>\\n' +\n        '            <div ng-switch-when=\"false\" class=\"bb-file-item-preview-other\">\\n' +\n        '                <i class=\"fa\" ng-class=\"bbFileItem.otherCls\"></i>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"col-xs-9\" ng-transclude>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/actionbar.html',\n        '<div ng-show=\"locals.showActionBar\" data-bbauto-view=\"GridActionBar\">\\n' +\n        '    <div ng-if=\"!locals.showMobileActions\" class=\"bb-grid-action-bar\">\\n' +\n        '        <div ng-if=\"!locals.mobileButtons\" class=\"bb-grid-action-bar-buttons\" ng-repeat=\"action in locals.actions\">\\n' +\n        '            <button type=\"button\" class=\"btn\" ng-class=\"{\\'btn-primary\\': action.isPrimary, \\'bb-btn-secondary\\': !action.isPrimary}\" data-bbauto-field=\"{{action.automationId}}\" ng-click=\"action.actionCallback()\" ng-disabled=\"action.selections.length < 1\">{{action.title}} ({{action.selections.length}})</button>\\n' +\n        '        </div>\\n' +\n        '        <div ng-if=\"locals.mobileButtons\" class=\"bb-grid-action-bar-buttons\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.chooseAction()\">\\n' +\n        '                <span>{{resources.grid_action_bar_choose_action}}</span>\\n' +\n        '            </button>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-grid-action-bar-clear-selection\" ng-click=\"locals.clearSelection()\">\\n' +\n        '            {{resources.grid_action_bar_clear_selection}}\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '    <div ng-if=\"locals.showMobileActions\" class=\"bb-grid-action-bar-mobile-buttons\">\\n' +\n        '        <div class=\"bb-grid-action-bar-btn-container\">\\n' +\n        '            <div ng-repeat=\"action in locals.actions\">\\n' +\n        '                <button type=\"button\" class=\"bb-grid-action-bar-mobile-btn btn btn-block btn-lg\" ng-class=\"{\\'btn-primary\\': action.isPrimary, \\'bb-btn-secondary\\': !action.isPrimary}\" ng-click=\"action.actionCallback()\" ng-disabled=\"action.selections.length < 1\">{{action.title}} ({{action.selections.length}})</button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-grid-action-bar-mobile-cancel bb-grid-action-bar-clear-selection\" ng-click=\"locals.cancelChooseAction()\">\\n' +\n        '            {{resources.grid_action_bar_cancel_mobile_actions}}\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/columnpicker.html',\n        '<bb-modal data-bbauto-view=\"ColumnPicker\">\\n' +\n        '  <bb-modal-header bb-modal-help-key=\"$parent.columnPickerHelpKey\">{{\\'grid_column_picker_header\\' | bbResources}}</bb-modal-header>\\n' +\n        '  <div bb-modal-body>\\n' +\n        '    <bb-checklist\\n' +\n        '                  bb-checklist-items=\"columns\" \\n' +\n        '                  bb-checklist-selected-items=\"locals.selectedColumns\" \\n' +\n        '                  bb-checklist-include-search=\"\\'true\\'\" \\n' +\n        '                  bb-checklist-search-placeholder=\"{{\\'grid_column_picker_search_placeholder\\' | bbResources}}\" \\n' +\n        '                  bb-checklist-no-items-message=\"{{\\'grid_column_picker_search_no_columns\\' | bbResources}}\"\\n' +\n        '                  bb-checklist-categories=\"categories\" \\n' +\n        '                  bb-checklist-mode=\"list\" \\n' +\n        '                  bb-checklist-filter-local\\n' +\n        '                  >\\n' +\n        '    </bb-checklist>\\n' +\n        '  </div>\\n' +\n        '  <bb-modal-footer>\\n' +\n        '    <bb-modal-footer-button-primary data-bbauto-field=\"ColumnPickerSubmit\" ng-click=\"applyChanges()\">{{\\'grid_column_picker_submit\\' | bbResources}}</bb-modal-footer-button-primary>\\n' +\n        '    <bb-modal-footer-button-cancel data-bbauto-field=\"ColumnPickerCancel\"></bb-modal-footer-button-cancel>\\n' +\n        '  </bb-modal-footer>\\n' +\n        '</bb-modal>');\n    $templateCache.put('sky/templates/grids/dropdown.html',\n        '<div class=\"bb-context-menu\" data-bbauto-field=\"ContextMenuActions\" uib-dropdown dropdown-append-to-body ng-if=\"locals.items.length > 0\" is-open=\"locals.is_open\">\\n' +\n        '    <bb-context-menu-button data-bbauto-field=\"ContextMenuAnchor\" ng-click=\"locals.toggleDropdown($event)\">\\n' +\n        '    </bb-context-menu-button>\\n' +\n        '    <ul uib-dropdown-menu role=\"menu\">\\n' +\n        '        <bb-context-menu-item ng-repeat=\"item in locals.items\" bb-context-menu-action=\"item.cmd()\">{{item.title}}</bb-context-menu-item>\\n' +\n        '    </ul>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filters.html',\n        '<div style=\"display:none;\">\\n' +\n        '    <div bb-scrolling-view-keeper=\"viewKeeperOptions\" class=\"bb-grid-filters grid-filters\">\\n' +\n        '        <div class=\"bb-grid-filters-box\" bb-scroll-into-view=\"locals.expanded\">\\n' +\n        '            <div class=\"bb-grid-filters-icon\" ng-click=\"locals.expanded = !locals.expanded\"></div>\\n' +\n        '            <div class=\"bb-grid-filters-container\" style=\"display:none;\">\\n' +\n        '                <div class=\"bb-grid-filters-header\" ng-click=\"locals.expanded = !locals.expanded\">\\n' +\n        '                    <h4 class=\"bb-grid-filters-header-title\">{{resources.grid_filters_header}}</h4>\\n' +\n        '                    <span class=\"bb-grid-filters-header-hide\">{{resources.grid_filters_hide}}</span>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-grid-filters-body\" ng-transclude></div>\\n' +\n        '                <div class=\"bb-grid-filters-footer\">\\n' +\n        '                    <button data-bbauto-field=\"ApplyGridFilters\" class=\"btn btn-primary\" type=\"submit\" ng-click=\"applyFilters()\">{{resources.grid_filters_apply}}</button>\\n' +\n        '                    <button data-bbauto-field=\"ClearGridFilters\" class=\"btn bb-btn-secondary\" type=\"button\" ng-click=\"clearFilters()\">{{resources.grid_filters_clear}}</button>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filtersgroup.html',\n        '<div class=\"form-group\" ng-class=\"isCollapsed ? \\'collapsed\\' : \\'collapsible\\'\">\\n' +\n        '    <div ng-click=\"isCollapsed = !isCollapsed\">\\n' +\n        '        <i ng-class=\"\\'glyphicon-chevron-\\' + (isCollapsed ? \\'down\\' : \\'up\\')\" class=\"bb-grid-filters-body-group-header-icon glyphicon\"></i>\\n' +\n        '        <label>{{bbGridFiltersGroupLabel}}</label>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filters-body-group-content\" uib-collapse=\"!!isCollapsed\" ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filterssummary.html',\n        '<div class=\"toolbar bb-table-toolbar bb-applied-filter-bar\">\\n' +\n        '    <div class=\"bb-applied-filter-header\">\\n' +\n        '        <span>{{resources.grid_filters_summary_header}}</span>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-applied-filter-content\" ng-click=\"openFilterMenu()\">\\n' +\n        '        <span class=\"bb-applied-filter-text\" data-bbauto-field=\"FilterSummaryText\" ng-transclude></span>\\n' +\n        '        <span class=\"fa fa-times close\" data-bbauto-field=\"FilterSummaryRemove\" ng-click=\"clearFilters(); $event.stopPropagation();\"></span>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/grid.html',\n        '<section class=\"bb-grid-container\" data-bbauto-grid=\"{{options.automationId}}\" data-bbauto-timestamp=\"{{locals.timestamp}}\" data-bbauto-repeater=\"{{options.automationId}}\" data-bbauto-repeater-count=\"{{locals.rowcount}}\">\\n' +\n        '\\n' +\n        '\\n' +\n        '    <div class=\"bb-grid-toolbar-viewkeeper\">\\n' +\n        '        <div ng-if=\"!customToolbar.hasCustomToolbar\">\\n' +\n        '            <div ng-show=\"locals.showToolbar\">\\n' +\n        '                <bb-grid-toolbar>\\n' +\n        '                    <ng-transclude></ng-transclude>\\n' +\n        '                </bb-grid-toolbar>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '\\n' +\n        '        <div ng-if=\"customToolbar.hasCustomToolbar\">\\n' +\n        '            <div ng-show=\"locals.showToolbar\">\\n' +\n        '                <ng-transclude></ng-transclude>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div class=\"clearfix\"></div>\\n' +\n        '\\n' +\n        '    <div class=\"table-responsive\" bb-wait=\"options.loading\">\\n' +\n        '        <table id=\"{{locals.gridId}}\" class=\"bb-grid-table\" ng-class=\"{\\'grid-multiselect\\' : locals.multiselect}\"></table>\\n' +\n        '        <div class=\"bb-grid-empty-wait\" ng-if=\"locals.hasWaitAndEmpty()\" bb-wait=\"locals.hasWaitAndEmpty()\"></div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div ng-if=\"!paginationOptions\" class=\"bb-table-loadmore\" data-bbauto-field=\"LoadMoreButton\" ng-show=\"options.hasMoreRows\" ng-click=\"locals.loadMore()\">\\n' +\n        '        <span class=\"fa fa-cloud-download\"></span>\\n' +\n        '        <button type=\"button\" class=\"btn btn-link\">{{resources.grid_load_more}}</button>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div ng-if=\"paginationOptions\" class=\"bb-grid-pagination-container\">\\n' +\n        '        <uib-pagination ng-show=\"paginationOptions.recordCount > options.data.length\" total-items=\"paginationOptions.recordCount\" items-per-page=\"paginationOptions.itemsPerPage\" ng-model=\"locals.currentPage\" ng-change=\"paginationOptions.pageChanged()\" max-size=\"paginationOptions.maxPages\"></uib-pagination>\\n' +\n        '        <div class=\"clearfix\"></div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div class=\"bb-grid-action-bar-and-back-to-top\">\\n' +\n        '        <bb-grid-action-bar ng-if=\"locals.multiselect && multiselectActions && updateMultiselectActions\" bb-multiselect-actions=\"multiselectActions\" bb-selections-updated=\"updateMultiselectActions(selections)\">\\n' +\n        '        </bb-grid-action-bar>\\n' +\n        '        <div class=\"bb-table-backtotop\" data-bbauto-field=\"BackToTopButton\" ng-show=\"locals.isScrolled\" ng-click=\"locals.backToTop();\">\\n' +\n        '            <span style=\"float:left\">\\n' +\n        '                <span class=\"fa fa-arrow-up \"></span>\\n' +\n        '                <button type=\"button\" class=\"btn btn-link\">{{resources.grid_back_to_top}}</button>\\n' +\n        '            </span>\\n' +\n        '            <span style=\"float:right\">\\n' +\n        '                <span class=\"fa fa-arrow-up \"></span>\\n' +\n        '                <button type=\"button\" class=\"btn btn-link\">{{resources.grid_back_to_top}}</button>\\n' +\n        '            </span>\\n' +\n        '            <div class=\"clearfix\"></div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/gridtoolbar.html',\n        '<div class=\"bb-grid-toolbar-container\">\\n' +\n        '    <div class=\"clearfix toolbar bb-table-toolbar\">\\n' +\n        '        <button type=\"button\" data-bbauto-field=\"AddButton\" class=\"bb-grid-toolbar-btn btn-success btn\" ng-show=\"toolbarLocals.hasAdd\" ng-click=\"options.onAddClick()\">\\n' +\n        '            <i class=\"fa fa-plus-circle\"></i>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\" ng-show=\"options.onAddClickLabel\">{{options.onAddClickLabel}}</span>\\n' +\n        '        </button>\\n' +\n        '        <div class=\"bb-grid-toolbar-button-container\">\\n' +\n        '            <ng-transclude></ng-transclude>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"bb-search-container search-container\">\\n' +\n        '            <input type=\"text\" placeholder=\"{{resources.grid_search_placeholder}}\" ng-model=\"searchText\" ng-keyup=\"$event.keyCode == 13 && toolbarLocals.applySearchText()\" data-bbauto-field=\"SearchBox\" />\\n' +\n        '            <div class=\"bb-search-icon fa fa-search\" data-bbauto-field=\"SearchButton\" ng-click=\"toolbarLocals.applySearchText()\"></div>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-btn-secondary bb-grid-toolbar-btn bb-column-picker-btn\" data-bbauto-field=\"ColumnPickerButton\" ng-show=\"!options.hideColPicker\" ng-click=\"toolbarLocals.openColumnPicker()\">\\n' +\n        '            <span class=\"fa fa-columns\"></span>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\">{{resources.grid_columns_button}}</span>\\n' +\n        '        </button>\\n' +\n        '        <button type=\"button\" class=\"btn bb-btn-secondary bb-grid-toolbar-btn bb-filter-btn\" ng-class=\"{\\'bb-filters-inline-active\\': options.filtersAreActive}\" data-bbauto-field=\"FilterButton\" ng-show=\"!options.hideFilters\" ng-click=\"toolbarLocals.toggleFilterMenu()\">\\n' +\n        '            <span class=\"fa fa-filter\"></span>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\">{{resources.grid_filters_button}}</span>\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filter-summary-container\">\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filter-inline-container\" ng-hide=\"options.hasInlineFilters && !toolbarLocals.filtersVisible\">\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-top-scrollbar\">\\n' +\n        '        <div></div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/seemore.html',\n        '<div bb-text-expand=\"data\" bb-text-expand-max-length=\"100\" style=\"white-space: pre-wrap\"></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modal.html',\n        '<div class=\"bb-modal-content-wrapper\" ng-transclude></div>');\n    $templateCache.put('sky/templates/modal/modalfooter.html',\n        '<div class=\"modal-footer\" ng-transclude></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modalfooterbutton.html',\n        '<button class=\"btn bb-btn-secondary\" type=\"button\" ng-transclude></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modalfooterbuttoncancel.html',\n        '<button class=\"btn btn-link\" type=\"button\" ng-click=\"$parent.$parent.$dismiss(\\'cancel\\');\" ng-transclude></button>');\n    $templateCache.put('sky/templates/modal/modalfooterbuttonprimary.html',\n        '<button class=\"btn btn-primary\" type=\"submit\" ng-transclude></button>');\n    $templateCache.put('sky/templates/modal/modalheader.html',\n        '<div class=\"modal-header\">\\n' +\n        '    <h1 class=\"bb-dialog-header\" ng-transclude></h1>\\n' +\n        '    <div class=\"fa fa-times close\" ng-click=\"$parent.$parent.$dismiss(\\'close\\');\"></div>\\n' +\n        '    <div bb-help-button bb-help-key=\"{{bbModalHelpKey}}\" bb-set-help-key-override=\"true\" data-bbauto-field=\"ModalHelpButton\" ng-if=\"bbModalHelpKey\"></div>\\n' +\n        '    <div class=\"clearfix\"></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/navbar/navbar.html',\n        '<nav class=\"navbar navbar-default bb-navbar\" ng-transclude></nav>');\n    $templateCache.put('sky/templates/page/page.html',\n        '<section ng-if=\"locals.noPageStatusSpecified() || bbPageStatus === locals.pageStatuses.LOADED\">\\n' +\n        '    <div ng-transclude ng-init=\"locals.onShowing()\"></div>\\n' +\n        '</section>\\n' +\n        '<section class=\"container-fluid bb-page-content-column-container\" ng-show=\"bbPageStatus === locals.pageStatuses.NOT_AUTHORIZED\">\\n' +\n        '    <div class=\"row\">\\n' +\n        '        <section class=\"bb-page-content-column col-xs-12 text-center\">\\n' +\n        '            <div class=\"m\">\\n' +\n        '                <h3>\\n' +\n        '                    {{resources.page_noaccess_header}}\\n' +\n        '                </h3>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-page-noaccess-description\">{{resources.page_noaccess_description}}</div>\\n' +\n        '            <div class=\"m-lg\">\\n' +\n        '                <button type=\"button\" class=\"btn btn-lg btn-primary\" ng-click=\"locals.navigateAway()\" data-bbauto-field=\"NavigateAwayButton\">\\n' +\n        '                    {{resources.page_noaccess_button}}\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </section>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/pagesummary/pagesummary.directive.html',\n        '<div class=\"bb-page-header\">\\n' +\n        '  <div class=\"container-fluid\">\\n' +\n        '    <div class=\"bb-page-summary-alert\"></div>\\n' +\n        '    <div class=\"row\">\\n' +\n        '      <div class=\"bb-page-summary-left col-xs-12\" ng-class=\"bbPageSummary.getPageSummaryLeftCls()\">\\n' +\n        '        <div class=\"bb-page-summary-image\" ng-show=\"bbPageSummary.imageCtrl\"></div>\\n' +\n        '        <div>\\n' +\n        '          <h1 class=\"bb-page-summary-title\" ng-show=\"bbPageSummary.titleCtrl\"></h1>\\n' +\n        '          <h2 class=\"bb-page-summary-subtitle\" ng-show=\"bbPageSummary.subtitleCtrl\"></h2>\\n' +\n        '          <div class=\"bb-page-summary-status\" ng-show=\"bbPageSummary.statusCtrl\"></div>\\n' +\n        '          <div class=\"bb-page-summary-key-info-xs\"></div>\\n' +\n        '          <div class=\"bb-page-summary-content\"></div>\\n' +\n        '        </div>\\n' +\n        '      </div>\\n' +\n        '      <div class=\"bb-page-summary-key-info-sm col-sm-3 hidden-xs\" ng-class=\"bbPageSummary.getKeyInfoCls()\">\\n' +\n        '        <div class=\"bb-page-summary-key-info\"></div>\\n' +\n        '      </div>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '  <ng-transclude></ng-transclude>\\n' +\n        '</div>\\n' +\n        '<div class=\"bb-page-summary-action-bar\"></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/popover/popup.html',\n        '<div class=\"popover {{placement}}\"\\n' +\n        '    tooltip-animation-class=\"fade\"\\n' +\n        '    uib-tooltip-classes\\n' +\n        '    ng-class=\"{ in: isOpen() }\">\\n' +\n        '  <div class=\"arrow\"></div>\\n' +\n        '\\n' +\n        '  <div class=\"popover-inner\">\\n' +\n        '    <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\\n' +\n        '    <div class=\"popover-content\"\\n' +\n        '        uib-tooltip-template-transclude=\"contentExp()\"\\n' +\n        '        tooltip-template-transclude-scope=\"originScope()\"></div>\\n' +\n        '  </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/searchfield/choices.html',\n        '<ul class=\"ui-select-choices ui-select-choices-content dropdown-menu\">\\n' +\n        '  <li class=\"bb-searchfield-no-records\"></li>\\n' +\n        '</ul>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabs/tab.html',\n        '<div ng-hide=\"!tabsInitialized\" data-bbauto-field=\"{{bbTabAutomationId}}\" class=\"responsiveTabControl\">\\n' +\n        '    <ul ng-transclude>\\n' +\n        '\\n' +\n        '    </ul>\\n' +\n        '</div>');\n    $templateCache.put('sky/templates/tabset/addbutton.html',\n        '<button ng-click=\"bbTabAdd()\" type=\"button\" class=\"bb-tab-button-wrap btn bb-tab-button-add bb-btn-secondary\">\\n' +\n        '  <span class=\"btn bb-btn-secondary\"><i class=\"fa fa-lg fa-plus-circle\"></i></span>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/dropdown.html',\n        '<div class=\"bb-tabset-dropdown nav nav-tabs\" uib-dropdown ng-show=\"bbTabsetOptions.isSmallScreen &amp;&amp; bbTabsetOptions.tabCount > 1\">\\n' +\n        '  <button type=\"button\" class=\"btn btn-primary bb-tab-dropdown-button\" uib-dropdown-toggle><div class=\"bb-tab-header-text\">{{bbTabsetOptions.selectedTabHeader}}</div><i class=\"fa fa-caret-down\"></i></button>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/openbutton.html',\n        '<button ng-click=\"bbTabOpen()\" type=\"button\" class=\"bb-tab-button-wrap bb-tab-button-open btn bb-btn-secondary\">\\n' +\n        '  <span class=\"btn bb-btn-secondary\"><i class=\"fa fa-lg fa-folder-open-o\"></i></span>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/tabbutton.html',\n        '<li class=\"bb-tab-button\"></li>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/container.html',\n        '<div></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/ellipsis.html',\n        '<span class=\"bb-text-expand-ellipsis\">...</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/expandmodal.html',\n        '<bb-modal>\\n' +\n        '  <bb-modal-header>\\n' +\n        '    {{expandCtrl.headerContent}}\\n' +\n        '  </bb-modal-header>\\n' +\n        '  <div class=\"modal-form\">\\n' +\n        '    <div bb-modal-body>\\n' +\n        '      <div>\\n' +\n        '        <span class=\"bb-text-expand-text\">{{expandCtrl.textExpandContent}}</span>\\n' +\n        '      </div>\\n' +\n        '    </div>\\n' +\n        '    <bb-modal-footer>\\n' +\n        '      <bb-modal-footer-button-cancel>{{::expandCtrl.closeText}}</bb-modal-footer-button-cancel>\\n' +\n        '    </bb-modal-footer>\\n' +\n        '  </div>\\n' +\n        '</bb-modal>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/seemore.html',\n        '<button type=\"button\" class=\"btn bb-btn-link-inline bb-text-expand-see-more\"></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/space.html',\n        '<span class=\"bb-text-expand-space\"> </span>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/text.html',\n        '<span class=\"bb-text-expand-text\"></span>\\n' +\n        '');\n    $templateCache.put('sky/templates/tiles/tile.html',\n        '<section ng-class=\"isCollapsed ? \\'collapsed\\' : \\'collapsible\\'\" class=\"bb-tile\">\\n' +\n        '    <div bb-scroll-into-view=\"scrollIntoView\">\\n' +\n        '        <div class=\"bb-tile-title\" ng-click=\"titleClick()\">\\n' +\n        '            <div class=\"bb-tile-header-with-content\">\\n' +\n        '                <h2 class=\"bb-tile-header\">{{tileHeader}}</h2>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-tile-header-column-tools\">\\n' +\n        '                <div class=\"bb-tile-tools\">\\n' +\n        '                    <button type=\"button\" ng-class=\"\\'fa-chevron-\\' + (isCollapsed ? \\'down\\' : \\'up\\')\" class=\"fa bb-tile-chevron\"></button>\\n' +\n        '                    <button type=\"button\" ng-if=\"hasSettings\" class=\"bb-tile-settings bb-icon bb-icon-config\" ng-click=\"$event.stopPropagation();bbTileSettingsClick();\"></button>\\n' +\n        '                    <i class=\"bb-tile-grab-handle glyphicon glyphicon-th\" ng-click=\"$event.stopPropagation()\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div uib-collapse=\"isCollapsed\" class=\"bb-tile-content\" ng-transclude>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/tiles/tiledashboard.html',\n        '<div class=\"row\">\\n' +\n        '  <div class=\"col-md-6 bb-page-content-tile-column bb-page-content-tile-column-sortable\" data-dashboard-column=\"1\">\\n' +\n        '    <div ng-repeat=\"tile in tiles\" data-tile-id=\"{{tile.id}}\" data-ui-view=\"{{tile.view_name}}\" id=\"{{tile.view_name}}\">\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '\\n' +\n        '  <div class=\"col-md-6 bb-page-content-tile-column bb-page-content-tile-column-sortable\" data-dashboard-column=\"2\">\\n' +\n        '  </div>\\n' +\n        '</div>');\n    $templateCache.put('sky/templates/tiles/tileheadercheck.html',\n        '<i class=\"fa fa-check bb-tile-header-check\"></i>');\n    $templateCache.put('sky/templates/tiles/tileheadercontent.html',\n        '<div class=\"bb-tile-header-content\" ng-transclude></div>');\n}]);\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.alert', ['sky.alert.directive']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.avatar', ['sky.avatar.config', 'sky.avatar.directive']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.error', ['sky.error.directive', 'sky.errormodal.service']);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.pagesummary', []);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbActionBar() {\n        return {\n            controller: angular.noop,\n            controllerAs: 'bbActionBar',\n            bindToController: true,\n            scope: {},\n            transclude: true,\n            restrict: 'E',\n            templateUrl: 'sky/templates/actionbar/actionbar.html'\n        };\n    }\n\n    function bbActionBarItemGroup(bbResources, bbMediaBreakpoints) {\n        return {\n            replace: true,\n            transclude: true,\n            controller: function () {\n                var vm = this;\n\n                if (vm.title === null || angular.isUndefined(vm.title)) {\n                    vm.title = bbResources.action_bar_actions;\n                }\n            },\n            controllerAs: 'bbActionBarItemGroup',\n            bindToController: {\n                title: '=?bbActionBarItemGroupTitle'\n            },\n            restrict: 'E',\n            scope: {},\n            link: function ($scope, el) {\n                function mediaBreakpointHandler(breakpoints) {\n                    if (breakpoints.xs) {\n                        el.find('.bb-action-bar-buttons > ng-transclude').appendTo(el.find('.bb-action-bar-dropdown > .dropdown > ul'));\n                    } else {\n                        el.find('.bb-action-bar-dropdown .dropdown > ul > ng-transclude').appendTo(el.find('.bb-action-bar-buttons'));\n                    }\n                }\n\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                $scope.$on('$destroy', function () {\n                    bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                });\n            },\n            templateUrl: 'sky/templates/actionbar/actionbaritemgroup.html'\n        };\n    }\n\n    bbActionBarItemGroup.$inject = ['bbResources', 'bbMediaBreakpoints'];\n\n    function bbActionBarItem(bbMediaBreakpoints) {\n        return {\n            replace: true,\n            controller: angular.noop,\n            controllerAs: 'bbActionBarItem',\n            bindToController: true,\n            scope: {},\n            require: '?^bbActionBarItemGroup',\n            transclude: true,\n            restrict: 'E',\n            link: function ($scope, el, attrs, groupCtrl) {\n\n                function mediaBreakpointHandler(breakpoints) {\n                    if (breakpoints.xs) {\n                        if (!el.parent().is('li')) {\n                            el.wrap('<li></li>');\n                        }\n\n                    } else {\n                        if (el.parent().is('li')) {\n                            el.unwrap();\n                        }\n                    }\n                }\n\n                if (groupCtrl !== null) {\n                    bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                    $scope.$on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                        //get rid of wrapper on destroy\n                        if (el.parent().is('li')) {\n                            el.unwrap();\n                        }\n                    });\n                }\n            },\n            templateUrl: 'sky/templates/actionbar/actionbaritem.html'\n        };\n    }\n\n    bbActionBarItem.$inject = ['bbMediaBreakpoints'];\n\n    angular.module('sky.actionbar', ['sky.resources', 'sky.mediabreakpoints', 'ui.bootstrap.dropdown'])\n        .directive('bbActionBar', bbActionBar)\n        .directive('bbActionBarItemGroup', bbActionBarItemGroup)\n        .directive('bbActionBarItem', bbActionBarItem);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbAlert() {\n        function Controller() {\n\n        }\n\n        function link(scope, el, attrs, vm) {\n            vm.close = function () {\n                vm.bbAlertClosed = true;\n            };\n        }\n\n        return {\n            restrict: 'E',\n            controller: Controller,\n            controllerAs: 'bbAlert',\n            bindToController: {\n                bbAlertType: '@',\n                bbAlertCloseable: '@',\n                bbAlertClosed: '='\n            },\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/alert/alert.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.alert.directive', ['sky.resources'])\n        .directive('bbAlert', bbAlert);\n}());\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.autofocus', [])\n        .directive('bbAutofocus', ['$timeout', function ($timeout) {\n            return {\n                restrict: 'A',\n                link: function ($scope, $element) {\n                    /*jslint unparam: true */\n                    $timeout(function () {\n                        $element.focus();\n                    }, 500);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function getBaseSettings(bbAutoNumericConfig, configType) {\n        var baseSettings,\n            configSettings;\n\n        baseSettings = angular.extend(\n            {},\n            $.fn.autoNumeric.defaults,\n            bbAutoNumericConfig.number\n        );\n\n        if (configType) {\n            configSettings = bbAutoNumericConfig[configType];\n        }\n\n        if (configSettings) {\n            angular.extend(baseSettings, configSettings);\n        }\n\n        return baseSettings;\n    }\n\n    angular.module('sky.autonumeric', ['sky.resources', 'sky.window'])\n        .constant('bbAutonumericConfig', {\n            number: {\n                aSep: ',',\n                dGroup: 3,\n                aDec: '.',\n                pSign: 'p',\n                mDec: 2\n            },\n            money: {\n                aSign: '$'\n            }\n        })\n        .directive('bbAutonumeric', ['$timeout', 'bbAutonumericConfig', 'bbWindow', function ($timeout, bbAutoNumericConfig, bbWindow) {\n            return {\n                require: 'ngModel',\n                restrict: 'A',\n                link: function ($scope, el, attrs, ngModel) {\n                    var customSettings = {},\n                        isIosUserAgent = bbWindow.isIosUserAgent();\n\n                    function applySettings() {\n                        el.autoNumeric('update', angular.extend({}, getBaseSettings(bbAutoNumericConfig, attrs.bbAutonumeric), customSettings));\n                    }\n\n                    function applyCssSettings(el) {\n                        if (attrs.bbAutonumeric) {\n                            el.addClass('bb-autonumeric-' + attrs.bbAutonumeric);\n                        }\n                    }\n\n                    function autonumericChange() {\n                        return $scope.$apply(function () {\n\n                            var value = parseFloat(el.autoNumeric('get'));\n\n                            if (isNaN(value)) {\n                                value = null;\n                            }\n                            return ngModel.$setViewValue(value);\n                        });\n                    }\n\n                    if (attrs.bbAutonumericSettings) {\n                        $scope.$watch(attrs.bbAutonumericSettings, function (newValue) {\n                            customSettings = newValue || {};\n                            applySettings();\n                        }, true);\n                    }\n\n                    el.autoNumeric(getBaseSettings(bbAutoNumericConfig, attrs.bbAutonumeric));\n                    applyCssSettings(el);\n\n                    // If a valid number, update the autoNumeric value.\n                    // Also handles the model being updated, but being in correct (usually a paste).\n                    // In that case, updates the model to what the autoNumeric plugin's value.\n                    $scope.$watch(attrs.ngModel, function (newValue, oldValue) {\n                        var getValue,\n                            selectionStart;\n                        if (newValue !== undefined && newValue !== null && !isNaN(newValue)) {\n\n                            if (parseFloat(newValue) !== parseFloat(oldValue)) {\n\n                                selectionStart = el[0].selectionStart;\n                            }\n\n                            el.autoNumeric('set', newValue);\n                            getValue = el.autoNumeric('get');\n                            if (parseFloat(getValue) !== parseFloat(newValue)) {\n                                $timeout(autonumericChange);\n                            } else if (el[0] && angular.isFunction(el[0].setSelectionRange) && angular.isDefined(selectionStart)) {\n                                $timeout(function () {\n                                    el[0].setSelectionRange(selectionStart, selectionStart);\n                                });\n                            }\n                        } else if (newValue === null) {\n                            el.val(null);\n\n                        }\n                    });\n\n                    el.on('keydown', function (event) {\n                        if (event.which === 13) {\n                            autonumericChange();\n                        }\n                    });\n\n                    el.on('change paste onpaste', function () {\n                        autonumericChange();\n\n                    });\n\n                    // When focusing in textbox, select all.  This is to workaround not having placeholder text for autonumeric.\n                    /*\n                        istanbul ignore next: the test for this code isn't passing on IE 10 on BrowserStack in automated mode.\n                        This isn't mission-critical so I'm just ignoring it for now.\n                    */\n                    el.on('focusin.bbAutonumeric', function () {\n                        $timeout(function () {\n                            // Check to ensure the field still has focus once the $timeout callback is executed.\n                            // https://github.com/blackbaud/skyux/issues/64\n                            if (el.is(':focus')) {\n                                if (!isIosUserAgent) {\n                                    el.select();\n                                } else {\n                                    //use setSelectionRange instead of select because select in a timeout does not work with iOS\n                                    el[0].setSelectionRange(0, 9999);\n                                }\n                            }\n                        });\n                    });\n\n                }\n            };\n        }])\n        .filter('bbAutonumeric', ['bbAutonumericConfig', 'bbResources', function (bbAutonumericConfig, bbResources) {\n            return function (input, configType, abbreviate) {\n                var aSign,\n                    dividend,\n                    mDec,\n                    formatted,\n                    settings,\n                    suffix,\n                    tempEl;\n\n                if (input === null || angular.isUndefined(input)) {\n                    return '';\n                }\n\n                if (isNaN(input)) {\n                    return input;\n                }\n\n\n                tempEl = $('<span></span>');\n\n                settings = getBaseSettings(bbAutonumericConfig, configType);\n\n                if (abbreviate) {\n                    if (settings.pSign === 's') {\n                        // The suffix needs to go between the number and the currency symbol, so the currency\n                        // symbol has to be left off and appended after the number is formatted.\n                        aSign = settings.aSign;\n                        settings.aSign = '';\n                    }\n\n                    input = Math.round(input);\n\n                    if (input >= 1000000000) {\n                        dividend = 100000000;\n                        suffix = bbResources.autonumeric_abbr_billions;\n                    } else if (input >= 1000000) {\n                        dividend = 100000;\n                        suffix = bbResources.autonumeric_abbr_millions;\n                    } else if (input >= 10000) {\n                        dividend = 100;\n                        suffix = bbResources.autonumeric_abbr_thousands;\n                    }\n\n                    if (suffix) {\n                        input = Math.floor(input / dividend) / 10;\n                        mDec = Math.floor(input) === input ? 0 : 1;\n                    } else {\n                        mDec = 0;\n                    }\n\n                    settings.mDec = mDec;\n                }\n\n                tempEl.autoNumeric(settings);\n                tempEl.autoNumeric('set', input);\n\n                formatted = tempEl.text();\n\n                if (suffix) {\n                    formatted += suffix;\n                }\n\n                if (abbreviate && settings.pSign === 's' && aSign) {\n                    formatted += aSign;\n                }\n\n                return formatted;\n            };\n        }]);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var bbAvatarConfig = {\n        maxFileSize: 500000\n    };\n\n    angular.module('sky.avatar.config', [])\n        .constant('bbAvatarConfig', bbAvatarConfig);\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function bbAvatar($filter, $templateCache, $window, bbAvatarConfig, bbErrorModal, bbFormat, bbPalette, bbResources) {\n        function link(scope, el, attrs, vm) {\n            var blobUrl,\n                templateLoaded;\n\n            function setImageUrl(url) {\n                el.find('.bb-avatar-image').css('background-image', 'url(' + url + ')');\n            }\n\n            function getInitial(name) {\n                return name.charAt(0).toUpperCase();\n            }\n\n            function getInitials(name) {\n                var initials,\n                    nameSplit;\n\n                if (name) {\n                    nameSplit = name.split(' ');\n                    initials = getInitial(nameSplit[0]);\n\n                    /* istanbul ignore else this is tested through a visual regression test */\n                    if (nameSplit.length > 1) {\n                        initials += getInitial(nameSplit[nameSplit.length - 1]);\n                    }\n                }\n\n                return initials;\n            }\n\n            function getPlaceholderColor(name) {\n                var colorIndex,\n                    colors = bbPalette.getColorSequence(6),\n                    seed;\n\n                if (name) {\n                    // Generate a unique-ish color based on the record name.  This is deterministic\n                    // so that a given name will always generate the same color.\n                    seed = name.charCodeAt(0) + name.charCodeAt(name.length - 1) + name.length;\n                    colorIndex = Math.abs(seed % colors.length);\n                } else {\n                    colorIndex = 0;\n                }\n\n                return colors[colorIndex];\n            }\n\n            function drawPlaceolderImage() {\n                var canvas,\n                    context,\n                    devicePixelRatio,\n                    fontSize = \"46px\",\n                    initials,\n                    name,\n                    size = 100;\n\n                name = vm.bbAvatarName;\n                initials = getInitials(name);\n\n                canvas = el.find('.bb-avatar-initials')[0];\n                context = canvas.getContext('2d');\n\n                devicePixelRatio = $window.devicePixelRatio;\n\n                /* istanbul ignore else */\n                if (devicePixelRatio) {\n                    $(canvas)\n                        .attr('width', size * devicePixelRatio)\n                        .attr('height', size * devicePixelRatio);\n\n                    context.scale(devicePixelRatio, devicePixelRatio);\n                }\n\n                context.fillStyle = getPlaceholderColor(name);\n                context.fillRect(0, 0, canvas.width, canvas.height);\n\n                if (initials) {\n                    context.font = fontSize + ' Arial';\n                    context.textAlign = 'center';\n                    context.fillStyle = '#FFF';\n                    context.fillText(initials, size * 0.5, size * (2 / 3));\n                }\n            }\n\n            function revokeBlobUrl() {\n                if (blobUrl) {\n                    $window.URL.revokeObjectURL(blobUrl);\n                    blobUrl = null;\n                }\n            }\n\n            function loadPhoto() {\n                var src,\n                    url;\n\n                revokeBlobUrl();\n\n                if (templateLoaded) {\n                    src = vm.bbAvatarSrc;\n\n                    if (src) {\n                        if (src instanceof $window.File) {\n                            url = $window.URL.createObjectURL(src);\n\n                            // Keep the last blob URL around so we can revoke it later.\n                            // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\n                            blobUrl = url;\n                        } else {\n                            url = src;\n                        }\n\n                        setImageUrl(url);\n                    } else {\n                        drawPlaceolderImage();\n                    }\n                }\n            }\n\n            function handleInvalidFileDrop(rejectedFile) {\n                var errorDescription,\n                    errorTitle,\n                    maxFileSizeFormatted;\n\n                if (rejectedFile.type.toUpperCase().indexOf('IMAGE/') !== 0) {\n                    errorDescription = bbResources.avatar_error_not_image_description;\n                    errorTitle = bbResources.avatar_error_not_image_title;\n                } else {\n                    maxFileSizeFormatted = $filter('bbFileSize')(bbAvatarConfig.maxFileSize);\n\n                    errorDescription = bbFormat.formatText(bbResources.avatar_error_too_large_description, maxFileSizeFormatted);\n                    errorTitle = bbResources.avatar_error_too_large_title;\n                }\n\n                bbErrorModal.open({\n                    errorDescription: errorDescription,\n                    errorTitle: errorTitle\n                });\n            }\n\n            vm.onTemplateLoad = function () {\n                templateLoaded = true;\n            };\n\n            vm.photoDrop = function (files, rejectedFiles) {\n                if (angular.isArray(rejectedFiles) && rejectedFiles.length > 0) {\n                    handleInvalidFileDrop(rejectedFiles[0]);\n                } else {\n                    vm.bbAvatarChange({\n                        file: files[0]\n                    });\n                }\n            };\n\n            vm.showInitials = function () {\n                return !!(vm.bbAvatarName && !vm.bbAvatarSrc);\n            };\n\n            if (attrs.bbAvatarChange) {\n                vm.canChange = true;\n            }\n\n            scope.$watch(function () {\n                return templateLoaded;\n            }, loadPhoto);\n\n            scope.$watch(function () {\n                return vm.bbAvatarSrc;\n            }, loadPhoto);\n\n            scope.$watch(function () {\n                return vm.bbAvatarName;\n            }, loadPhoto);\n\n            scope.$on('$destroy', function () {\n                revokeBlobUrl();\n            });\n\n            vm.maxFileSize = bbAvatarConfig.maxFileSize;\n        }\n\n        function template(el) {\n            var dropEl;\n\n            el.html($templateCache.get('sky/templates/avatar/avatar.directive.html'));\n\n            dropEl = el.find('.bb-avatar-file-drop');\n\n            dropEl.attr('bb-file-drop-max-size', bbAvatarConfig.maxFileSize);\n        }\n\n        return {\n            scope: {},\n            bindToController: {\n                bbAvatarSrc: '=',\n                bbAvatarName: '=',\n                bbAvatarChange: '&'\n            },\n            controller: angular.noop,\n            controllerAs: 'bbAvatar',\n            link: link,\n            template: template\n        };\n    }\n\n    bbAvatar.$inject = ['$filter', '$templateCache', '$window', 'bbAvatarConfig', 'bbErrorModal', 'bbFormat', 'bbPalette', 'bbResources'];\n\n    angular.module('sky.avatar.directive', ['sky.avatar.config', 'sky.error', 'sky.format', 'sky.palette', 'sky.resources'])\n        .directive('bbAvatar', bbAvatar);\n}(jQuery));\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.check', [])\n        .directive('bbCheck', ['$templateCache', function ($templateCache) {\n            function createEl(name) {\n                return angular.element($templateCache.get('sky/templates/check/' + name + '.html'));\n            }\n\n            return {\n                link: function (scope, el, attr) {\n                    var labelEl = el.parent('label'),\n                        styledEl,\n                        typeClass;\n\n                    if (labelEl.length < 1) {\n                        el.wrap(createEl('wrapper'));\n                    } else {\n                        labelEl.addClass('bb-check-wrapper');\n                    }\n                    if (attr.type === 'radio') {\n                        typeClass = 'bb-check-radio';\n                    } else {\n                        typeClass = 'bb-check-checkbox';\n                    }\n\n                    styledEl = createEl('styled');\n                    styledEl.addClass(typeClass);\n\n                    el.after(styledEl);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var SEARCH_PROPS = ['title', 'description'];\n\n    function bbChecklist(bbChecklistUtility) {\n        return {\n            replace: true,\n            restrict: 'E',\n            transclude: true,\n            templateUrl: 'sky/templates/checklist/checklist.html',\n            scope: {\n                bbChecklistItems: '=',\n                bbChecklistSelectedItems: '=',\n                bbChecklistFilterCallback: '=',\n                bbChecklistIncludeSearch: '=',\n                bbChecklistSearchDebounce: '=',\n                bbChecklistSearchPlaceholder: '@',\n                bbChecklistNoItemsMessage: '@',\n                bbChecklistAutomationField: '=',\n                bbChecklistCategories: '=',\n                bbChecklistMode: '@'\n            },\n            controller: ['$scope', function ($scope) {\n                var locals = $scope.locals = {};\n\n                this.setColumns = function (columns) {\n                    locals.columns = columns;\n                };\n            }],\n            link: function ($scope, el, attrs) {\n                var filterLocal = angular.isDefined(attrs.bbChecklistFilterLocal),\n                    locals = $scope.locals;\n\n                function itemMatchesCategory(item, category) {\n                    return !category || item.category === category;\n                }\n\n                function itemMatchesFilter(item, category, searchTextUpper) {\n                    var p,\n                        i,\n                        len,\n                        val;\n\n                    if (itemMatchesCategory(item, category)) {\n                        if (!searchTextUpper) {\n                            return true;\n                        }\n\n                        for (i = 0, len = SEARCH_PROPS.length; i < len; i++) {\n                            p = SEARCH_PROPS[i];\n                            if (item.hasOwnProperty(p)) {\n                                val = item[p];\n\n                                if (angular.isString(val) && val.toUpperCase().indexOf(searchTextUpper) >= 0) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n\n                function invokeFilterLocal() {\n                    var filteredItems,\n                        i,\n                        item,\n                        items = $scope.bbChecklistItems,\n                        n,\n                        searchTextUpper = (locals.searchText || '').toUpperCase(),\n                        selectedCategory = locals.selectedCategory;\n\n                    if (!searchTextUpper && !selectedCategory) {\n                        filteredItems = items.slice(0);\n                    } else {\n                        filteredItems = [];\n\n                        for (i = 0, n = items.length; i < n; i++) {\n                            item = items[i];\n\n                            if (itemMatchesFilter(item, selectedCategory, searchTextUpper)) {\n                                filteredItems.push(item);\n                            }\n                        }\n                    }\n\n                    locals.filteredItems = filteredItems;\n                }\n\n                function invokeFilter() {\n                    if (filterLocal) {\n                        invokeFilterLocal();\n                    } else if ($scope.bbChecklistFilterCallback) {\n                        $scope.bbChecklistFilterCallback({\n                            searchText: locals.searchText,\n                            category: locals.selectedCategory\n                        });\n                    }\n                }\n\n                $scope.bbChecklistSelectedItems = $scope.bbChecklistSelectedItems || [];\n\n                locals.selectAll = function () {\n                    var i,\n                        item,\n                        items = locals.filteredItems,\n                        selected = $scope.bbChecklistSelectedItems;\n\n                    for (i = 0; i < items.length; i += 1) {\n                        item = items[i];\n                        if (!bbChecklistUtility.contains(selected, item)) {\n                            bbChecklistUtility.add(selected, item);\n                        }\n                    }\n                };\n\n                locals.clear = function () {\n                    var i,\n                        item,\n                        items = locals.filteredItems,\n                        selected = $scope.bbChecklistSelectedItems;\n\n                    for (i = 0; i < items.length; i += 1) {\n                        item = items[i];\n                        bbChecklistUtility.remove(selected, item);\n                    }\n                };\n\n                locals.rowClicked = function (item) {\n                    var selected = $scope.bbChecklistSelectedItems;\n\n                    if (!bbChecklistUtility.contains(selected, item)) {\n                        bbChecklistUtility.add(selected, item);\n                    } else {\n                        bbChecklistUtility.remove(selected, item);\n                    }\n                };\n\n                locals.filterByCategory = function (selectedCategory) {\n                    locals.selectedCategory = selectedCategory;\n                    invokeFilter();\n                };\n\n                $scope.$watch('bbChecklistItems', function () {\n                    locals.filteredItems = $scope.bbChecklistItems;\n                    locals.highlightRefresh = new Date().getTime();\n                });\n\n                $scope.$watch('locals.searchText', function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        invokeFilter();\n                    }\n                });\n            }\n        };\n    }\n\n    bbChecklist.$inject = ['bbChecklistUtility'];\n\n    angular.module('sky.checklist', ['sky.check', 'sky.checklist.column', 'sky.checklist.columns', 'sky.checklist.model', 'sky.checklist.utility', 'sky.resources'])\n        .directive('bbChecklist', bbChecklist);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbChecklistColumn() {\n        return {\n            require: '^bbChecklistColumns',\n            restrict: 'E',\n            scope: {\n                bbChecklistColumnCaption: \"=\",\n                bbChecklistColumnField: \"=\",\n                bbChecklistColumnClass: \"=\",\n                bbChecklistColumnWidth: \"=\",\n                bbChecklistColumnAutomationId: \"=\"\n            },\n            link: function ($scope, element, attrs, bbChecklistColumns) {\n                /*jslint unparam: true */\n                var column = {\n                    caption: $scope.bbChecklistColumnCaption,\n                    field: $scope.bbChecklistColumnField,\n                    'class': $scope.bbChecklistColumnClass,\n                    width: $scope.bbChecklistColumnWidth,\n                    automationId: $scope.bbChecklistColumnAutomationId\n                };\n\n                bbChecklistColumns.addColumn(column);\n            }\n        };\n    }\n    \n    angular.module('sky.checklist.column', ['sky.checklist.columns'])\n        .directive('bbChecklistColumn', bbChecklistColumn);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function bbChecklistColumns() {\n        return {\n            require: '^bbChecklist',\n            restrict: 'E',\n            scope: {\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.columns = [];\n\n                this.addColumn = function (column) {\n                    $scope.columns.push(column);\n                };\n            }],\n            link: function ($scope, element, attrs, bbChecklist) {\n                /*jslint unparam: true */\n                bbChecklist.setColumns($scope.columns);\n            }\n        };\n    }\n    \n    angular.module('sky.checklist.columns', [])\n        .directive('bbChecklistColumns', bbChecklistColumns);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function checklistModel($compile, $parse, bbChecklistUtility) {\n        // http://stackoverflow.com/a/19228302/1458162\n        function postLinkFn(scope, elem, attrs) {\n            var getter,\n                setter,\n                value;\n\n            // compile with `ng-model` pointing to `checked`\n            $compile(elem)(scope);\n\n            // getter / setter for original model\n            getter = $parse(attrs.checklistModel);\n            setter = getter.assign;\n\n            // value added to list\n            value = $parse(attrs.checklistValue)(scope.$parent);\n\n            // watch UI checked change\n            scope.$watch('checked', function (newValue, oldValue) {\n                var current;\n\n                if (newValue === oldValue) {\n                    return;\n                }\n\n                current = getter(scope.$parent);\n\n                if (newValue === true) {\n                    setter(scope.$parent, bbChecklistUtility.add(current, value));\n                } else {\n                    setter(scope.$parent, bbChecklistUtility.remove(current, value));\n                }\n            });\n\n            // watch original model change\n            scope.$parent.$watch(attrs.checklistModel, function (newArr) {\n                scope.checked = bbChecklistUtility.contains(newArr, value);\n            }, true);\n        }\n\n        return {\n            restrict: 'A',\n            priority: 1000,\n            terminal: true,\n            scope: true,\n            compile: function (tElement, tAttrs) {\n                if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {\n                    throw 'checklist-model should be applied to `input[type=\"checkbox\"]`.';\n                }\n\n                if (!tAttrs.checklistValue) {\n                    throw 'You should provide `checklist-value`.';\n                }\n\n                // exclude recursion\n                tElement.removeAttr('checklist-model');\n\n                // local scope var storing individual checkbox model\n                tElement.attr('ng-model', 'checked');\n\n                return postLinkFn;\n            }\n        };\n    }\n    \n    checklistModel.$inject = ['$compile', '$parse', 'bbChecklistUtility'];\n    \n    angular.module('sky.checklist.model', ['sky.checklist.utility'])\n        .directive('checklistModel', checklistModel);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('sky.checklist.utility', [])\n        .factory('bbChecklistUtility', function () {\n            return {\n                \n                contains: function (arr, item) {\n                    var i;\n\n                    if (angular.isArray(arr)) {\n                        for (i = 0; i < arr.length; i += 1) {\n                            if (angular.equals(arr[i], item)) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                },\n\n                // add\n                add: function (arr, item) {\n                    var i;\n\n                    arr = angular.isArray(arr) ? arr : [];\n                    for (i = 0; i < arr.length; i += 1) {\n                        if (angular.equals(arr[i], item)) {\n                            return arr;\n                        }\n                    }\n                    arr.push(item);\n                    return arr;\n                },\n\n                // remove\n                remove: function (arr, item) {\n                    var i;\n\n                    if (angular.isArray(arr)) {\n                        for (i = 0; i < arr.length; i += 1) {\n                            if (angular.equals(arr[i], item)) {\n                                arr.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                    return arr;\n                }\n\n            };\n        });\n}());","/* global angular */\n\n(function () {\n    'use strict';\n\n    function getTemplateUrl(name) {\n        return 'sky/templates/contextmenu/' + name + '.html';\n    }\n\n    function bbContextMenu() {\n        return {\n            replace: true,\n            restrict: 'E',\n            transclude: true,\n            templateUrl: getTemplateUrl('contextmenu'),\n            link: function ($scope) {\n                $scope.contextButtonStopPropagation = function ($event) {\n                    $event.stopPropagation();\n                };\n            }\n        };\n    }\n\n    function bbContextMenuItem() {\n        return {\n            restrict: 'E',\n            transclude: true,\n            replace: true,\n            scope: {\n                clickItem: '&bbContextMenuAction'\n            },\n            templateUrl: getTemplateUrl('menuitem')\n        };\n    }\n\n    function bbContextMenuButton() {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: getTemplateUrl('menubutton')\n        };\n    }\n\n    function toggleAccordion($event, $scope) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        $scope.accordionLocals.accordionOpen = !$scope.accordionLocals.accordionOpen;\n    }\n\n    function BBSubmenuController($scope) {\n        var self = this;\n\n        self.toggleAccordion = function ($event) {\n            toggleAccordion($event, $scope);\n        };\n    }\n\n    BBSubmenuController.$inject = ['$scope'];\n\n    function bbSubmenu() {\n        return {\n            controller: 'bbSubmenuController',\n            restrict: 'E',\n            scope: {\n                heading: '=?bbSubmenuHeading'\n            },\n            link: function ($scope, el, attrs) {\n                $scope.accordionLocals = {\n                    accordionOpen: false,\n                    staticHeader: false\n                };\n\n                if (angular.isDefined(attrs.bbSubmenuHeading)) {\n                    $scope.accordionLocals.staticHeader = true;\n                }\n\n                $scope.toggleAccordion = function ($event) {\n                    toggleAccordion($event, $scope);\n                };\n            },\n            transclude: true,\n            templateUrl: getTemplateUrl('submenu')\n        };\n    }\n\n    function bbSubmenuHeading() {\n        return {\n            restrict: 'E',\n            require: '^bbSubmenu',\n            scope: true,\n            link: function ($scope, el, attrs, submenuCtrl) {\n                $scope.toggleAccordion = function ($event) {\n                    submenuCtrl.toggleAccordion($event);\n                };\n            },\n            transclude: true,\n            templateUrl: getTemplateUrl('submenuheading')\n        };\n    }\n\n    angular.module('sky.contextmenu', ['ui.bootstrap.dropdown', 'ui.bootstrap.accordion'])\n        .controller('bbSubmenuController', BBSubmenuController)\n        .directive('bbContextMenu', bbContextMenu)\n        .directive('bbContextMenuItem', bbContextMenuItem)\n        .directive('bbContextMenuButton', bbContextMenuButton)\n        .directive('bbSubmenu', bbSubmenu)\n        .directive('bbSubmenuHeading', bbSubmenuHeading);\n}());\n","/*global angular, jQuery, require */\n\n(function ($) {\n    'use strict';\n\n    var DEFAULT_PROP = '__DEFAULT__',\n        REQUEST_TYPE_DATA = 0,\n        REQUEST_TYPE_RESOURCES = 1,\n        REQUEST_TYPE_TEXT = 2;\n\n    function fillUrls(option, props, urls) {\n        var item,\n            p,\n            url;\n\n        /*istanbul ignore else: sanity check */\n        if (option) {\n            if (angular.isString(option) || option.BB_DATA_POST) {\n                url = option;\n\n                option = {};\n                option[DEFAULT_PROP] = url;\n            }\n\n            for (p in option) {\n                /*istanbul ignore else */\n                if (option.hasOwnProperty(p)) {\n                    item = option[p];\n                    url = item;\n\n                    props.push(p);\n                    urls.push(url);\n                }\n            }\n        }\n    }\n\n    function loadManager(options) {\n        // A service endpoint for tracking loading items.\n\n        var item,\n            loadingItems = [],\n            nonblockingForAdditionalItems = false,\n            result,\n            scope,\n            waitingForFirstItem = false;\n\n        function cancelWaiting() {\n            options.waitForFirstItem = false;\n            options.nonblockWaitForAdditionalItems = false;\n\n            if (nonblockingForAdditionalItems) {\n                nonblockingForAdditionalItems = false;\n                scope.$emit(\"bbEndWait\", { nonblocking: true });\n            }\n\n            if (waitingForFirstItem) {\n                waitingForFirstItem = false;\n                scope.$emit(\"bbEndWait\");\n            }\n        }\n\n        function startNonblockingForAdditionalItems() {\n            nonblockingForAdditionalItems = true;\n            scope.$emit(\"bbBeginWait\", { nonblocking: true });\n        }\n\n        function markCompleted(item) {\n            var i = loadingItems.indexOf(item);\n\n            if (i !== -1) {\n                loadingItems.splice(i, 1);\n                if (loadingItems.length === 0) {\n                    result.isLoading = false;\n\n                    if (nonblockingForAdditionalItems) {\n                        nonblockingForAdditionalItems = false;\n                        scope.$emit(\"bbEndWait\", { nonblocking: true });\n                    }\n                }\n            }\n\n            if (!result.isFirstItemLoaded) {\n                result.isFirstItemLoaded = true;\n                if (waitingForFirstItem) {\n                    waitingForFirstItem = false;\n                    scope.$emit(\"bbEndWait\");\n                }\n            }\n\n            if (result.isLoading && options.nonblockWaitForAdditionalItems && !nonblockingForAdditionalItems) {\n                startNonblockingForAdditionalItems();\n            }\n        }\n\n        function registerItem(item) {\n            if (!result.isLoading) {\n                if (result.isFirstItemLoaded && options.nonblockWaitForAdditionalItems) {\n                    startNonblockingForAdditionalItems();\n                }\n            }\n            loadingItems.push(item);\n            result.isLoading = true;\n        }\n\n        // Initialize values\n        scope = options.scope;\n\n        if (options.load) {\n            item = {\n                name: options.name,\n                load: options.load\n            };\n        }\n\n        result = {\n            isFirstItemLoaded: false,\n            isLoading: false,\n            loadingItems: loadingItems,\n            cancelWaiting: cancelWaiting\n        };\n\n        if (options.waitForFirstItem) {\n            waitingForFirstItem = true;\n            scope.$emit(\"bbBeginWait\");\n        }\n\n        // Start loading any item that is handed directly to the loader.\n        if (item) {\n            // Add the current item to the list.\n            registerItem(item);\n\n            // Start loading the item.\n            result.loaded = item.load().finally(function () {\n                markCompleted(item);\n                scope.$parent.$emit(\"bbData.loadManager.markCompleted\", item);\n            });\n\n            scope.$parent.$emit(\"bbData.loadManager.registerItem\", item);\n        }\n\n        if (options.isAggregate) {\n            // Listen to items being registered by child loadManagers.\n            scope.$on(\"bbData.loadManager.registerItem\", function (e, item) {\n                e.stopPropagation();\n                registerItem(item);\n            });\n\n            // Listen to items being marked completed by child loadManagers.\n            scope.$on(\"bbData.loadManager.markCompleted\", function (e, item) {\n                e.stopPropagation();\n                markCompleted(item);\n            });\n        }\n\n        return result;\n    }\n\n    function bbData($http, $q, $templateCache, bbDataConfig, $window) {\n        function ajaxUrl(url, requestType) {\n            var filter,\n                parts;\n\n            requestType = requestType || 0;\n\n            if ($window.define && $window.define.amd && $window.require) {\n                parts = url.split('?');\n\n                // Grab the portion before the query string and get the fully-qualified URL.\n                url = parts.shift();\n                url = require.toUrl(url);\n\n                // If there was anything after the first question mark, put it back.\n                url += '?' + parts.join('');\n            }\n\n            switch (requestType) {\n            case REQUEST_TYPE_DATA:\n                filter = bbDataConfig.dataUrlFilter;\n                break;\n            case REQUEST_TYPE_RESOURCES:\n                filter = bbDataConfig.resourceUrlFilter;\n                break;\n            case REQUEST_TYPE_TEXT:\n                filter = bbDataConfig.textUrlFilter;\n                break;\n            }\n\n            if (angular.isFunction(filter)) {\n                url = filter(url);\n            }\n\n            return url;\n        }\n\n        function createAjaxPromise(item, isPost, requestType, timeoutPromise) {\n            var data,\n                httpOptions,\n                isGet,\n                textContent,\n                type,\n                url;\n\n            requestType = requestType || 0;\n\n            if (item.BB_DATA_POST || isPost) {\n                data = item.data;\n                type = item.type || 'post';\n                url = item.url;\n            } else {\n                type = 'get';\n                url = item;\n                isGet = true;\n            }\n\n            if (isGet && requestType === REQUEST_TYPE_TEXT) {\n                // Check the Angular template cache using the raw URL first in case the text content is compiled into\n                // the module bundle.\n                textContent = $templateCache.get(url);\n\n                if (textContent) {\n                    return $q(function (resolve) {\n                        resolve({\n                            data: textContent\n                        });\n                    });\n                }\n            }\n\n            url = ajaxUrl(url, requestType);\n\n            httpOptions = {\n                method: type,\n                url: url,\n                cache: requestType !== 0,\n                data: data ? JSON.stringify(data) : null,\n                dataType: requestType !== 0 ? 'text' : 'json',\n                withCredentials: requestType === 0,\n                timeout: timeoutPromise\n            };\n\n            if (data instanceof $window.FormData) {\n                // Angular sets the Content-Type to application/json by default, but when posting FormData\n                // it should clear out the Content-Type and let the browser determine it.\n                // https://uncorkedstudios.com/blog/multipartformdata-file-upload-with-angularjs\n                angular.extend(httpOptions, {\n                    transformRequest: angular.identity,\n                    headers: {\n                        'Content-Type': undefined\n                    }\n                });\n            }\n\n            return $http(httpOptions);\n        }\n\n        function addPromises(items, urls, requestType, timeoutPromise) {\n            var i,\n                n,\n                url;\n\n            if (urls) {\n                for (i = 0, n = urls.length; i < n; i++) {\n                    url = urls[i];\n                    items.push(createAjaxPromise(url, null, requestType, timeoutPromise));\n                }\n            }\n        }\n\n        function nextId() {\n            nextId.index = nextId.index || 0;\n            nextId.index++;\n            return nextId.index;\n        }\n\n        function trackHTTPTimeoutForPromise(fn) {\n            var id = nextId(),\n                promise,\n                httpTimeout = $q.defer();\n\n            trackHTTPTimeoutForPromise[id] = httpTimeout;\n\n            promise = fn(httpTimeout.promise);\n            promise._id = id;\n\n            function clearPromiseId() {\n                delete trackHTTPTimeoutForPromise[id];\n            }\n\n            promise.then(clearPromiseId, clearPromiseId);\n\n            return promise;\n        }\n\n        function loadData(options) {\n            return trackHTTPTimeoutForPromise(function (timeoutPromise) {\n                return $q(function (resolve, reject) {\n                    var dataOption,\n                        dataProps,\n                        dataUrls,\n                        resourcesOption,\n                        resourcesProps,\n                        resourcesUrls,\n                        promises = [],\n                        textOption,\n                        textProps,\n                        textUrls;\n\n                    function success(args) {\n                        var argIndex = 0,\n                            result = {\n                                httpResults: {}\n                            };\n\n                        function addResult(name, props) {\n                            var resultData,\n                                httpResult,\n                                i,\n                                n,\n                                p,\n                                resultItem,\n                                resultItemHttpResults;\n\n                            if (props) {\n                                for (i = 0, n = props.length; i < n; i++) {\n                                    p = props[i];\n                                    httpResult = args[argIndex];\n                                    resultData = httpResult.data;\n\n                                    if (p === DEFAULT_PROP) {\n                                        resultItem = resultData;\n                                        resultItemHttpResults = httpResult;\n                                    } else {\n                                        resultItem = resultItem || {};\n                                        resultItem[p] = resultData;\n\n                                        resultItemHttpResults = resultItemHttpResults || {};\n                                        resultItemHttpResults[p] = httpResult;\n                                    }\n\n                                    argIndex++;\n                                }\n                            }\n\n                            if (angular.isDefined(resultItem)) {\n                                result[name] = resultItem;\n                            }\n\n                            if (angular.isDefined(resultItemHttpResults)) {\n                                result.httpResults[name] = resultItemHttpResults;\n                            }\n                        }\n\n                        addResult('data', dataProps, true);\n                        addResult('resources', resourcesProps);\n                        addResult('text', textProps);\n\n                        resolve(result);\n                    }\n\n                    function failure() {\n                        /*jshint validthis: true */\n                        reject.apply(this, arguments);\n                    }\n\n                    dataOption = options.data;\n                    resourcesOption = options.resources;\n                    textOption = options.text;\n\n                    if (dataOption) {\n                        dataProps = [];\n                        dataUrls = [];\n                        fillUrls(dataOption, dataProps, dataUrls);\n                    }\n\n                    if (resourcesOption) {\n                        resourcesProps = [];\n                        resourcesUrls = [];\n                        fillUrls(resourcesOption, resourcesProps, resourcesUrls);\n                    }\n\n                    if (textOption) {\n                        textProps = [];\n                        textUrls = [];\n                        fillUrls(textOption, textProps, textUrls);\n                    }\n\n                    addPromises(promises, dataUrls, REQUEST_TYPE_DATA, timeoutPromise);\n                    addPromises(promises, resourcesUrls, REQUEST_TYPE_RESOURCES, timeoutPromise);\n                    addPromises(promises, textUrls, REQUEST_TYPE_TEXT, timeoutPromise);\n\n                    $q.all(promises)\n                        .then(success)\n                        .catch(failure);\n                });\n            });\n        }\n\n        return {\n            cancel: function (promise) {\n                if (promise && promise._id && trackHTTPTimeoutForPromise[promise._id]) {\n                    trackHTTPTimeoutForPromise[promise._id].resolve();\n                }\n            },\n            load: function (options) {\n                if (options.loadManager) {\n                    options.loadManager.load = function () {\n                        return loadData(options);\n                    };\n\n                    return loadManager(options.loadManager).loaded;\n                }\n\n                return loadData(options);\n            },\n            loadManager: loadManager,\n            query: function (url, params) {\n                return url + '?' + $.param(params);\n            },\n            post: function (url, data) {\n                return {\n                    url: url,\n                    data: data,\n                    BB_DATA_POST: true\n                };\n            },\n            save: function (options) {\n                return trackHTTPTimeoutForPromise(function (timeoutPromise) {\n                    return createAjaxPromise(options, true, null, timeoutPromise);\n                });\n            }\n        };\n    }\n\n    bbData.$inject = ['$http', '$q', '$templateCache', 'bbDataConfig', '$window'];\n\n    angular.module('sky.data', [])\n        .constant('bbDataConfig', {})\n        .factory('bbData', bbData);\n}(jQuery));\n","/*jshint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n    angular.module('sky.datepicker', ['sky.resources', 'sky.moment', 'ui.bootstrap.datepicker'])\n        .constant('bbDatepickerConfig', {\n            currentCultureDateFormatString: 'MM/dd/yyyy',\n            showWeeks: false,\n            startingDay: 0,\n            minDate: '',\n            maxDate: ''\n        })\n        .directive('bbDatepicker', ['bbResources', 'bbDatepickerConfig', 'bbDatepickerParser', '$timeout', '$q', function (bbResources, bbDatepickerConfig, bbDatepickerParser, $timeout, $q) {\n            return {\n                replace: true,\n                restrict: 'E',\n                require: 'ngModel',\n                scope: {\n                    date: '=ngModel',\n                    dateOptions: '=?bbDateOptions',\n                    customValidation: '=?bbCustomValidation',\n                    format: '=?bbDateFormat',\n                    maxDate: '=?maxDate',\n                    minDate: '=?minDate',\n                    placeholderText: '=?placeholder'\n                },\n                templateUrl: 'sky/templates/datepicker/datepicker.html',\n                controller: ['$scope', function ($scope) {\n                    var self = this;\n\n\n                    $scope.getInputNgModel = function () {\n                        if (angular.isFunction(self.getInputNgModel)) {\n                            return self.getInputNgModel();\n                        } else {\n                            return null;\n                        }\n                    };\n                }],\n                link: function ($scope, el, attr, ngModel) {\n                    var parsedDate,\n                        inputEl,\n                        skipValidation = false,\n                        dateChangeInternal = false;\n\n                    function getBodyDatepicker() {\n                        return $('body > ul[uib-datepicker-popup-wrap]');\n                    }\n\n                    function positionAbsoluteDatepicker() {\n                        var calendarButtonEl = el.find('span.bb-datepicker-button-container'),\n                            inputEl = el.find('input'),\n                            datepickerScope = el.find('input').isolateScope(),\n                            datepickerEl = getBodyDatepicker(),\n                            inputWidth,\n                            buttonWidth,\n                            datepickerWidth;\n\n                        inputWidth = inputEl.innerWidth();\n                        buttonWidth = calendarButtonEl.innerWidth();\n                        datepickerWidth = datepickerEl.innerWidth();\n\n                        if (datepickerWidth < (inputWidth + buttonWidth)) {\n                            datepickerScope.position.left = datepickerScope.position.left + inputWidth + buttonWidth - datepickerWidth;\n                        }\n                    }\n\n                    function open($event) {\n                        $event.preventDefault();\n                        $event.stopPropagation();\n\n                        //add syle class when datepicker appended to body because necessary bb-datefield class will no longer be wrapping it.\n                        if ($scope.locals.appendToBody) {\n                            $timeout(function () {\n                                getBodyDatepicker().addClass('bb-datefield');\n                                positionAbsoluteDatepicker();\n                            });\n                        }\n\n                        $scope.locals.opened = !$scope.locals.opened;\n                    }\n\n                    function setDate() {\n                        var inputNgModel;\n                        if (angular.isDate($scope.date)) {\n                            $scope.locals.date = $scope.date;\n                        } else if (!$scope.locals.hasCustomValidation) {\n                            parsedDate = bbDatepickerParser.runParsers($scope.date, $scope.format);\n                            if (angular.isDate(parsedDate)) {\n                                $scope.date = parsedDate;\n                                $scope.locals.date = parsedDate;\n                            } else {\n                                $scope.locals.date = $scope.date;\n                                inputNgModel = $scope.getInputNgModel();\n                                if (inputNgModel && !inputNgModel.$validators.date($scope.date)) {\n                                    inputNgModel.invalidFormatMessage = bbResources.date_field_invalid_date_message;\n                                    inputNgModel.$setValidity('dateFormat', false);\n                                }\n                            }\n                        } else {\n                            $scope.locals.date = $scope.date;\n                        }\n                    }\n\n                    $scope.locals = {\n                        showButtonBar: false,\n                        appendToBody: false,\n                        date: '',\n                        opened: false,\n                        open: open,\n                        loaded: false,\n                        closeOnSelection: true,\n                        dateOptions: {\n                            showWeeks: bbDatepickerConfig.showWeeks,\n                            startingDay: bbDatepickerConfig.startingDay\n                        },\n                        hasCustomValidation: false,\n                        inputName: attr.bbDatepickerName\n                    };\n\n                    if (!$scope.maxDate && bbDatepickerConfig.maxDate) {\n                        $scope.maxDate = bbDatepickerConfig.maxDate;\n                    }\n\n                    if (!$scope.minDate && bbDatepickerConfig.minDate) {\n                        $scope.minDate = bbDatepickerConfig.minDate;\n                    }\n\n                    $scope.resources = bbResources;\n\n                    if (angular.isDefined(attr.showButtonBar)) {\n                        $scope.locals.showButtonBar = attr.showButtonBar;\n                    }\n\n                    if (angular.isDefined(attr.closeOnDateSelection)) {\n                        $scope.locals.closeOnSelection = attr.closeOnDateSelection;\n                    }\n\n                    if (angular.isDefined(attr.datepickerAppendToBody)) {\n                        $scope.locals.appendToBody = (attr.datepickerAppendToBody === 'true');\n                    }\n\n                    if (angular.isUndefined($scope.format)) {\n                        $scope.format = bbDatepickerConfig.currentCultureDateFormatString;\n                    }\n\n                    if (angular.isDefined($scope.dateOptions)) {\n                        angular.extend($scope.locals.dateOptions, $scope.dateOptions);\n\n                    }\n\n                    if (angular.isDefined($scope.customValidation)) {\n                        if (angular.isFunction($scope.customValidation.formatValue)) {\n                            $scope.locals.hasCustomValidation = true;\n                        }\n                    }\n\n                    $scope.locals.required = angular.isDefined(attr.required);\n\n\n                    if ($scope.placeholderText === null || angular.isUndefined($scope.placeholderText)) {\n                        $scope.placeholderText = $scope.format.toLowerCase();\n                    }\n\n                    setDate();\n\n                    $scope.$watch('date', function (newValue, oldValue) {\n                        if (newValue !== oldValue && !dateChangeInternal) {\n                            setDate();\n                        } else if (dateChangeInternal) {\n                            dateChangeInternal = false;\n                        }\n                    });\n\n                    $scope.$watch('locals.date', function () {\n\n                        if ($scope.date !== $scope.locals.date) {\n                            if (angular.isDate($scope.locals.date)) {\n                                dateChangeInternal = true;\n                                $scope.date = $scope.locals.date;\n                            }\n                        }\n\n                    });\n\n                    function runValidators() {\n                        var inputNgModel = $scope.getInputNgModel();\n                        /*istanbul ignore else: sanity check */\n                        if (inputNgModel) {\n                            inputNgModel.$validate();\n                        }\n                    }\n\n                    $scope.$watch('maxDate', function () {\n                        runValidators();\n                    });\n\n                    $scope.$watch('minDate', function () {\n                        runValidators();\n                    });\n\n                    function hasRequiredError() {\n                        var inputNgModel = $scope.getInputNgModel();\n\n                        return inputNgModel && inputNgModel.$error && inputNgModel.$error.required;\n                    }\n\n                    function hasMinMaxError() {\n                        var inputNgModel = $scope.getInputNgModel();\n\n                        return inputNgModel && inputNgModel.$error && (inputNgModel.$error.minDate || inputNgModel.$error.maxDate);\n                    }\n\n\n                    function dateFormatValidator() {\n                        var customFormattingResult,\n                            deferred,\n                            inputNgModel;\n\n                        function resolveValidation() {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                deferred[inputNgModel.invalidFormatMessage ? 'reject' : 'resolve']();\n                                inputNgModel.$setValidity('dateFormat', !inputNgModel.invalidFormatMessage || inputNgModel.invalidFormatMessage === '');\n                            } else {\n                                deferred.resolve();\n                            }\n                        }\n\n                        function setInvalidFormatMessage(errorMessage) {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                inputNgModel.invalidFormatMessage = errorMessage;\n                            }\n                        }\n\n                        function handleCustomFormattingValidation(result) {\n                            result = result || {};\n\n                            setInvalidFormatMessage(result.formattingErrorMessage);\n                            resolveValidation();\n\n                            if (result.formattedValue !== $scope.date) {\n                                skipValidation = true;\n                                dateChangeInternal = true;\n                                $scope.date = result.formattedValue;\n                                $scope.locals.date = result.formattedValue;\n                            }\n\n                        }\n\n                        function datepickerIsPristine() {\n                            var inputNgModel = $scope.getInputNgModel();\n\n                            if (inputNgModel !== null) {\n                                return inputNgModel.$pristine;\n                            } else {\n                                return true;\n                            }\n                        }\n\n                        deferred = $q.defer();\n\n                        if (skipValidation || angular.isDate($scope.locals.date) || $scope.locals.date === '' || ($scope.locals.required && hasRequiredError()) || hasMinMaxError() || (!$scope.locals.required && $scope.locals.date === null) || datepickerIsPristine()) {\n                            setInvalidFormatMessage(null);\n                            resolveValidation();\n                        } else if ($scope.locals.hasCustomValidation && angular.isString($scope.locals.date)) {\n                            customFormattingResult = $scope.customValidation.formatValue($scope.locals.date);\n                            if (customFormattingResult.then) {\n                                customFormattingResult.then(handleCustomFormattingValidation);\n                            } else {\n                                handleCustomFormattingValidation(customFormattingResult);\n                                return deferred.promise;\n                            }\n                        } else {\n                            inputNgModel = $scope.getInputNgModel();\n                            /* istanbul ignore else: sanity check */\n                            if (inputNgModel !== null && inputNgModel.$error && inputNgModel.$error.date) {\n                                setInvalidFormatMessage(bbResources.date_field_invalid_date_message);\n                            }\n                            resolveValidation();\n                        }\n\n                        skipValidation = false;\n                        return deferred.promise;\n                    }\n\n                    ngModel.$asyncValidators.dateFormat = dateFormatValidator;\n\n                    $scope.locals.loaded = true;\n\n                    //Timeout allows the locals.loaded to be applied to dom and ng-if=true to go into effect.\n                    $timeout(function () {\n                        inputEl = el.find('input');\n                        inputEl.on('change blur', function () {\n                            $timeout(function () {\n                                var inputNgModel;\n\n                                //allows validation to kick off for invalid dates\n                                if (angular.isUndefined($scope.locals.date) && angular.isDefined(inputEl.val()) && inputEl.val() !== '') {\n                                    dateChangeInternal = true;\n                                    $scope.date = inputEl.val();\n\n\n                                } else if ($scope.locals.required && hasRequiredError()) {\n                                    dateChangeInternal = true;\n                                    $scope.date = '';\n                                    inputNgModel = $scope.getInputNgModel();\n                                    inputNgModel.invalidFormatMessage = null;\n                                    inputNgModel.$setValidity('dateFormat', true);\n                                } else if ($scope.date !== $scope.locals.date) {\n\n                                    dateChangeInternal = true;\n                                    $scope.date = $scope.locals.date;\n\n                                }\n\n                            });\n                        });\n                    });\n\n                }\n            };\n        }])\n        .directive('bbDatepickerCustomValidate', ['$filter', 'bbDatepickerParser', function ($filter, bbDatepickerParser) {\n            return {\n                restrict: 'A',\n                require: ['ngModel', '^bbDatepicker'],\n                link: function ($scope, el, attr, controllers) {\n                    var ngModel = controllers[0],\n                        format = attr.uibDatepickerPopup;\n\n                    if (attr.bbDatepickerCustomValidate && attr.bbDatepickerCustomValidate === 'true') {\n                        ngModel.$parsers = [];\n                        ngModel.$validators.date = function () {\n                            return true;\n                        };\n                    } else {\n                        ngModel.$parsers.unshift(function (viewValue) {\n                            var newDate = ngModel.$viewValue,\n                                date = null;\n                            //date was changed from datepicker or is empty so just return\n                            if (typeof newDate === 'object' || newDate === '') {\n                                return newDate;\n                            }\n\n                            date = bbDatepickerParser.runParsers(newDate, format);\n\n                            if (angular.isDate(date)) {\n                                el.val($filter('date')(date, format));\n                            }\n\n                            return date ? date : viewValue;\n                        });\n                    }\n\n                    controllers[1].getInputNgModel = function () {\n                        return ngModel;\n                    };\n                }\n            };\n        }])\n    .directive('bbMinDate', function () {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function ($scope, element, attrs, ngModel) {\n                ngModel.$validators.minDate = function (modelValue) {\n                    return !$scope.minDate || !modelValue || !angular.isDate(modelValue) || !angular.isDate($scope.minDate) || modelValue >= $scope.minDate;\n                };\n            }\n        };\n    })\n    .directive('bbMaxDate', function () {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            link: function ($scope, element, attrs, ngModel) {\n                ngModel.$validators.maxDate = function (modelValue) {\n                    return !$scope.maxDate || !modelValue || !angular.isDate(modelValue) || !angular.isDate($scope.maxDate) || modelValue <= $scope.maxDate;\n                };\n            }\n        };\n    })\n    .factory('bbDatepickerParser', ['bbMoment', function (bbMoment) {\n\n        function parseUTCString(value) {\n            var date = null,\n                dateArray,\n                datePart;\n\n            if (angular.isString(value) && value.indexOf('T00:00:00') !== -1) {\n                datePart = value.split('T')[0];\n\n                dateArray = datePart.split('-');\n                date = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n            }\n            return date;\n        }\n\n        function parseNoSeparatorDateString(value, format) {\n            var date = null,\n                yearBegin = format.indexOf('y'),\n                monthBegin = format.indexOf('M'),\n                dayBegin = format.indexOf('d'),\n                yearIndex,\n                monthIndex,\n                dayIndex;\n            if (angular.isString(value) && value.length === 8 && !isNaN(value)) {\n                if ((dayBegin < yearBegin) && (monthBegin < yearBegin)) {\n                    yearIndex = 4;\n                    if (monthBegin < dayBegin) {\n                        dayIndex = 2;\n                        monthIndex = 0;\n                    } else {\n                        dayIndex = 0;\n                        monthIndex = 2;\n                    }\n                } else if ((yearBegin < monthBegin) && (monthBegin < dayBegin)) {\n                    yearIndex = 0;\n                    monthIndex = 4;\n                    dayIndex = 6;\n                } else {\n                    return null;\n                }\n\n                date = new Date(value.substr(yearIndex, 4), (value.substr(monthIndex, 2) - 1), value.substr(dayIndex, 2));\n            }\n            return date;\n        }\n\n        function matchSeparator(value) {\n            return value.match(/[.\\/\\-\\s].*?/);\n        }\n\n        function dateHasSeparator(value) {\n            /*\n            * Validation criteria:\n            * A separator exists\n            * There is no separator at the beginning\n            * There is no separator at the end\n            * Two separators exist\n            * All parts of the date have a non-zero value\n            */\n\n            var separator = matchSeparator(value),\n                valueArray = value.split(separator),\n                separatorAtEnd = value.indexOf(separator, value.length - 1) !== -1,\n                separatorAtBeginning = value.indexOf(separator) === 0,\n                hasTwoSeparators = valueArray.length - 1 === 2,\n                anyPartIsZero = valueArray.some(function (e) {\n                    return Number(e) === 0;\n                });\n\n            return (separator && !separatorAtEnd && !separatorAtBeginning && hasTwoSeparators && !anyPartIsZero);\n        }\n\n        function isMomentParsable(value, format) {\n            var yearParts,\n                yearIndex,\n                monthIndex,\n                dayIndex,\n                separator;\n\n            if (angular.isString(value) && dateHasSeparator(value)) {\n\n                if (value.length === 10) {\n                    return true;\n                } else if (value.length === 9 || value.length === 8) {\n                    //insure that years have 4 characters\n                    separator = matchSeparator(value);\n                    yearParts = value.split(separator);\n                    yearIndex = format.indexOf('y');\n                    monthIndex = format.indexOf('M');\n                    dayIndex = format.indexOf('d');\n                    if (yearIndex > monthIndex && yearIndex > dayIndex) {\n                        return yearParts[2].length === 4;\n                    }\n\n                    if (yearIndex < monthIndex && yearIndex < dayIndex) {\n                        return yearParts[0].length === 4;\n                    }\n\n                }\n\n            }\n\n            return false;\n        }\n\n\n\n        function parseMoment(value, format) {\n            var date = null,\n                momentDate;\n\n            if (isMomentParsable(value, format)) {\n                momentDate = bbMoment(value, format.toUpperCase());\n                if (momentDate.isValid()) {\n                    date = momentDate.toDate();\n                }\n            }\n\n            return date;\n        }\n\n        return {\n            parseUTCString: parseUTCString,\n            parseNoSeparatorDateString: parseNoSeparatorDateString,\n            parseMoment: parseMoment,\n            runParsers: function (value, format) {\n                var date = null;\n\n                if (!value || angular.isDate(value) || value === '') {\n                    return value;\n                }\n\n                date = parseUTCString(value);\n\n                if (angular.isDate(date)) {\n                    return date;\n                }\n\n                date = parseNoSeparatorDateString(value, format);\n\n                if (angular.isDate(date)) {\n                    return date;\n                }\n\n                date = parseMoment(value, format);\n\n                return date;\n\n            }\n        };\n    }]);\n\n\n}(jQuery));\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function bbDateRangePickerFactory(bbResources) {\n        var dateRangeTypes,\n            defaultDateRangeOptions,\n            specificDateRangeOptions,\n            pastDateRangeOptions,\n            dateRangeMap;\n\n        dateRangeTypes = {\n            AT_ANY_TIME: 0,\n            NEXT_WEEK: 1,\n            THIS_MONTH: 2,\n            NEXT_MONTH: 3,\n            THIS_QUARTER: 4,\n            NEXT_QUARTER: 5,\n            THIS_FISCAL_YEAR: 6,\n            NEXT_FISCAL_YEAR: 7,\n            THIS_CALENDAR_YEAR: 8,\n            NEXT_CALENDAR_YEAR: 9,\n            LAST_WEEK: 10,\n            LAST_MONTH: 11,\n            LAST_QUARTER: 12,\n            LAST_FISCAL_YEAR: 13,\n            LAST_CALENDAR_YEAR: 14,\n            TODAY: 15,\n            YESTERDAY: 16,\n            TOMORROW: 17,\n            THIS_WEEK: 18,\n            SPECIFIC_RANGE: 19\n        };\n\n\n        // Deprecated\n        defaultDateRangeOptions = [\n            dateRangeTypes.AT_ANY_TIME,\n            dateRangeTypes.YESTERDAY,\n            dateRangeTypes.TODAY,\n            dateRangeTypes.TOMORROW,\n            dateRangeTypes.LAST_WEEK,\n            dateRangeTypes.THIS_WEEK,\n            dateRangeTypes.NEXT_WEEK,\n            dateRangeTypes.LAST_MONTH,\n            dateRangeTypes.THIS_MONTH,\n            dateRangeTypes.NEXT_MONTH,\n            dateRangeTypes.LAST_QUARTER,\n            dateRangeTypes.THIS_QUARTER,\n            dateRangeTypes.NEXT_QUARTER,\n            dateRangeTypes.LAST_CALENDAR_YEAR,\n            dateRangeTypes.THIS_CALENDAR_YEAR,\n            dateRangeTypes.NEXT_CALENDAR_YEAR,\n            dateRangeTypes.LAST_FISCAL_YEAR,\n            dateRangeTypes.THIS_FISCAL_YEAR,\n            dateRangeTypes.NEXT_FISCAL_YEAR\n        ];\n\n        // Deprecated\n        specificDateRangeOptions = defaultDateRangeOptions.concat([dateRangeTypes.SPECIFIC_RANGE]);\n\n        // Deprecated\n        pastDateRangeOptions = [\n            dateRangeTypes.AT_ANY_TIME,\n            dateRangeTypes.YESTERDAY,\n            dateRangeTypes.TODAY,\n            dateRangeTypes.LAST_WEEK,\n            dateRangeTypes.THIS_WEEK,\n            dateRangeTypes.LAST_MONTH,\n            dateRangeTypes.THIS_MONTH,\n            dateRangeTypes.LAST_QUARTER,\n            dateRangeTypes.THIS_QUARTER,\n            dateRangeTypes.LAST_CALENDAR_YEAR,\n            dateRangeTypes.THIS_CALENDAR_YEAR,\n            dateRangeTypes.LAST_FISCAL_YEAR,\n            dateRangeTypes.THIS_FISCAL_YEAR\n        ];\n\n        dateRangeMap = {};\n        dateRangeMap[dateRangeTypes.AT_ANY_TIME] = {\n            caption: bbResources.date_range_picker_at_any_time,\n            description: bbResources.date_range_picker_filter_description_at_any_time\n        };\n        dateRangeMap[dateRangeTypes.YESTERDAY] = {\n            caption: bbResources.date_range_picker_yesterday,\n            description: bbResources.date_range_picker_filter_description_yesterday\n        };\n        dateRangeMap[dateRangeTypes.TODAY] = {\n            caption: bbResources.date_range_picker_today,\n            description: bbResources.date_range_picker_filter_description_today\n        };\n        dateRangeMap[dateRangeTypes.TOMORROW] = {\n            caption: bbResources.date_range_picker_tomorrow,\n            description: bbResources.date_range_picker_filter_description_tomorrow\n        };\n        dateRangeMap[dateRangeTypes.LAST_WEEK] = {\n            caption: bbResources.date_range_picker_last_week,\n            description: bbResources.date_range_picker_filter_description_last_week\n        };\n        dateRangeMap[dateRangeTypes.THIS_WEEK] = {\n            caption: bbResources.date_range_picker_this_week,\n            description: bbResources.date_range_picker_filter_description_this_week\n        };\n        dateRangeMap[dateRangeTypes.NEXT_WEEK] = {\n            caption: bbResources.date_range_picker_next_week,\n            description: bbResources.date_range_picker_filter_description_next_week\n        };\n        dateRangeMap[dateRangeTypes.LAST_QUARTER] = {\n            caption: bbResources.date_range_picker_last_quarter,\n            description: bbResources.date_range_picker_filter_description_last_quarter\n        };\n        dateRangeMap[dateRangeTypes.THIS_QUARTER] = {\n            caption: bbResources.date_range_picker_this_quarter,\n            description: bbResources.date_range_picker_filter_description_this_quarter\n        };\n        dateRangeMap[dateRangeTypes.NEXT_QUARTER] = {\n            caption: bbResources.date_range_picker_next_quarter,\n            description: bbResources.date_range_picker_filter_description_next_quarter\n        };\n        dateRangeMap[dateRangeTypes.LAST_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_last_calendar_year,\n            description: bbResources.date_range_picker_filter_description_last_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_this_calendar_year,\n            description: bbResources.date_range_picker_filter_description_this_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.NEXT_CALENDAR_YEAR] = {\n            caption: bbResources.date_range_picker_next_calendar_year,\n            description: bbResources.date_range_picker_filter_description_next_calendar_year\n        };\n        dateRangeMap[dateRangeTypes.LAST_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_last_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_last_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_this_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_this_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.NEXT_FISCAL_YEAR] = {\n            caption: bbResources.date_range_picker_next_fiscal_year,\n            description: bbResources.date_range_picker_filter_description_next_fiscal_year\n        };\n        dateRangeMap[dateRangeTypes.THIS_MONTH] = {\n            caption: bbResources.date_range_picker_this_month,\n            description: bbResources.date_range_picker_filter_description_this_month\n        };\n        dateRangeMap[dateRangeTypes.NEXT_MONTH] = {\n            caption: bbResources.date_range_picker_next_month,\n            description: bbResources.date_range_picker_filter_description_next_month\n        };\n        dateRangeMap[dateRangeTypes.LAST_MONTH] = {\n            caption: bbResources.date_range_picker_last_month,\n            description: bbResources.date_range_picker_filter_description_last_month\n        };\n        dateRangeMap[dateRangeTypes.SPECIFIC_RANGE] = {\n            caption: bbResources.date_range_picker_specific_range,\n            description: bbResources.date_range_picker_filter_description_specific_range\n        };\n\n        function getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n            if (dateRangePickerValue && dateRangePickerValue.dateRangeType) {\n                info = getDateRangeTypeInfo(dateRangePickerValue.dateRangeType);\n            } else {\n                info = getDateRangeTypeInfo(dateRangePickerValue);\n            }\n            return info;\n        }\n\n\n        function getDateRangeTypeCaption(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n\n            if (angular.isFunction(getDateRangeTypeInfo)) {\n\n                info = getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo);\n\n                if (info && info.caption) {\n                    return info.caption;\n                }\n            }\n\n            if (angular.isNumber(dateRangePickerValue)) {\n                // If the input is the enum value itself, then map it to the object structure we expect before proceeding.\n                dateRangePickerValue = { dateRangeType: dateRangePickerValue };\n            } else {\n                // If the value is undefiend, then map it to a null object.\n                dateRangePickerValue = dateRangePickerValue || {};\n            }\n\n            if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\n                // If the enum value is undefined, then it represents any time.\n                dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\n            }\n\n            if (angular.isDefined(dateRangeMap[dateRangePickerValue.dateRangeType])) {\n                return dateRangeMap[dateRangePickerValue.dateRangeType].caption;\n            } else {\n                return '';\n            }\n\n        }\n\n        function getDateRangeFilterDescription(dateRangePickerValue, getDateRangeTypeInfo) {\n            var info;\n            if (angular.isFunction(getDateRangeTypeInfo)) {\n                info = getTypeInfoFromDateRangePickerValue(dateRangePickerValue, getDateRangeTypeInfo);\n                if (info && info.description) {\n                    return info.description;\n                }\n            }\n\n            if (angular.isNumber(dateRangePickerValue)) {\n                // If the input is the enum value itself, then map it to the object structure we expect before proceeding.\n                dateRangePickerValue = { dateRangeType: dateRangePickerValue };\n            } else {\n                // If the value is undefiend, then map it to a null object.\n                dateRangePickerValue = dateRangePickerValue || {};\n            }\n\n            if (!angular.isDefined(dateRangePickerValue.dateRangeType)) {\n                // If the enum value is undefined, then it represents any time.\n                dateRangePickerValue.dateRangeType = dateRangeTypes.AT_ANY_TIME;\n            }\n            if (angular.isDefined(dateRangeMap[dateRangePickerValue.dateRangeType])) {\n                return dateRangeMap[dateRangePickerValue.dateRangeType].description;\n            } else {\n                return '';\n            }\n        }\n\n        function getDateRangeOptions(optionTypes) {\n            var dateRangeOptions = [dateRangeTypes.AT_ANY_TIME];\n            optionTypes = optionTypes || {};\n\n            if (optionTypes.includeDefault) {\n                dateRangeOptions.push(dateRangeTypes.YESTERDAY);\n                dateRangeOptions.push(dateRangeTypes.TODAY);\n                dateRangeOptions.push(dateRangeTypes.TOMORROW);\n                dateRangeOptions.push(dateRangeTypes.LAST_WEEK);\n                dateRangeOptions.push(dateRangeTypes.THIS_WEEK);\n                dateRangeOptions.push(dateRangeTypes.NEXT_WEEK);\n                dateRangeOptions.push(dateRangeTypes.LAST_MONTH);\n                dateRangeOptions.push(dateRangeTypes.THIS_MONTH);\n                dateRangeOptions.push(dateRangeTypes.NEXT_MONTH);\n                dateRangeOptions.push(dateRangeTypes.LAST_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.THIS_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.NEXT_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.LAST_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.NEXT_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.LAST_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.NEXT_FISCAL_YEAR);\n            }\n\n            if (optionTypes.includePast && !optionTypes.includeDefault) {\n                dateRangeOptions.push(dateRangeTypes.YESTERDAY);\n                dateRangeOptions.push(dateRangeTypes.TODAY);\n                dateRangeOptions.push(dateRangeTypes.LAST_WEEK);\n                dateRangeOptions.push(dateRangeTypes.THIS_WEEK);\n                dateRangeOptions.push(dateRangeTypes.LAST_MONTH);\n                dateRangeOptions.push(dateRangeTypes.THIS_MONTH);\n                dateRangeOptions.push(dateRangeTypes.LAST_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.THIS_QUARTER);\n                dateRangeOptions.push(dateRangeTypes.LAST_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_CALENDAR_YEAR);\n                dateRangeOptions.push(dateRangeTypes.LAST_FISCAL_YEAR);\n                dateRangeOptions.push(dateRangeTypes.THIS_FISCAL_YEAR);\n            }\n\n            if (optionTypes.includeSpecific) {\n                dateRangeOptions.push(dateRangeTypes.SPECIFIC_RANGE);\n            }\n\n            return dateRangeOptions;\n        }\n\n        return {\n            \n            defaultDateRangeOptions: defaultDateRangeOptions,\n            pastDateRangeOptions: pastDateRangeOptions,\n            specificDateRangeOptions: specificDateRangeOptions,\n\n            dateRangeTypes: dateRangeTypes,\n            getDateRangeOptions: getDateRangeOptions,\n            getDateRangeTypeCaption: getDateRangeTypeCaption,\n            getDateRangeFilterDescription: getDateRangeFilterDescription\n        };\n    }\n\n    bbDateRangePickerFactory.$inject = ['bbResources'];\n\n    function bbDateRangePickerDirective(bbDateRangePicker, bbResources) {\n\n        return {\n            replace: true,\n            restrict: 'E',\n            templateUrl: 'sky/templates/daterangepicker/daterangepicker.html',\n            scope: {},\n            controllerAs: 'bbDateRangePickerCtrl',\n            bindToController: {\n                bbDateRangePickerValue: \"=\",\n                bbDateRangePickerAutomationId: \"=\",\n                bbDateRangePickerOptions: '=',\n                fromDate: '=?bbDateRangePickerFromDate',\n                toDate: '=?bbDateRangePickerToDate',\n                pickerLabel: '=?bbDateRangePickerLabel',\n                isValid: '=?bbDateRangePickerValid'\n            },\n            controller: ['$scope', function ($scope) {\n                var vm = this;\n                vm.resources = bbResources;\n\n                vm.defaultDateRangeOptions = bbDateRangePicker.getDateRangeOptions({includeDefault: true});\n\n                vm.getDateRangeTypeCaption = function (dateRangeTypeValue) {\n                    var infoFunction;\n                    if (vm.bbDateRangePickerOptions && angular.isFunction(vm.bbDateRangePickerOptions.getDateRangeTypeInfo)) {\n                        infoFunction = vm.bbDateRangePickerOptions.getDateRangeTypeInfo;\n                    }\n                    return bbDateRangePicker.getDateRangeTypeCaption(dateRangeTypeValue, infoFunction);\n                };\n\n                $scope.$watch(\n                    function () {\n                        return vm.dateRangeForm.$valid;\n                    }, function (newVal) {\n                        vm.isValid = newVal;\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.fromDate;\n                    }, function (newVal) {\n                        /* This prevents minDate from having a reference\n                           to fromDate and changing it */\n                        vm.minDate = angular.copy(newVal);\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.toDate;\n                    }, function (newVal) {\n                        /* This prevents maxDate from having a reference\n                           to toDate and changing it */\n                        vm.maxDate = angular.copy(newVal);\n                    }\n                );\n\n                $scope.$watch(\n                    function () {\n                        return vm.bbDateRangePickerValue;\n                    }, function (newVal) {\n                    if (!newVal) {\n                        vm.bbDateRangePickerValue = {\n                            dateRangeType: bbDateRangePicker.dateRangeTypes.AT_ANY_TIME\n                        };\n                        return;\n                    }\n                    vm.specificRangeIsVisible = vm.bbDateRangePickerValue.dateRangeType === bbDateRangePicker.dateRangeTypes.SPECIFIC_RANGE;\n                    newVal.dateRangeType = newVal.dateRangeType || bbDateRangePicker.dateRangeTypes.AT_ANY_TIME;\n                }, true);\n            }],\n            link: function ($scope, el, attr, vm) {\n                vm.noLabels = attr.bbDateRangePickerNoLabels;\n                if (vm.noLabels) {\n                    vm.toPlaceholder = bbResources.date_range_picker_to_date;\n                    vm.fromPlaceholder = bbResources.date_range_picker_from_date;\n                } else {\n                    vm.toPlaceholder = '';\n                    vm.fromPlaceholder = '';\n                }\n            }\n        };\n    }\n\n    bbDateRangePickerDirective.$inject = ['bbDateRangePicker', 'bbResources'];\n\n    angular.module('sky.daterangepicker', ['sky.resources', 'sky.datepicker'])\n        .factory('bbDateRangePicker', bbDateRangePickerFactory)\n        .directive('bbDateRangePicker', bbDateRangePickerDirective);\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    var components = [{\n        name: 'Image',\n        cls: 'image'\n    }, {\n        name: 'Title',\n        cls: 'title'\n    }, {\n        name: 'Description',\n        cls: 'description'\n    }, {\n        name: 'Action',\n        cls: 'action'\n    }];\n\n    function makeErrorComponent(component) {\n        var controllerName,\n            name = component.name;\n\n        function Controller($scope) {\n            var vm = this;\n\n            $scope.$on('$destroy', function () {\n                vm.onDestroy();\n                vm = null;\n            });\n        }\n\n        Controller.$inject = ['$scope'];\n\n        function componentFn() {\n            function link(scope, el, attrs, ctrls) {\n                var vm = ctrls[0],\n                    bbError = ctrls[1];\n\n                vm.el = el;\n\n                bbError['set' + name](vm);\n            }\n\n            return {\n                restrict: 'E',\n                require: ['bbError' + name, '^bbError'],\n                controller: controllerName,\n                controllerAs: 'bbError' + name,\n                bindToController: true,\n                link: link,\n                scope: {}\n            };\n        }\n\n        controllerName = 'BBError' + name + 'Controller';\n\n        angular.module('sky.error.directive')\n            .controller(controllerName, Controller)\n            .directive('bbError' + name, componentFn);\n    }\n\n    function getCtrlPropName(component) {\n        var name = component.name;\n\n        return name.charAt(0).toLowerCase() + name.substr(1) + 'Ctrl';\n    }\n\n    function BBErrorController() {\n        var vm = this;\n\n        function addComponentSetter(component) {\n            var name = component.name;\n\n            vm['set' + name] = function (ctrl) {\n                var propName = getCtrlPropName(component);\n\n                vm[propName] = ctrl;\n\n                ctrl.onDestroy = function () {\n                    vm[propName] = null;\n                };\n            };\n        }\n\n        components.forEach(addComponentSetter);\n    }\n\n    function bbError() {\n        function link(scope, el, attrs, vm) {\n            function watchForComponent(component) {\n                scope.$watch(function () {\n                    return vm[getCtrlPropName(component)];\n                }, function (newValue) {\n                    if (newValue) {\n                        el.find('.bb-error-' + component.cls)\n                            .empty()\n                            .append(newValue.el);\n                    }\n                });\n            }\n\n            components.forEach(watchForComponent);\n        }\n\n        return {\n            restrict: 'E',\n            controller: 'BBErrorController',\n            controllerAs: 'bbError',\n            bindToController: true,\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/error/error.directive.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.error.directive', [])\n        .controller('BBErrorController', BBErrorController)\n        .directive('bbError', bbError);\n\n    components.forEach(makeErrorComponent);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function BBErrorModalController($uibModalInstance, options) {\n        var vm = this;\n\n        vm.options = options;\n\n        vm.close = function () {\n            $uibModalInstance.close();\n        };\n    }\n\n    BBErrorModalController.$inject = ['$uibModalInstance', 'options'];\n\n    angular.module('sky.errormodal.controller', ['sky.error.directive'])\n        .controller('BBErrorModalController', BBErrorModalController);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbErrorModal(bbModal) {\n        return {\n            open: function (options) {\n                return bbModal.open({\n                    controller: 'BBErrorModalController as bbErrorModal',\n                    templateUrl: 'sky/templates/error/errormodal.template.html',\n                    resolve: {\n                        options: function () {\n                            return options;\n                        }\n                    }\n                });\n            }\n        };\n    }\n\n    bbErrorModal.$inject = ['bbModal'];\n\n    angular.module('sky.errormodal.service', ['sky.errormodal.controller', 'sky.modal'])\n        .factory('bbErrorModal', bbErrorModal);\n}());\n","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module(\n        'sky.fileattachments',\n        [\n            'sky.fileattachments.filedrop',\n            'sky.fileattachments.fileitem',\n            'sky.fileattachments.filesize'\n        ]\n    );\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function run($window) {\n        $($window).on('dragover drop', function (e) {\n            if (!$(e.target).hasClass('bb-file-drop-target')) {\n                e.preventDefault();\n            }\n        });\n    }\n\n    run.$inject = ['$window'];\n\n    function bbFileDrop($parse, $templateCache) {\n        return {\n            link: function (scope, el, attrs) {\n                scope.bbFileDrop = {\n                    hasTranscludeContents: $.trim(el.find('.bb-file-drop-contents-custom').html()).length > 0,\n                    allowLinks: angular.isDefined(attrs.bbFileDropLink),\n                    addLink: function ($event) {\n                        $event.preventDefault();\n                        scope.bbFileDropLinkChange({\n                            link: {\n                                url: scope.bbFileDrop.url\n                            }\n                        });\n                        \n                        scope.bbFileDrop.url = null;\n                    },\n                    fileChange: function ($files, $event, $rejectedFiles) {\n                        scope.bbFileDropChange({\n                            files: $files,\n                            rejectedFiles: $rejectedFiles\n                        });\n                    }\n                };\n            },\n            scope: {\n                bbFileDropChange: '&',\n                bbFileDropLinkChange: '&'\n            },\n            template: function (el, attrs) {\n                var dropEl;\n\n                el.html($templateCache.get('sky/templates/fileattachments/filedrop.html'));\n\n                dropEl = el.find('.bb-file-drop');\n\n                dropEl.attr({\n                    'ngf-allow-dir': attrs.bbFileDropAllowDir,\n                    'ngf-accept': attrs.bbFileDropAccept,\n                    'ngf-multiple': attrs.bbFileDropMultiple || 'true',\n                    'ngf-min-size': attrs.bbFileDropMinSize || '0',\n                    'ngf-max-size': attrs.bbFileDropMaxSize || '500000'\n                });\n\n                if (angular.isDefined(attrs.bbFileDropNoclick)) {\n                    dropEl.addClass('bb-file-drop-noclick');\n                } else {\n                    dropEl.attr('ngf-select', '');\n                }\n            },\n            transclude: true\n        };\n    }\n\n    bbFileDrop.$inject = ['$parse', '$templateCache'];\n\n    angular.module('sky.fileattachments.filedrop', ['ngFileUpload', 'sky.resources'])\n        .run(run)\n        .directive('bbFileDrop', bbFileDrop);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    function bbFileItem() {\n        return {\n            link: function (scope) {\n                function getFileTypeUpper() {\n                    var fileType = '';\n\n                    if (scope.item) {\n                        fileType = scope.item.type || '';\n                    }\n\n                    return fileType.toUpperCase();\n                }\n\n                function getFileExtensionUpper() {\n                    var extension = '',\n                        name;\n\n                    if (scope.item) {\n                        name = scope.item.name || '';\n\n                        extension = name.substr(name.lastIndexOf('.')) || '';\n                    }\n\n                    return extension.toUpperCase();\n                }\n\n                scope.bbFileItem = {\n                    isFile: function () {\n                        var item = scope.item;\n\n                        return item && angular.isDefined(item.size);\n                    },\n                    isImg: function () {\n                        var fileTypeUpper = getFileTypeUpper(),\n                            slashIndex;\n\n                        slashIndex = fileTypeUpper.indexOf('/');\n\n                        if (slashIndex >= 0) {\n                            switch (fileTypeUpper.substr(fileTypeUpper.indexOf('/') + 1)) {\n                            case 'BMP':\n                            case 'GIF':\n                            case 'JPEG':\n                            case 'PNG':\n                                return true;\n                            }\n                        }\n\n                        return false;\n                    }\n                };\n\n                scope.$watch('item.type', function () {\n                    var cls,\n                        extensionUpper = getFileExtensionUpper(),\n                        fileTypeUpper;\n\n                    switch (extensionUpper) {\n                        case '.PDF':\n                            cls = 'pdf';\n                            break;\n                        case '.GZ':\n                        case '.RAR':\n                        case '.TGZ':\n                        case '.ZIP':\n                            cls = 'archive';\n                            break;\n                        case '.PPT':\n                        case '.PPTX':\n                            cls = 'powerpoint';\n                            break;\n                        case '.DOC':\n                        case '.DOCX':\n                            cls = 'word';\n                            break;\n                        case '.XLS':\n                        case '.XLSX':\n                            cls  = 'excel';\n                            break;\n                        case '.TXT':\n                            cls = 'text';\n                            break;\n                        case '.HTM':\n                        case '.HTML':\n                            cls = 'code';\n                            break;\n                    }\n\n                    if (!cls) {\n                        fileTypeUpper = getFileTypeUpper();\n\n                        switch (fileTypeUpper.substr(0, fileTypeUpper.indexOf('/'))) {\n                            case 'AUDIO':\n                                cls = 'audio';\n                                break;\n                            case 'IMAGE':\n                                // Normally images are displayed as thumbnails, but if an image type is not recognized\n                                // as being widely supported by modern browsers (e.g. TIFF files) then an icon should\n                                // be displayed instead.\n                                cls = 'image';\n                                break;\n                            case 'TEXT':\n                                cls = 'text';\n                                break;\n                            case 'VIDEO':\n                                cls = 'video';\n                                break;\n                        }\n                    }\n\n                    scope.bbFileItem.otherCls = 'fa-file-' + (cls ? cls + '-' : '') + 'o';\n                });\n            },\n            scope: {\n                item: '=bbFileItem',\n                itemDelete: '&bbFileItemDelete'\n            },\n            templateUrl: 'sky/templates/fileattachments/fileitem.html',\n            transclude: true\n        };\n    }\n\n    angular.module('sky.fileattachments.fileitem', ['ngFileUpload', 'sky.fileattachments.filesize', 'sky.resources'])\n        .directive('bbFileItem', bbFileItem);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n    \n    function bbFileSize($filter, bbFormat, bbResources) {\n        return function (input) {\n            var decimalPlaces = 0,\n                dividend = 1,\n                formattedSize,\n                roundedSize,\n                template;\n            \n            if (input === null || angular.isUndefined(input)) {\n                return '';\n            }\n            \n            if (Math.abs(input) === 1) {\n                template = bbResources.file_size_b_singular;\n            } else if (input < 1000) {\n                template = bbResources.file_size_b_plural;\n            } else if (input < 1e6) {\n                template = bbResources.file_size_kb;\n                dividend = 1000;\n            } else if (input < 1e9) {\n                template = bbResources.file_size_mb;\n                dividend = 1e6;\n                decimalPlaces = 1;\n            } else {\n                template = bbResources.file_size_gb;\n                dividend = 1e9;\n                decimalPlaces = 1;\n            }\n\n            roundedSize = Math.floor(input / (dividend / Math.pow(10, decimalPlaces))) / Math.pow(10, decimalPlaces);\n\n            formattedSize = $filter('number')(roundedSize);\n\n            return bbFormat.formatText(template, formattedSize);\n        };\n    }\n    \n    bbFileSize.$inject = ['$filter', 'bbFormat', 'bbResources'];\n    \n    angular.module('sky.fileattachments.filesize', ['sky.format', 'sky.resources'])\n        .filter('bbFileSize', bbFileSize);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    var tagsToReplace = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    function replaceTag(tag) {\n        return tagsToReplace[tag];\n    }\n\n    function isEmpty(str) {\n        return str === null || angular.isUndefined(str);\n    }\n\n    angular.module('sky.format', [])\n        .factory('bbFormat', function () {\n            return {\n                formatText: function (format) {\n                    var args;\n\n                    if (isEmpty(format)) {\n                        return '';\n                    }\n\n                    args = arguments;\n\n                    return String(format).replace(/\\{(\\d+)\\}/g, function (match, capture) {\n                        /*jslint unparam: true */\n                        return args[parseInt(capture, 10) + 1];\n                    });\n                },\n                escape: function (str) {\n                    if (isEmpty(str)) {\n                        return '';\n                    }\n\n                    return String(str).replace(/[&<>]/g, replaceTag);\n                }\n            };\n        });\n}());\n","/*jslint browser: false, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    function buildCategoryList(columns) {\n        var categories = [],\n            column,\n            index,\n            len;\n\n        len = columns.length;\n\n        for (index = 0; index < len; index++) {\n            column = columns[index];\n\n            if (column.category) {\n                if (categories.indexOf(column.category) === -1) {\n                    categories.push(column.category);\n                }\n            }\n        }\n\n        return categories;\n    }\n\n\n    function columnCompare(a, b) {\n        a = a.title.toLocaleLowerCase();\n        b = b.title.toLocaleLowerCase();\n\n        if (a < b) {\n            return -1;\n        }\n\n        if (a > b) {\n            return 1;\n        }\n\n        return 0;\n    }\n    \n    function getInitialSelectedColumns(columns, selectedIds) {\n        var selectedColumns = [];\n        \n        angular.forEach(columns, function (column) {\n            if (selectedIds.indexOf(column.id) >= 0) {\n                selectedColumns.push(column);\n            }\n        });\n        \n        return selectedColumns;\n    }\n\n    function BBGridColumnPickerController($scope, availableColumns, initialSelectedColumnIds, columnPickerHelpKey, listMode) {\n        var columns = [],\n            initialSelectedColumns;\n\n        angular.forEach(availableColumns, function (column) {\n            columns.push({\n                id: column.id,\n                name: column.name,\n                title: column.caption,\n                category: column.category,\n                description: column.description\n            });\n        });\n        \n        initialSelectedColumns = getInitialSelectedColumns(columns, initialSelectedColumnIds);\n\n        columns.sort(columnCompare);\n\n        $scope.columns = columns;\n        $scope.categories = buildCategoryList(columns);\n        $scope.locals = {};\n        $scope.locals.selectedColumns = initialSelectedColumns.slice(0);\n        $scope.columnPickerHelpKey = columnPickerHelpKey;\n        $scope.listMode = listMode;\n        \n        $scope.applyChanges = function () {\n            var column,\n                scopeColumns = $scope.columns,\n                selectedColumns = $scope.locals.selectedColumns,\n                columnIds = [],\n                i;\n            \n            //Loop through previously selected columns.  If they are still selected, add\n            //them to the resulting list in their original order.\n            angular.forEach(initialSelectedColumnIds, function (columnId) {\n                for (i = 0; i < scopeColumns.length; i++) {\n                    column = scopeColumns[i];\n\n                    if (column.id === columnId) {\n                        if (selectedColumns.indexOf(column) >= 0) {\n                            columnIds.push(column.id);\n                        }\n                        break;\n                    }\n                }\n            });\n\n            //Loop through all columns.  If they are selected and not already in the list\n            //then add them to the end.\n            angular.forEach(selectedColumns, function (column) {\n                var id = column.id;\n                \n                if (columnIds.indexOf(id) < 0) {\n                    columnIds.push(id);\n                }\n            });\n\n            $scope.$close(columnIds);\n        };\n    }\n    \n    BBGridColumnPickerController.$inject = ['$scope', 'columns', 'selectedColumnIds', 'columnPickerHelpKey', 'listMode'];\n\n    angular.module('sky.grids.columnpicker', ['sky.checklist', 'sky.resources'])\n        .controller('BBGridColumnPickerController', BBGridColumnPickerController);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    \n    angular.module('sky.grids.actionbar', ['sky.mediabreakpoints', 'sky.resources'])\n    .directive('bbGridActionBar', ['bbMediaBreakpoints', 'bbResources', '$timeout', function (bbMediaBreakpoints, bbResources, $timeout) {\n        return {\n                require: '^bbGrid',\n                replace: true,\n                transclude: true,\n                restrict: 'E',\n                scope: {\n                    bbMultiselectActions: '=',\n                    bbSelectionsUpdated: '&'\n                },\n                controller: ['$scope', function ($scope) {\n                    $scope.locals = {\n                        actions: $scope.bbMultiselectActions,\n                        showActionBar: false,\n                        mobileButtons: false,\n                        showMobileActions: false\n                    };\n\n                    $scope.resources = bbResources;\n                }],\n                link: function ($scope, element, attrs, bbGrid) {\n                    /*jslint unparam: true */\n                    var visibleSelected = [];\n                    \n                    function updateActionBar(data, selected) {\n                        var action,\n                            i,\n                            showActionBar;\n                        \n                        //this notation is necessary because the argument is passed through grid and then to the controller\n                        //in which grid resides.\n                        visibleSelected = bbGrid.getVisibleSelections(data, selected);\n                        \n                        $scope.bbSelectionsUpdated({ selections: { selections: visibleSelected } });\n\n                        showActionBar = false;\n                        if ($scope.locals.actions) {\n                            //only show the action bar if an action has an available selection\n                            for (i = 0; i < $scope.locals.actions.length; i++) {\n                                action = $scope.locals.actions[i];\n                                if (action.selections.length > 0) {\n                                    showActionBar = true;\n                                }\n                            }\n                        }\n                        \n                        $scope.locals.showActionBar = showActionBar;\n\n                        if (showActionBar) {\n                            $timeout(function () {\n                                bbGrid.syncActionBarViewKeeper();\n                            });\n                        }\n                    }\n                    \n                    \n                    bbGrid.scope.$watchCollection('selectedRows', function (newValue) {\n                        updateActionBar(bbGrid.scope.options.data, newValue);\n                    });\n\n                    bbGrid.scope.$watchCollection('options.data', function (newValue) {\n                        updateActionBar(newValue, bbGrid.scope.selectedRows);\n                    });\n                    \n                    //on mobile do an ng-if that changes the stuff.\n                    function mediaBreakpointHandler(newBreakpoints) {\n                        $scope.locals.mobileButtons = newBreakpoints.xs;\n                    }\n\n                    bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                    element.on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                    });\n\n                    $scope.locals.clearSelection = function () {\n                        \n                        //If the visible selections are the same as the selected rows we can just reset all multiselected rows\n                        if (visibleSelected.length === bbGrid.scope.selectedRows.length) {\n                            bbGrid.resetMultiselect();\n                        } else {\n                            bbGrid.toggleMultiselectRows(visibleSelected);\n                        }\n                        \n                    };\n\n                    $scope.locals.chooseAction = function () {\n                        $scope.locals.showMobileActions = true;\n                    };\n\n                    $scope.locals.cancelChooseAction = function () {\n                        $scope.locals.showMobileActions = false;\n                    };\n                },\n                templateUrl: 'sky/templates/grids/actionbar.html'\n            };\n    }]);\n}());","/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.grids.filters', ['sky.help', 'sky.resources', 'sky.mediabreakpoints'])\n    .directive('bbGridFilters', ['bbHelp', 'bbResources', 'bbMediaBreakpoints', function (bbHelp, bbResources, bbMediaBreakpoints) {\n        return {\n            require: '^bbGrid',\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbOptions: \"=\"\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.applyFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.applyFilters) {\n                        options.applyFilters(args);\n                        $scope.updateFilters(args.filters);\n\n                        if (bbMediaBreakpoints.getCurrent().xs) {\n                            $scope.locals.expanded = false;\n                        }\n                    }\n                };\n                $scope.clearFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.clearFilters) {\n                        options.clearFilters(args);\n                        $scope.updateFilters(args.filters);\n                    }\n                };\n            }],\n            link: function ($scope, element, attrs, bbGrid) {\n                /*jslint unparam: true */\n                var box = element.find('.bb-grid-filters-box'),\n                    filtersContainer = element.find('.bb-grid-filters-container');\n\n                $scope.locals = {\n                    expanded: false\n                };\n\n                $scope.viewKeeperOptions = {};\n\n                bbGrid.viewKeeperChangedHandler = function (val) {\n                    $scope.viewKeeperOptions.viewKeeperOffsetElId = val;\n                };\n\n                bbGrid.toggleFilterMenu = function (isOpen) {\n                    if (angular.isDefined(isOpen)) {\n                        $scope.locals.expanded = isOpen;\n                    } else {\n                        $scope.locals.expanded = !$scope.locals.expanded;\n                    }\n\n                    if ($scope.locals.expanded) {\n                        bbHelp.close();\n                    }\n                };\n\n                bbGrid.openFilterMenu = function () {\n                    $scope.locals.expanded = true;\n                };\n\n                bbGrid.scope.$watch('gridCreated', function (newValue) {\n                    if (newValue) {\n                        element.parents('.bb-grid-container').prepend(element);\n                        element.show();\n\n                        if ($scope.locals.expanded) {\n                            animateFilters($scope.locals.expanded);\n                        }\n                    }\n                });\n\n                $scope.updateFilters = function (filters) {\n                    bbGrid.setFilters(filters);\n                };\n\n                $scope.resources = bbResources;\n\n                function animateFilters(isExpanded) {\n                    var animationDuration = 250;\n                    if (isExpanded) {\n                        box.css('left', '240px');\n                        filtersContainer.show();\n                        box.animate({ 'left': '0' }, animationDuration);\n                    } else {\n                        box.animate({ 'left': '240px' }, {\n                            duration: animationDuration,\n                            complete: function () {\n                                box.css('left', '0');\n                                filtersContainer.hide();\n                            }\n                        });\n                    }\n                }\n\n                $scope.$watch('locals.expanded', function (newValue, oldValue) {\n                    if (newValue !== oldValue || newValue) {\n                        animateFilters(newValue);\n                    }\n                });\n\n            },\n            templateUrl: 'sky/templates/grids/filters.html'\n        };\n    }])\n    .directive('bbGridFiltersGroup', function () {\n        return {\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbGridFiltersGroupLabel: '=',\n                isCollapsed: '=?bbGridFiltersGroupIsCollapsed'\n            },\n            templateUrl: 'sky/templates/grids/filtersgroup.html'\n        };\n    })\n    .directive('bbGridFiltersSummary', ['bbResources', function (bbResources) {\n        return {\n            require: '^bbGrid',\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: {\n                bbOptions: \"=\"\n            },\n            controller: ['$scope', function ($scope) {\n                $scope.clearFilters = function () {\n                    var args = {},\n                        options = $scope.bbOptions;\n\n                    if (options && options.clearFilters) {\n                        options.clearFilters(args);\n                        $scope.updateFilters(args.filters);\n                    }\n                };\n\n                $scope.resources = bbResources;\n\n            }],\n            link: function ($scope, element, attrs, bbGrid) {\n                /*jslint unparam: true */\n\n                bbGrid.scope.$watch('gridCreated', function () {\n                    var toolbarContainer = element.parents('.bb-grid-container').find('.bb-grid-toolbar-container .bb-grid-filter-summary-container');\n                    toolbarContainer.append(element);\n                });\n\n\n                $scope.updateFilters = function (filters) {\n                    bbGrid.setFilters(filters);\n                };\n\n                $scope.openFilterMenu = function () {\n                    if (bbGrid.openFilterMenu) {\n                        bbGrid.openFilterMenu();\n                    }\n                };\n                $scope.$watch(function () {\n                    return element.is(':visible');\n                }, function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        bbGrid.syncViewKeepers();\n                    }\n                });\n            },\n            templateUrl: 'sky/templates/grids/filterssummary.html'\n        };\n    }]);\n\n}());\n","/*jslint plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var DEFAULT_ITEMS_PER_PAGE = 5,\n        DEFAULT_MAX_PAGES = 5,\n        DEFAULT_COLUMN_SIZE = 150,\n        MULTISELECT_COLUMN_SIZE = 35,\n        DROPDOWN_TOGGLE_COLUMN_SIZE = 40,\n        DROPDOWN_TOGGLE_COLUMN_NAME = 'dropdownToggle',\n        MULTISELECT_COLUMN_NAME = 'cb';\n\n\n    function arrayObjectIndexOf(array, obj) {\n        var i;\n        for (i = 0; i < array.length; i++) {\n            if (angular.equals(array[i], obj)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    angular.module('sky.grids', ['sky.contextmenu', 'sky.mediabreakpoints', 'sky.viewkeeper', 'sky.highlight', 'sky.resources', 'sky.data', 'sky.grids.filters', 'sky.grids.actionbar', 'sky.window', 'sky.grids.toolbar'])\n        .controller('bbGridContextMenuController', ['$scope', function ($scope) {\n            function toggleDropdown($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                $scope.locals.is_open = !$scope.locals.is_open;\n            }\n\n            $scope.locals = {\n                is_open: false,\n                items: [],\n                toggleDropdown: toggleDropdown\n            };\n\n            /*istanbul ignore else: sanity check */\n            if (angular.isFunction($scope.getContextMenuItems)) {\n                $scope.locals.items = $scope.getContextMenuItems($scope.rowData.id, $scope.rowData);\n            }\n        }])\n\n\n        .directive('bbGrid', ['$window', '$compile', '$templateCache', 'bbMediaBreakpoints', 'bbViewKeeperBuilder', 'bbHighlight', 'bbResources', 'bbData', '$controller', '$timeout', 'bbWindow', '$q',\n\n            function ($window, $compile, $templateCache, bbMediaBreakpoints, bbViewKeeperBuilder, bbHighlight, bbResources, bbData, $controller, $timeout, bbWindow, $q) {\n                return {\n                    replace: true,\n                    transclude: true,\n                    restrict: 'E',\n                    scope: {\n                        options: '=bbGridOptions',\n                        multiselectActions: '=?bbMultiselectActions',\n                        updateMultiselectActions: '&bbSelectionsUpdated',\n                        paginationOptions: '=?bbGridPagination',\n                        selectedRows: '=?bbSelectedRows'\n                    },\n                    controller: ['$scope', function ($scope) {\n                        var locals,\n                            self = this;\n\n                        self.setFilters = function (filters) {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.setFilters)) {\n                                locals.setFilters(filters);\n                            }\n                        };\n\n                        self.syncViewKeepers = function () {\n                            /*istanbul ignore else: sanity check */\n                            if ($scope.syncViewKeepers) {\n                                $scope.syncViewKeepers();\n                            }\n                        };\n\n                        self.syncActionBarViewKeeper = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction($scope.syncActionBarViewKeeper)) {\n                                $scope.syncActionBarViewKeeper();\n                            }\n                        };\n\n                        self.resetMultiselect = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.resetMultiselect)) {\n                                locals.resetMultiselect();\n                            }\n                        };\n\n                        self.getVisibleSelections = function (data, selected) {\n                            var i,\n                                index,\n                                result = [];\n\n                            for (i = 0; i < selected.length; i++) {\n                                index = arrayObjectIndexOf(data, selected[i]);\n                                if (index > -1) {\n                                    result.push(selected[i]);\n                                }\n                            }\n                            return result;\n                        };\n\n                        self.toggleMultiselectRows = function (visibleSelectedRows) {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.toggleMultiselectRows)) {\n                                locals.toggleMultiselectRows(visibleSelectedRows);\n                            }\n                        };\n\n                        self.syncGridHeaderScrollToTopScrollbar = function () {\n                            /*istanbul ignore else: sanity check */\n                            if (angular.isFunction(locals.topScrollbarScroll)) {\n                                locals.topScrollbarScroll();\n                            }\n                        };\n\n                        self.scope = $scope;\n\n                        $scope.resources = bbResources;\n\n                        locals = $scope.locals = {\n                            gridId: 'bbgrid-table-' + $scope.$id,\n                            hasAdd: false,\n                            hasColPicker: true,\n                            hasFilters: true,\n                            applySearchText: function () {\n                                /*istanbul ignore else: sanity check */\n                                if (angular.isFunction(self.applySearchText)) {\n                                    self.applySearchText();\n                                }\n                            }\n                        };\n\n                        $scope.$watch('options.viewKeeperOffsetElId', function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                if (self.viewKeeperChangedHandler) {\n                                    self.viewKeeperChangedHandler(newValue);\n                                }\n                            }\n                        });\n                    }],\n                    link: function ($scope, element, attr) {\n                        $scope.customToolbar = {\n                            hasCustomToolbar: false\n                        };\n                        $scope.customToolbar.hasCustomToolbar = angular.isDefined(attr.bbGridCustomToolbar);\n\n                        $scope.$watch('locals.hasCustomToolbar', function () {\n                            var breakpoints = {},\n                                cellScopes,\n                                columnCount = 0,\n                                columnModel,\n                                compiledTemplates = [],\n                                currentExtendedColumnWidth,\n                                extendedColumnIndex,\n                                extendedColumnName,\n                                fullGrid,\n                                getContextMenuItems,\n                                hasTemplatedColumns,\n                                header,\n                                id,\n                                locals = $scope.locals,\n                                localRowSelect = false,\n                                needsExtendedColumnResize,\n                                originalExtendedColumnWidth,\n                                seemore_template = 'sky/templates/grids/seemore.html',\n                                dropdown_template = 'sky/templates/grids/dropdown.html',\n                                reorderingColumns,\n                                tableBody,\n                                tableEl = element.find('table'),\n                                tableDomEl = tableEl[0],\n                                tableWrapper = element.find('.table-responsive'),\n                                tableWrapperWidth,\n                                toolbarContainer = element.find('.bb-grid-toolbar-viewkeeper'),\n                                toolbarContainerId,\n                                totalColumnWidth,\n                                verticalOffSetElId,\n                                vkActionBarAndBackToTop,\n                                vkToolbars,\n                                vkHeader,\n                                windowEl = $($window),\n                                windowEventId,\n                                resizeStartColWidth,\n                                hasPristineColumns = true,\n                                scrollbarWidth,\n                                doNotResetRows = false;\n\n                            function getTopScrollbar() {\n                                return element.find('.bb-grid-top-scrollbar');\n                            }\n\n                            function getTopScrollbarDiv() {\n                                return element.find('.bb-grid-top-scrollbar > div');\n                            }\n\n                            function updateGridLoadedTimestampAndRowCount(count) {\n                                $scope.locals.timestamp = new Date().getTime();\n                                $scope.locals.rowcount = count;\n                            }\n\n                            function reInitGrid() {\n                                if ($scope.options && $scope.options.selectedColumnIds && $scope.options.selectedColumnIds.length > 0 && tableEl[0].grid) {\n\n                                    initGrid();\n\n                                    if ($scope.options.data && $scope.options.data.length > 0) {\n                                        setRows($scope.options.data);\n                                    }\n                                }\n                            }\n\n                            function mediaBreakpointHandler(newBreakpoints) {\n                                breakpoints = newBreakpoints;\n                                reInitGrid();\n                            }\n\n                            function buildColumnClasses(column) {\n                                var classes = '';\n\n                                //if this column does not allow search then add the appropriate class. This is used when highlighting search results\n                                if (column.exclude_from_search) {\n                                    classes += \"bb-grid-no-search \";\n                                }\n\n                                return classes;\n                            }\n\n                            function getEmptyString() {\n                                return '';\n                            }\n\n                            function buildCellAttribute(rowId, cellValue, rawObject, column) {\n                                /*jslint unparam: true*/\n                                return \"data-grid-field='\" + column.name + \"'\" + \"data-bbauto-field='\" + column.name + \"'\" + \"data-bbauto-index='\" + (tableEl.getInd(rowId) - 1) + \"'\";\n                            }\n\n                            function getColumnById(columns, id) {\n                                var column,\n                                    i;\n\n                                for (i = 0; i < columns.length; i++) {\n                                    column = columns[i];\n                                    if (column.id === id) {\n                                        return column;\n                                    }\n                                }\n                            }\n\n                            function resetExtendedColumn() {\n                                //wipe out extended column stuff\n                                extendedColumnName = null;\n                                currentExtendedColumnWidth = null;\n                                originalExtendedColumnWidth = null;\n                                extendedColumnIndex = null;\n                                needsExtendedColumnResize = false;\n                            }\n\n                            function getBreakpointsWidth(column) {\n                                var columnDefault;\n\n                                if (column.width_all > 0) {\n                                    columnDefault = column.width_all;\n                                } else {\n                                    columnDefault = DEFAULT_COLUMN_SIZE;\n                                }\n\n                                if (breakpoints.xs) {\n                                    return column.width_xs > 0 ? column.width_xs : columnDefault;\n                                } else if (breakpoints.sm) {\n                                    return column.width_sm > 0 ? column.width_sm : columnDefault;\n                                } else if (breakpoints.md) {\n                                    return column.width_md > 0 ? column.width_md : columnDefault;\n                                } else if (breakpoints.lg) {\n                                    return column.width_lg > 0 ? column.width_lg : columnDefault;\n                                }\n\n                                return columnDefault;\n                            }\n\n                            function buildColumnModel(columns, selectedColumnIds) {\n                                var colModel = [],\n                                    column,\n                                    colWidth,\n                                    index,\n                                    gridColumn;\n\n                                hasTemplatedColumns = false;\n\n                                if (getContextMenuItems) {\n                                    colModel.push({\n                                        classes: 'bb-grid-dropdown-cell',\n                                        fixed: true,\n                                        sortable: false,\n                                        name: DROPDOWN_TOGGLE_COLUMN_NAME,\n                                        label: ' ',\n                                        width: DROPDOWN_TOGGLE_COLUMN_SIZE,\n                                        title: false,\n                                        hidedlg: true,\n                                        resizable: false,\n                                        search: false,\n                                        template_url: dropdown_template,\n                                        controller: 'bbGridContextMenuController',\n                                        cellattr: buildCellAttribute,\n                                        formatter: getEmptyString,\n                                        is_context_menu: true\n                                    });\n\n                                    /*istanbul ignore else: sanity check */\n                                    if (!compiledTemplates[dropdown_template]) {\n                                        compiledTemplates[dropdown_template] = $compile($templateCache.get(dropdown_template));\n                                    }\n\n                                    hasTemplatedColumns = true;\n\n                                    totalColumnWidth = totalColumnWidth + DROPDOWN_TOGGLE_COLUMN_SIZE;\n                                }\n\n\n                                resetExtendedColumn();\n\n                                for (index = 0; index < selectedColumnIds.length; index++) {\n                                    column = getColumnById(columns, selectedColumnIds[index]);\n\n                                    if (column) {\n\n                                        colWidth = getBreakpointsWidth(column);\n\n                                        //If this is the last selected column and the sum of the columns is shorter than the area available, extend the last column\n                                        if ((index === (selectedColumnIds.length - 1)) && (tableWrapper.width() > (colWidth + totalColumnWidth))) {\n                                            needsExtendedColumnResize = true;\n                                            originalExtendedColumnWidth = colWidth;\n                                            extendedColumnName = column.name;\n                                            extendedColumnIndex = index;\n\n                                            //If multiselect and/or contextmenu exist, then the last column index is shifted.\n                                            if (locals.multiselect) {\n                                                extendedColumnIndex =  extendedColumnIndex + 1;\n                                            }\n                                            if (getContextMenuItems) {\n                                                extendedColumnIndex = extendedColumnIndex + 1;\n                                            }\n\n                                            colWidth = tableWrapper.width() - totalColumnWidth;\n                                            currentExtendedColumnWidth = colWidth;\n                                        }\n\n                                        gridColumn = {\n                                            index: column.id.toString(),\n                                            sortable: false,\n                                            id: column.id,\n                                            name: column.name,\n                                            label: column.caption,\n                                            align: (column.right_align ? 'right' : (column.center_align ? 'center' : 'left')),\n                                            classes: buildColumnClasses(column),\n                                            cellattr: buildCellAttribute,\n                                            controller: column.controller,\n                                            template_url: column.template_url,\n                                            jsonmap: column.jsonmap,\n                                            allow_see_more: column.allow_see_more,\n                                            width: colWidth\n                                        };\n\n                                        if (column.allow_see_more && !gridColumn.template_url) {\n                                            gridColumn.template_url = seemore_template;\n\n                                            if (!compiledTemplates[seemore_template]) {\n                                                compiledTemplates[seemore_template] = $compile($templateCache.get(seemore_template));\n                                            }\n                                        }\n\n                                        if (gridColumn.template_url) {\n                                            //Setup a formatter to return an empty string until the\n                                            //angular template is processed for the cell.\n                                            gridColumn.formatter = getEmptyString;\n                                            hasTemplatedColumns = true;\n                                        } else if (column.colFormatter) {\n                                            gridColumn.formatter = column.colFormatter;\n                                        }\n\n                                        colModel.push(gridColumn);\n\n                                        totalColumnWidth = totalColumnWidth + colWidth;\n                                    }\n                                }\n\n                                return colModel;\n                            }\n\n                            function getColumnElementIdFromName(columnName) {\n                                return locals.gridId + \"_\" + columnName;\n                            }\n\n                            function getColumnNameFromElementId(columnName) {\n                                /*istanbul ignore else: sanity check */\n                                if (columnName) {\n                                    return columnName.replace(locals.gridId + \"_\", \"\");\n                                }\n                            }\n\n                            function getDesiredGridWidth() {\n                                var width = tableWrapper.width();\n\n                                if (width < totalColumnWidth) {\n                                    width = totalColumnWidth;\n                                    tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n                                } else {\n                                    tableWrapper.addClass('bb-grid-table-wrapper');\n                                }\n\n                                return width;\n                            }\n\n                            function setScrollbarHeight() {\n                                var topScrollbar = getTopScrollbar(),\n                                    topScrollbarDiv = getTopScrollbarDiv();\n\n                                if (totalColumnWidth > (topScrollbar.width()) && !breakpoints.xs) {\n                                    topScrollbar.height(scrollbarWidth);\n                                    topScrollbarDiv.height(scrollbarWidth);\n                                } else {\n                                    topScrollbar.height(0);\n                                    topScrollbarDiv.height(0);\n                                }\n                            }\n\n                            function resetTopScrollbar() {\n                                var topScrollbarDiv = getTopScrollbarDiv();\n                                topScrollbarDiv.width(totalColumnWidth);\n                                setScrollbarHeight();\n                            }\n\n                            function setColumnSize(columnName, columnSize, totalWidth) {\n                                var gridHeaders,\n                                    colSizePx = columnSize + 'px',\n                                    bodyScrollLeft,\n                                    tableGrid = tableEl[0].grid;\n\n                                gridHeaders = tableGrid.headers;\n                                bodyScrollLeft = tableGrid.bDiv.scrollLeft;\n                                /* jqGrid does not provide a function to change a single column column size.\n                                   This code snippet mirrors how jqGrid changes column size in their own dragEnd\n                                   function.\n                                */\n                                tableEl[0].p.colModel[extendedColumnIndex].width = columnSize;\n                                gridHeaders[extendedColumnIndex].width = columnSize;\n                                gridHeaders[extendedColumnIndex].el.style.width = colSizePx;\n                                tableGrid.cols[extendedColumnIndex].style.width = colSizePx;\n                                /* istanbul ignore next: sanity check */\n                                tableEl[0].p.tblwidth = totalWidth || tableEl[0].p.tblwidth;\n                                tableGrid.hDiv.scrollLeft = bodyScrollLeft;\n                            }\n\n                            function resizeExtendedColumn(changedWidth, isIncreasing) {\n                                var extendedShrinkWidth = currentExtendedColumnWidth - originalExtendedColumnWidth;\n\n                                //If the extended portion of the last column is less than the amount resized\n                                if (extendedShrinkWidth <= changedWidth) {\n                                    //decrease extended column to original size\n\n\n                                    //increase grid width by remainder and wipe out all the extended stuff\n                                    if (isIncreasing) {\n                                        totalColumnWidth = totalColumnWidth + (changedWidth - extendedShrinkWidth);\n                                    } else {\n                                        totalColumnWidth = totalColumnWidth - extendedShrinkWidth;\n                                    }\n                                    setColumnSize(extendedColumnName, originalExtendedColumnWidth, totalColumnWidth);\n\n                                    tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n                                    resetExtendedColumn();\n\n                                } else {\n                                    //decrease extended column width by changedWidth\n                                    currentExtendedColumnWidth = currentExtendedColumnWidth - changedWidth;\n\n\n                                    if (!isIncreasing) {\n                                        totalColumnWidth = totalColumnWidth - changedWidth;\n                                    }\n                                    setColumnSize(extendedColumnName, currentExtendedColumnWidth, totalColumnWidth);\n\n                                }\n                                tableEl.setGridWidth(totalColumnWidth, false);\n                                resetTopScrollbar();\n                            }\n\n                            function resetGridWidth(oldWidth, newWidth) {\n                                var changedWidth,\n                                    topScrollbar = getTopScrollbar(),\n                                    width;\n\n                                topScrollbar.width(tableWrapper.width());\n                                if (needsExtendedColumnResize && newWidth < oldWidth) {\n                                    changedWidth = oldWidth - newWidth;\n                                    resizeExtendedColumn(changedWidth, false);\n                                } else {\n                                    if (totalColumnWidth === oldWidth) {\n                                        totalColumnWidth = newWidth;\n                                    }\n\n                                    width = getDesiredGridWidth();\n\n                                    /*istanbul ignore else: sanity check */\n                                    if (width > 0) {\n                                        tableEl.setGridWidth(width);\n                                        resetTopScrollbar();\n                                    }\n                                }\n                            }\n\n                            function getLastIndex() {\n                                var lastIndex = $scope.options.selectedColumnIds.length - 1;\n\n                                if (locals.multiselect) {\n                                    lastIndex = lastIndex + 1;\n                                }\n                                if (getContextMenuItems) {\n                                    lastIndex = lastIndex + 1;\n                                }\n\n                                return lastIndex;\n                            }\n\n                            function resizeStart(event, index) {\n                                var lastIndex = getLastIndex(),\n                                    jqGridEl,\n                                    thEls;\n\n                                hasPristineColumns = false;\n\n                                jqGridEl = element.find('.ui-jqgrid');\n\n                                //if resizing last element and tableEl smaller than table wrapper\n\n                                if (index === lastIndex && tableWrapperWidth > jqGridEl.width()) {\n                                    //increase width of child of table-responsive\n                                    jqGridEl.width(tableWrapperWidth);\n                                    //increase width of hdiv\n                                    element.find('.ui-jqgrid-hdiv').width(tableWrapperWidth);\n                                    //make padding right on tr of headers\n                                    element.find('.ui-jqgrid-hdiv tr').css('padding-right', tableWrapperWidth.toString() + 'px');\n                                }\n\n                                fullGrid.find('.ui-jqgrid-resize-mark').height(fullGrid.height());\n                                thEls = element.find('.ui-jqgrid .ui-jqgrid-hdiv .ui-jqgrid-htable th');\n                                resizeStartColWidth = parseInt(thEls[index].style.width);\n\n                            }\n\n                            function syncHeaderToTableWrapper() {\n                                if (vkHeader && vkHeader.isFixed) {\n                                    header.width(tableWrapper.width());\n                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                }\n                            }\n\n                            function resizeStop(newWidth, index) {\n                                var changedWidth;\n\n                                tableWrapper.addClass('bb-grid-table-wrapper-overflow');\n\n                                changedWidth = newWidth - resizeStartColWidth;\n\n                                //If your last column was extended and this is the first resize\n                                if (needsExtendedColumnResize) {\n                                    //If the column you're resizing is not the extended column and you're increasing the size\n                                    if (index !== extendedColumnIndex && changedWidth > 0) {\n\n                                        resizeExtendedColumn(changedWidth, true);\n\n                                        resetExtendedColumn();\n                                        syncHeaderToTableWrapper();\n\n                                        return;\n                                    }\n                                    resetExtendedColumn();\n                                }\n\n                                totalColumnWidth = totalColumnWidth + changedWidth;\n                                tableEl.setGridWidth(totalColumnWidth, false);\n                                resetTopScrollbar();\n                                syncHeaderToTableWrapper();\n\n                                return;\n                            }\n\n                            function setSortStyles() {\n                                var className,\n                                    headerElId,\n                                    sortOptions;\n                                /*istanbul ignore else: sanity check */\n                                if (header) {\n                                    header.find('th').removeClass('sorting-asc').removeClass('sorting-desc');\n                                    /* istanbul ignore else: sanity check */\n                                    if ($scope.options) {\n                                        sortOptions = $scope.options.sortOptions;\n                                        if (sortOptions && sortOptions.column) {\n                                            headerElId = getColumnElementIdFromName(sortOptions.column);\n\n                                            if (sortOptions.descending) {\n                                                className = 'sorting-desc';\n                                            } else {\n                                                className = 'sorting-asc';\n                                            }\n\n                                            header.find('#' + headerElId).addClass(className);\n                                        }\n                                    }\n                                }\n                            }\n\n                            function columnIsSortable(columnName) {\n                                var excludedColumns,\n                                    sortOptions = $scope.options.sortOptions;\n\n                                if (columnName === DROPDOWN_TOGGLE_COLUMN_NAME || columnName === MULTISELECT_COLUMN_NAME) {\n                                    return false;\n                                }\n\n\n                                /*istanbul ignore else: sanity check */\n                                if (sortOptions) {\n                                    excludedColumns = sortOptions.excludedColumns;\n                                    if (excludedColumns) {\n                                        if (excludedColumns.indexOf(columnName) > -1) {\n                                            return false;\n                                        }\n                                    }\n                                }\n                                return true;\n                            }\n\n                            function highlightSearchText() {\n                                var options = $scope.options;\n                                if (options && options.searchText) {\n                                    bbHighlight(tableEl.find(\"td\").not('.bb-grid-no-search'), options.searchText, 'highlight');\n                                } else {\n                                    bbHighlight.clear(tableEl);\n                                }\n                            }\n\n                            function linkCellValue(scope, cell, linkFunction) {\n                                linkFunction(scope, function (cloned) {\n                                    cell.append(cloned);\n                                });\n                            }\n\n                            function afterInsertRow(rowid, rowdata, rowelem) {\n                                /*jshint validthis: true */\n                                var cell,\n                                    column,\n                                    columnData,\n                                    i,\n                                    itemScope,\n                                    row,\n                                    rowIndex;\n\n                                if (hasTemplatedColumns) {\n\n                                    if (!tableBody) {\n                                        tableBody = $(this);\n                                    }\n\n                                    row = tableBody.find('#' + rowid);\n\n                                    for (i = 0; i < columnModel.length; i++) {\n                                        column = columnModel[i];\n\n                                        if (column.template_url) {\n\n                                            cell = row.find('[data-grid-field=\"' + column.name + '\"]');\n                                            columnData = rowdata[column.name];\n\n                                            //Create a new scope and apply the cell object's properties to it.\n                                            itemScope = $scope.$new(true);\n\n                                            itemScope.data = columnData;\n                                            itemScope.rowData = rowelem;\n\n                                            if (column.allow_see_more) {\n                                                itemScope.skyResources = $scope.resources;\n                                            }\n\n                                            if (column.is_context_menu) {\n                                                itemScope.getContextMenuItems = getContextMenuItems;\n                                            }\n\n                                            //make the resources from the caller available to the column templates\n                                            if ($scope.options.resources) {\n                                                itemScope.resources = $scope.options.resources;\n                                            }\n\n                                            if (column.controller) {\n                                                $controller(column.controller, {\n                                                    $scope: itemScope\n                                                });\n                                            }\n\n                                            cellScopes.push(itemScope); //Stash scope for cleanup later.\n\n                                            linkCellValue(itemScope, cell, compiledTemplates[column.template_url]);\n                                        }\n                                    }\n                                }\n\n                                rowIndex = tableEl.getInd(rowid);\n\n                                //check if row should be multiselected\n                                if ($scope.selectedRows && $scope.selectedRows.length > 0) {\n\n                                    row = $scope.options.data[(rowIndex - 1)];\n                                    if (row && arrayObjectIndexOf($scope.selectedRows, row) > -1) {\n                                        tableEl.setSelection(rowid, false);\n                                    }\n                                }\n                            }\n\n                            function setColumnHeaderAlignment() {\n                                var alignmentClass,\n                                    column,\n                                    i;\n\n                                for (i = 0; i < columnModel.length; i++) {\n                                    column = columnModel[i];\n                                    if (column.align === 'center') {\n                                        alignmentClass = 'bb-grid-th-center';\n                                    } else if (column.align === 'right') {\n                                        alignmentClass = 'bb-grid-th-right';\n                                    } else {\n                                        alignmentClass = 'bb-grid-th-left';\n                                    }\n\n                                    tableEl.setLabel(column.name, '', alignmentClass);\n\n                                }\n                            }\n\n                            function gridComplete() {\n                                setColumnHeaderAlignment();\n                            }\n\n                            function gridColumnsReordered(orderedColumns) {\n                                var i,\n                                    offset = 0,\n                                    oldIndex,\n                                    selectedColumnIds = $scope.options.selectedColumnIds,\n                                    newSelectedColumnIds = [];\n\n                                resetExtendedColumn();\n\n                                //Need to account for context menu if it exists.  It will always be the first\n                                //column before and after the reorder\n                                if (angular.isFunction(getContextMenuItems)) {\n                                    offset += 1;\n                                }\n\n                                if (locals.multiselect) {\n                                    offset += 1;\n                                }\n\n                                for (i = offset; i < orderedColumns.length; i++) {\n                                    oldIndex = orderedColumns[i];\n                                    newSelectedColumnIds.push(selectedColumnIds[oldIndex - offset]);\n                                }\n\n                                reorderingColumns = true;\n                                $scope.options.selectedColumnIds = newSelectedColumnIds;\n                                $scope.$apply();\n                            }\n\n                            function getSortable() {\n                                var sortable = {\n                                    update: gridColumnsReordered\n                                };\n\n                                if (getContextMenuItems) {\n                                    sortable.exclude = \"#\" + $scope.locals.gridId + \"_\" + DROPDOWN_TOGGLE_COLUMN_NAME;\n                                }\n\n                                return sortable;\n                            }\n\n                            function clearSelectedRowsObject() {\n                                $scope.selectedRows = [];\n                            }\n\n\n                            function resetMultiselect() {\n                                clearSelectedRowsObject();\n                                tableEl.resetSelection();\n                            }\n\n\n\n                            function onSelectAll(rowIds, status) {\n                                /*jslint unparam: true */\n                                var allRowData;\n\n                                localRowSelect = true;\n\n                                clearSelectedRowsObject();\n\n                                if (status === true) {\n                                    allRowData = $scope.options.data;\n                                    if (allRowData && allRowData.length > 0) {\n                                        $scope.selectedRows = allRowData.slice();\n                                    }\n                                }\n                                $scope.$apply();\n                            }\n\n\n                            function toggleMultiselectRows(visibleSelectedRows) {\n                                var i,\n                                    index,\n                                    rowIds;\n\n                                rowIds = tableEl.getDataIDs();\n\n                                for (i = 0; i < visibleSelectedRows.length; i++) {\n                                    index = arrayObjectIndexOf($scope.options.data, visibleSelectedRows[i]);\n                                    tableEl.setSelection(rowIds[index], true);\n                                }\n                            }\n\n\n                            function onSelectRow(rowId, status) {\n                                $timeout(function () {\n                                    var index,\n                                        rowIndex = tableEl.getInd(rowId),\n                                        row;\n                                    row = $scope.options.data[(rowIndex - 1)];\n\n                                    localRowSelect = true;\n\n                                    index = arrayObjectIndexOf($scope.selectedRows, row);\n\n                                    if (status === true && index === -1 && row) {\n                                        $scope.selectedRows.push(row);\n                                    } else if (status === false && index > -1) {\n                                        $scope.selectedRows.splice(index, 1);\n                                    }\n                                });\n                            }\n\n                            function setMultiselectRow(rowId, rowIndex) {\n                                var row;\n\n                                tableEl.setSelection(rowId, false);\n                                row  = $scope.options.data[(rowIndex - 1)];\n                                $scope.selectedRows.push(row);\n                            }\n\n                            function beforeSelectRow(rowId, e) {\n                                var endIndex,\n                                    i,\n                                    lastSelectedRow,\n                                    rowIds,\n                                    startIndex = parseInt(tableEl.getInd(rowId));\n\n                                localRowSelect = true;\n\n                                if (e.shiftKey) {\n                                    lastSelectedRow = tableEl.getInd(tableEl.getGridParam('selrow'));\n                                    resetMultiselect();\n\n                                    //if lastSelectedRow is undefined or null, set to 1\n                                    if (angular.isUndefined(lastSelectedRow) || lastSelectedRow === null) {\n                                        lastSelectedRow = 1;\n                                    }\n\n                                    endIndex = parseInt(lastSelectedRow);\n\n                                    rowIds = tableEl.getDataIDs();\n\n                                    //set shift click selection first so last selected row is set properly\n                                    if (endIndex < startIndex) {\n                                        for (i = startIndex; i >  endIndex - 1; i = i - 1) {\n                                            setMultiselectRow(rowIds[(i - 1)], i);\n                                        }\n                                    } else if (endIndex > startIndex) {\n                                        for (i = startIndex; i <  endIndex + 1; i = i + 1) {\n                                            setMultiselectRow(rowIds[(i - 1)], i);\n                                        }\n                                    } else {\n                                        $scope.$apply();\n                                        return true;\n                                    }\n\n                                    $scope.$apply();\n                                    return false;\n                                }\n                                return true;\n                            }\n\n                            function pageChanged() {\n                                var skip = ($scope.locals.currentPage - 1) * $scope.paginationOptions.itemsPerPage,\n                                    top = $scope.paginationOptions.itemsPerPage;\n\n                                $scope.$emit('loadMoreRows', {top: top, skip: skip});\n\n                            }\n\n                            function initializePagination() {\n                                if (angular.isDefined($scope.paginationOptions)) {\n\n                                    if (!$scope.paginationOptions.itemsPerPage) {\n                                        $scope.paginationOptions.itemsPerPage = DEFAULT_ITEMS_PER_PAGE;\n                                    }\n\n                                    if (!$scope.paginationOptions.maxPages) {\n                                        $scope.paginationOptions.maxPages = DEFAULT_MAX_PAGES;\n                                    }\n\n                                    $scope.paginationOptions.pageChanged = pageChanged;\n\n                                    $scope.locals.currentPage = 1;\n                                }\n                            }\n\n                            function fancyCheckOff() {\n                                element.find('td .bb-check-checkbox').off();\n                            }\n\n                            function wrapCheckboxEl(checkboxEl) {\n                                checkboxEl.wrap('<label class=\"bb-check-wrapper\"></label>');\n                                checkboxEl.after('<span class=\"bb-check-checkbox\"></span>');\n                            }\n\n                            function setUpFancyCheckHeader() {\n                                var headerCheckEl =  header.find('th .cbox');\n                                wrapCheckboxEl(headerCheckEl);\n                            }\n\n                            function setUpFancyCheckCell() {\n                                var checkCellEl = element.find('td > .cbox');\n                                wrapCheckboxEl(checkCellEl);\n                                element.find('td .bb-check-checkbox').on('click', function (event) {\n                                    event.preventDefault();\n                                });\n                            }\n\n                            function getIdPrefix() {\n                                return 'bb-grid-row-' + $scope.$id + '-';\n                            }\n\n                            function initGrid() {\n                                var columns,\n                                    jqGridOptions,\n                                    selectedColumnIds,\n                                    useGridView = true,\n                                    hoverrows = false;\n\n                                totalColumnWidth = 0;\n\n                                hasPristineColumns = true;\n\n                                tableWrapperWidth = tableWrapper.width();\n\n                                locals.multiselect = false;\n\n                                //Clear reference to the table body since it will be recreated.\n                                tableBody = null;\n\n                                //Unload grid if it already exists.\n                                tableEl.jqGrid('GridUnload');\n                                fancyCheckOff();\n\n                                tableEl = element.find('table');\n                                tableDomEl = tableEl[0];\n\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n\n                                    columns = $scope.options.columns;\n                                    selectedColumnIds = $scope.options.selectedColumnIds;\n                                    getContextMenuItems = $scope.options.getContextMenuItems;\n\n                                    if ($scope.options.multiselect) {\n                                        locals.multiselect = true;\n                                        hoverrows = true;\n\n                                        totalColumnWidth = totalColumnWidth + MULTISELECT_COLUMN_SIZE;\n                                    }\n                                    $scope.searchText = $scope.options.searchText;\n                                }\n\n                                // Allow grid styles to be changed when grid is in multiselect mode (such as the\n                                // header checkbox alignment).\n                                element[locals.multiselect ? 'addClass' : 'removeClass']('bb-grid-multiselect');\n\n\n                                if (getContextMenuItems) {\n                                    useGridView = false;\n                                }\n\n                                if (columns && selectedColumnIds) {\n\n\n                                    columnModel = buildColumnModel(columns, selectedColumnIds);\n                                    columnCount = columnModel.length;\n\n                                    jqGridOptions = {\n                                        afterInsertRow: afterInsertRow,\n                                        autoencode: true,\n                                        beforeSelectRow: beforeSelectRow,\n                                        colModel: columnModel,\n                                        datatype: angular.noop,\n                                        gridComplete: gridComplete,\n                                        gridView: useGridView,\n                                        height: 'auto',\n                                        hoverrows: hoverrows,\n                                        idPrefix: getIdPrefix(),\n                                        multiselect: locals.multiselect,\n                                        multiselectWidth: MULTISELECT_COLUMN_SIZE,\n                                        onSelectAll: onSelectAll,\n                                        onSelectRow: onSelectRow,\n                                        resizeStart: resizeStart,\n                                        resizeStop: resizeStop,\n                                        rowNum: -1,\n                                        shrinktofit: false,\n                                        sortable: getSortable(),\n                                        width: getDesiredGridWidth()\n                                    };\n\n\n                                    tableEl.jqGrid(jqGridOptions);\n\n                                    header = $(tableDomEl.grid.hDiv);\n\n                                    //Attach click handler for sorting columns\n                                    header.find('th').on('click', function () {\n                                        var sortOptions = $scope.options.sortOptions,\n                                            columnName;\n\n                                        if (!sortOptions) {\n                                            sortOptions = $scope.options.sortOptions = {};\n                                        }\n\n                                        columnName = getColumnNameFromElementId(this.id);\n\n                                        if (columnIsSortable(columnName)) {\n                                            sortOptions.column = columnName;\n                                            sortOptions.descending = $(this).hasClass('sorting-asc');\n                                            $scope.$apply();\n                                        }\n                                    });\n\n                                    fullGrid = header.parents('.ui-jqgrid:first');\n\n                                    if (vkHeader) {\n                                        vkHeader.destroy();\n                                    }\n\n                                    $scope.locals.showToolbar = true;\n\n                                    getTopScrollbar().width(tableWrapper.width());\n                                    resetTopScrollbar();\n\n                                    if (!$scope.options.fixedToolbar) {\n                                        vkHeader = new bbViewKeeperBuilder.create({\n                                            el: header[0],\n                                            boundaryEl: tableWrapper[0],\n                                            verticalOffSetElId: toolbarContainerId,\n                                            setWidth: true,\n                                            onStateChanged: function () {\n                                                if (vkHeader.isFixed) {\n                                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                                } else {\n                                                    header.scrollLeft(0);\n                                                }\n\n                                            }\n                                        });\n                                    }\n\n                                    setSortStyles();\n\n                                    setUpFancyCheckHeader();\n\n                                    $scope.gridCreated = true;\n\n                                }\n\n                            }\n\n                            function destroyCellScopes() {\n                                var i;\n                                if (cellScopes) {\n                                    for (i = 0; i < cellScopes.length; i++) {\n                                        cellScopes[i].$destroy();\n                                    }\n                                }\n                                cellScopes = [];\n                            }\n\n                            function loadColumnTemplates(callback) {\n                                var columns,\n                                    templateUrlsToLoad = {};\n\n                                //Identify any template URLs that haven't been compiled\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n                                    columns = $scope.options.columns;\n                                    /*istanbul ignore else: sanity check */\n                                    if (columns) {\n                                        angular.forEach(columns, function (column) {\n                                            var templateUrl = column.template_url;\n\n                                            if (templateUrl && !compiledTemplates[templateUrl]) {\n                                                templateUrlsToLoad[templateUrl] = templateUrl;\n                                            }\n                                        });\n                                    }\n                                }\n\n                                //Load template URLs that need compiling\n                                bbData.load({\n                                    text: templateUrlsToLoad\n                                }).then(function (result) {\n                                    var p,\n                                        template;\n\n                                    // Compile templates and store them for use when adding rows.\n                                    for (p in result.text) {\n                                        /*istanbul ignore else: sanity check */\n                                        if (result.text.hasOwnProperty(p)) {\n                                            template = result.text[p];\n\n                                            /*istanbul ignore else: sanity check */\n                                            if (template) {\n                                                compiledTemplates[p] = $compile(template);\n                                            }\n                                        }\n                                    }\n\n                                    callback();\n                                });\n                            }\n\n                            function handleTableWrapperResize() {\n                                var newWidth = tableWrapper.width(),\n                                    topScrollbar = getTopScrollbar();\n\n                                if (tableWrapperWidth && tableWrapperWidth !== newWidth) {\n                                    if (hasPristineColumns) {\n                                        resetGridWidth(tableWrapperWidth, newWidth);\n                                    } else {\n                                        topScrollbar.width(newWidth);\n                                    }\n                                    tableWrapperWidth = newWidth;\n                                } else {\n                                    tableWrapperWidth = newWidth;\n                                }\n                            }\n\n                            function setRows(rows) {\n                                /*istanbul ignore else: sanity check */\n                                if (tableDomEl.addJSONData) {\n                                    loadColumnTemplates(function () {\n\n                                        if (locals.multiselect) {\n                                            element.find('td').off('mousedown.gridmousedown');\n                                        }\n\n                                        tableEl.resetSelection();\n\n                                        fancyCheckOff();\n\n                                        destroyCellScopes();\n                                        tableDomEl.addJSONData(rows);\n                                        $timeout(highlightSearchText);\n                                        handleTableWrapperResize();\n                                        /*istanbul ignore next: sanity check */\n                                        updateGridLoadedTimestampAndRowCount(rows ? rows.length : 0);\n\n                                        setUpFancyCheckCell();\n\n                                    });\n                                }\n                            }\n\n                            function setupToolbarViewKeepers() {\n                                if (vkToolbars) {\n                                    vkToolbars.destroy();\n                                }\n\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if ($scope.options) {\n                                    verticalOffSetElId = $scope.options.viewKeeperOffsetElId;\n                                }\n\n                                if (!$scope.options || !$scope.options.fixedToolbar) {\n                                    vkToolbars = new bbViewKeeperBuilder.create({\n                                        el: toolbarContainer[0],\n                                        boundaryEl: tableWrapper[0],\n                                        setWidth: true,\n                                        verticalOffSetElId: verticalOffSetElId,\n                                        onStateChanged: function () {\n                                            $timeout(function () {\n                                                locals.isScrolled = vkToolbars.isFixed;\n                                            });\n                                        }\n                                    });\n                                }\n\n\n                                vkActionBarAndBackToTop = new bbViewKeeperBuilder.create({\n                                    el: element.find('.bb-grid-action-bar-and-back-to-top')[0],\n                                    boundaryEl: element[0],\n                                    setWidth: true,\n                                    verticalOffSetElId: verticalOffSetElId,\n                                    fixToBottom: true\n                                });\n                            }\n\n                            function backToTop() {\n                                vkToolbars.scrollToTop();\n                            }\n\n                            locals.resetMultiselect = resetMultiselect;\n\n                            locals.toggleMultiselectRows = toggleMultiselectRows;\n\n                            locals.setFilters = function (filters) {\n                                $scope.options.filters = filters;\n                                $scope.locals.applySearchText();\n                            };\n\n                            function loadMore() {\n                                var deferred = $q.defer(),\n                                    loadMorePromise = deferred.promise;\n\n                                loadMorePromise.then(function (moreRows) {\n                                    tableEl.addRowData('', moreRows);\n                                    $scope.options.data = $scope.options.data.concat(moreRows);\n                                    setUpFancyCheckCell();\n                                    doNotResetRows = true;\n                                });\n\n                                $scope.$emit('loadMoreRows', {\n                                    promise: deferred\n                                });\n\n                            }\n\n                            $scope.locals.loadMore = loadMore;\n\n                            if (angular.isUndefined($scope.selectedRows) || !angular.isArray($scope.selectedRows)) {\n                                $scope.selectedRows = [];\n                            }\n\n                            scrollbarWidth = bbWindow.getScrollbarWidth();\n\n                            id = $scope.$id;\n                            toolbarContainerId = id + '-toolbar-container';\n\n                            locals.backToTop = backToTop;\n\n                            //Apply unique id to the table.  ID is required by jqGrid.\n                            toolbarContainer.attr('id', toolbarContainerId);\n\n                            $scope.$watch('options.selectedColumnIds', function (newValue) {\n                                var columnChangedData;\n\n                                /*istanbul ignore else: sanity check */\n                                if (newValue) {\n                                    if (reorderingColumns) {\n                                        reorderingColumns = false;\n                                        return;\n                                    }\n\n                                    initGrid();\n\n                                    // re-evaluated so the grid won't automatically be reloaded with existing data.\n                                    columnChangedData = {\n                                        willResetData: false\n                                    };\n\n                                    $scope.$emit('includedColumnsChanged', columnChangedData);\n\n\n                                    if (!columnChangedData.willResetData && $scope.options.data && $scope.options.data.length > 0) {\n                                        // Data won't change as a result of the columns changing; reload existing data.\n                                        setRows($scope.options.data);\n                                    }\n                                }\n                            }, true);\n\n                            $scope.$watchCollection('selectedRows', function (newSelections) {\n                                var i,\n                                    index,\n                                    rowIds;\n\n                                if (localRowSelect) {\n                                    localRowSelect = false;\n                                    return;\n                                }\n\n                                if (tableEl[0].grid && $scope.options.data && $scope.options.data.length > 0) {\n                                    //blow away existing selections\n                                    tableEl.resetSelection();\n\n                                    rowIds = tableEl.getDataIDs();\n\n                                    for (i = 0; i < newSelections.length; i++) {\n\n                                        index = arrayObjectIndexOf($scope.options.data, newSelections[i]);\n\n                                        if (index > -1) {\n                                            tableEl.setSelection(rowIds[index], false);\n                                        }\n\n                                    }\n                                }\n\n                            });\n\n                            $scope.$watch('paginationOptions', initializePagination, true);\n\n                            $scope.$watchCollection('options.data', function (newValue) {\n                                if (doNotResetRows) {\n                                    doNotResetRows = false;\n                                } else {\n                                    setRows(newValue);\n                                }\n                            });\n\n                            $scope.syncViewKeepers = function () {\n                                /*istanbul ignore else: sanity check */\n                                if (vkToolbars) {\n                                    vkToolbars.syncElPosition();\n                                }\n                            };\n\n                            $scope.syncActionBarViewKeeper = function () {\n                                /*istanbul ignore else: sanity check */\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.syncElPosition();\n                                }\n                            };\n\n                            $scope.$watch('options.sortOptions', setSortStyles, true);\n\n                            $scope.$watchGroup(['options.viewKeeperOffsetElId', 'options.fixedToolbar'], function () {\n                                setupToolbarViewKeepers();\n                            });\n\n                            $scope.$watch('options.filters', function (f) {\n                                $scope.$broadcast('updateAppliedFilters', f);\n                            });\n\n                            bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                            tableWrapper.on('scroll', function () {\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkHeader) {\n                                    vkHeader.syncElPosition();\n                                }\n\n                                if (header.hasClass('bb-viewkeeper-fixed')) {\n                                    header.scrollLeft(tableWrapper.scrollLeft());\n                                }\n\n                                getTopScrollbar().scrollLeft(tableWrapper.scrollLeft());\n                            });\n\n                            windowEventId = 'bbgrid' + id;\n\n                            windowEl.on('resize.' + windowEventId + ', orientationchange.' + windowEventId, function () {\n                                handleTableWrapperResize();\n                            });\n\n                            // Reinitialize grid when grid element resizes from 0\n                            $scope.$watch(function () {\n                                return element.width();\n                            }, function (newValue, oldValue) {\n                                if (newValue !== oldValue && oldValue === 0) {\n                                    reInitGrid();\n                                }\n                            });\n\n                            $scope.locals.topScrollbarScroll = function () {\n                                var topScrollbar = getTopScrollbar();\n                                tableWrapper.scrollLeft(topScrollbar.scrollLeft());\n                                if (header.hasClass('bb-viewkeeper-fixed')) {\n                                    header.scrollLeft(topScrollbar.scrollLeft());\n                                }\n                            };\n\n                            $scope.locals.hasWaitAndEmpty = function () {\n                                return $scope.options && $scope.options.loading && (!$scope.options.data || $scope.options.data.length < 1);\n                            };\n\n\n                            element.on('$destroy', function () {\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkToolbars) {\n                                    vkToolbars.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkHeader) {\n                                    vkHeader.destroy();\n                                }\n\n                                /*istanbul ignore else: sanity check */\n                                if (vkActionBarAndBackToTop) {\n                                    vkActionBarAndBackToTop.destroy();\n                                }\n\n                                windowEl.off('resize.' + windowEventId + ', orientationchange.' + windowEventId);\n\n                                fancyCheckOff();\n\n                                bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                            });\n                        });\n                    },\n                    templateUrl: 'sky/templates/grids/grid.html'\n                };\n            }]);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function BBGridToolbar(bbResources, bbModal) {\n        return {\n            require: '?^bbGrid',\n            scope: {\n                options: '=?bbToolbarOptions'\n            },\n            transclude: true,\n            link: function ($scope, el, attr, bbGrid) {\n                var topScrollbarEl = el.find('.bb-grid-top-scrollbar');\n\n                function applySearchText() {\n                    var searchEl;\n\n                    searchEl = el.find('.bb-search-container input');\n                    /*istanbul ignore else: sanity check */\n                    if (angular.isFunction(searchEl.select) && searchEl.length > 0 && $scope.searchText) {\n                        searchEl.eq(0).select();\n                    }\n\n                    $scope.options.searchText = $scope.searchText;\n                }\n\n                function openColumnPicker() {\n                    bbModal.open({\n                        templateUrl: 'sky/templates/grids/columnpicker.html',\n                        controller: 'BBGridColumnPickerController',\n                        resolve: {\n                            columns: function () {\n                                return $scope.options.columns;\n                            },\n                            selectedColumnIds: function () {\n                                return $scope.options.selectedColumnIds;\n                            },\n                            columnPickerHelpKey: function () {\n                                return $scope.options.columnPickerHelpKey;\n                            },\n                            listMode: function () {\n                                return $scope.options.columnPickerMode;\n                            }\n                        }\n                    }).result.then(function (selectedColumnIds) {\n                        $scope.options.selectedColumnIds = selectedColumnIds;\n                    });\n                }\n\n                function toggleFilterMenu(isOpen) {\n                    if ($scope.options && $scope.options.hasInlineFilters) {\n                        if (angular.isDefined(isOpen)) {\n                            $scope.toolbarLocals.filtersVisible = isOpen;\n                        } else {\n                            $scope.toolbarLocals.filtersVisible = !$scope.toolbarLocals.filtersVisible;\n                        }\n                    /*istanbul ignore else: sanity check */\n                    } else if (bbGrid !== null && angular.isFunction(bbGrid.toggleFilterMenu)) {\n                        bbGrid.toggleFilterMenu(isOpen);\n                    }\n                }\n\n                function moveInlineFilters() {\n                    el.parents('.bb-grid-container').find('.bb-filters-inline')\n                        .appendTo(el.find('.bb-grid-filter-inline-container'));\n\n                }\n\n                $scope.toolbarLocals = {\n                    applySearchText: applySearchText,\n                    openColumnPicker: openColumnPicker,\n                    toggleFilterMenu: toggleFilterMenu\n                };\n\n                $scope.resources = bbResources;\n\n                /*istanbul ignore else: sanity check */\n                if (bbGrid !== null && angular.isUndefined($scope.options)) {\n                    $scope.$watch(function () {\n                        return bbGrid.scope.options;\n                    }, function (newValue) {\n                        $scope.options = newValue;\n                    });\n                }\n\n                //grid columns changed, initialize toolbar stuff\n                $scope.$watch('options.selectedColumnIds', function (newValue) {\n                    if (angular.isDefined(newValue)) {\n\n                        $scope.searchText = $scope.options.searchText;\n\n                        if ($scope.options.hasInlineFilters) {\n                            moveInlineFilters();\n                        }\n\n                        /*istanbul ignore else: sanity check */\n                        if (bbGrid !== null) {\n                            bbGrid.applySearchText = applySearchText;\n                        }\n\n                        if (angular.isFunction($scope.options.onAddClick)) {\n                            $scope.toolbarLocals.hasAdd = true;\n                        }\n                    }\n                }, true);\n\n                $scope.$watch('options.filtersOpen', function (newValue) {\n                    if (angular.isDefined(newValue)) {\n                        toggleFilterMenu(newValue);\n                    }\n                });\n\n                /*istanbul ignore else: sanity check */\n                if (bbGrid !== null) {\n                    topScrollbarEl.on('scroll', function () {\n                        bbGrid.syncGridHeaderScrollToTopScrollbar();\n                    });\n                }\n\n                $scope.$on('$destroy', function () {\n                    /*istanbul ignore else: sanity check */\n                    if (bbGrid !== null) {\n                        topScrollbarEl.off();\n                    }\n                });\n\n\n            },\n            templateUrl: 'sky/templates/grids/gridtoolbar.html'\n        };\n    }\n\n    BBGridToolbar.$inject = ['bbResources', 'bbModal'];\n\n    angular.module('sky.grids.toolbar', ['sky.resources', 'sky.modal', 'sky.grids.columnpicker'])\n        .directive('bbGridToolbar', BBGridToolbar);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular, jQuery */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.help', ['ui.router'])\n        .constant('bbHelpConfig', {\n            onHelpLoaded: null,\n            productId: 'Sky',\n            customLocales: [],\n            url: null\n        })\n        .factory('bbHelp', ['$q', '$state', '$window', 'bbHelpConfig', function ($q, $state, $window, bbHelpConfig) {\n            var initPromise;\n\n            function helpwidgetLoaded() {\n                return !!($window.BBHELP && $window.BBHELP.HelpWidget);\n            }\n\n            function init() {\n                var configOnHelpLoaded,\n                    deferred;\n\n                if (!initPromise) {\n                    deferred = $q.defer();\n                    initPromise = deferred.promise;\n\n                    if (helpwidgetLoaded()) {\n                        deferred.resolve();\n                    } else if (bbHelpConfig.url) {\n                        jQuery.ajax({\n                            cache: true,\n                            dataType: 'script',\n                            url: bbHelpConfig.url\n                        }).done(function () {\n                            var config = angular.extend({}, bbHelpConfig);\n\n                            if (!config.getCurrentHelpKey) {\n                                config.getCurrentHelpKey = function () {\n                                    // $state.current.helpKeyOverride outranks $state.current.pageData.helpKey\n                                    if ($state.current.helpKeyOverride) {\n                                        return $state.current.helpKeyOverride;\n                                    }\n\n                                    if ($state.current.pageData) {\n                                        return $state.current.pageData.helpKey;\n                                    }\n                                    return null;\n                                };\n                            }\n\n                            configOnHelpLoaded = config.onHelpLoaded;\n\n                            config.onHelpLoaded = function () {\n                                if (angular.isFunction(configOnHelpLoaded)) {\n                                    configOnHelpLoaded.apply(this, arguments);\n                                }\n\n                                deferred.resolve();\n                            };\n\n                            $window.BBHELP.HelpWidget.load(config);\n                        });\n                    } else {\n                        initPromise = null;\n                        throw new Error('bbHelpConfig.url is not defined.');\n                    }\n                }\n\n                return initPromise;\n            }\n\n            function open() {\n                var args = arguments;\n\n                init().then(function () {\n                    $window.BBHELP.HelpWidget.open.apply($window.BBHELP.HelpWidget, args);\n                });\n            }\n\n            function close() {\n                if (helpwidgetLoaded()) {\n                    $window.BBHELP.HelpWidget.close.apply($window.BBHELP.HelpWidget, arguments);\n                }\n            }\n\n            return {\n                init: init,\n                open: open,\n                close: close\n            };\n        }]);\n\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.helpbutton', ['sky.help'])\n        .directive('bbHelpButton', ['$state', '$window', 'bbHelp', function ($state, $window, bbHelp) {\n            /// <summary>\n            /// This directive provides a button that launches the Blackbaud Help Widget.\n            /// The bbHelpKey attribute sets the help key. The widget will show the given key's corresponding help page\n            /// The bbSetHelpKeyOverride attribute, when set to \"true\", makes this directive's help key override the current page help key.\n            ///     The help key override will be removed when the directive is removed from the page.\n            /// </summary>\n\n            function link(scope, el, attrs) {\n                /*jslint unparam: true */\n                var oldHelpKeyOverride;\n\n                el.addClass('bb-helpbutton fa fa-question-circle close');\n\n                if (attrs.bbSetHelpKeyOverride && attrs.bbSetHelpKeyOverride.toLowerCase() === 'true') {\n                    oldHelpKeyOverride = $state.current.helpKeyOverride;\n                    $state.current.helpKeyOverride = attrs.bbHelpKey;\n\n                    el.on(\"remove\", function () {\n                        $state.current.helpKeyOverride = oldHelpKeyOverride;\n                    });\n                }\n\n                el.click(function () {\n                    bbHelp.open(attrs.bbHelpKey);\n                });\n            }\n\n            return {\n                link: link\n            };\n        }]);\n\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.highlight', [])\n        .factory('bbHighlight', function () {\n            var DATA_CLASS_NAME = 'bb-hightlight-class',\n                DEFAULT_CLASS_NAME = 'highlight';\n\n            // Copied and modified from here so we don't have yet another jQuery plugin dependency.\n            // http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\n            function highlight(el, pat, classn) {\n                function innerHighlight(node, pat) {\n                    var pos,\n                        skip = 0,\n                        spannode,\n                        middlebit,\n                        i,\n                        middleclone;\n\n                    classn = classn || DEFAULT_CLASS_NAME;\n\n                    el.data(DATA_CLASS_NAME, classn);\n\n                    if (node.nodeType === 3) {\n                        pos = node.data.toUpperCase().indexOf(pat);\n                        if (pos >= 0) {\n                            spannode = document.createElement('span');\n                            spannode.className = String(classn);\n                            middlebit = node.splitText(pos);\n                            middlebit.splitText(pat.length);\n                            middleclone = middlebit.cloneNode(true);\n                            spannode.appendChild(middleclone);\n                            middlebit.parentNode.replaceChild(spannode, middlebit);\n                            skip = 1;\n                        }\n                    } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\n                        for (i = 0; i < node.childNodes.length; ++i) {\n                            i += innerHighlight(node.childNodes[i], pat);\n                        }\n                    }\n                    return skip;\n                }\n\n                return el.length && pat && pat.length ? el.each(function () {\n                    innerHighlight(this, pat.toUpperCase());\n                }) : el;\n            }\n\n            function removeHighlight(el) {\n                var classn = el.data(DATA_CLASS_NAME) || DEFAULT_CLASS_NAME;\n\n                return el.find('span.' + classn).each(function () {\n                    var parentNode = this.parentNode;\n\n                    parentNode.replaceChild(this.firstChild, this);\n                    parentNode.normalize();\n                }).end();\n            }\n\n            highlight.clear = removeHighlight;\n\n            return highlight;\n        })\n        .directive('bbHighlight', ['bbHighlight', function (bbHighlight) {\n            return {\n                link: function (scope, el, attrs) {\n                    function highlight() {\n                        var highlightText = scope.$eval(attrs.bbHighlight);\n\n                        bbHighlight.clear(el);\n\n                        if (highlightText) {\n                            bbHighlight(el, highlightText);\n                        }\n                    }\n\n                    scope.$watch(attrs.bbHighlight, function () {\n                        highlight();\n                    });\n\n                    if (attrs.bbHighlightBeacon) {\n                        scope.$watch(attrs.bbHighlightBeacon, function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                scope.$evalAsync(highlight);\n                            }\n                        }, true);\n                    }\n\n                    if (attrs.ngBind) {\n                        scope.$watch(attrs.ngBind, function (newValue, oldValue) {\n                            if (newValue !== oldValue) {\n                                highlight();\n                            }\n                        });\n                    }\n                },\n                priority: 1, // Make sure ng-bind (which has a priortiy of 0) is processed before this\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*global angular, define, enquire, require */\n\n(function () {\n    'use strict';\n\n    var mediaBreakpointsConfig = {\n            mediaQueries: {\n                xs: '(max-width: 767px)',\n                sm: '(min-width: 768px) and (max-width: 991px)',\n                md: '(min-width: 992px) and (max-width: 1199px)',\n                lg: '(min-width: 1200px)'\n            }\n        },\n        bp = {},\n        handlers = [],\n        mediaBreakpoints;\n\n\n\n    function runRegisterEnquire($window, $timeout) {\n        function registerEnquire(enquire) {\n            var mediaQueries = mediaBreakpointsConfig.mediaQueries,\n                p;\n\n            function updateStatus(newSize) {\n                var handler,\n                    i;\n                bp.xs = bp.sm = bp.md = bp.lg = false;\n                bp[newSize] = true;\n\n                for (i = 0; i < handlers.length; i += 1) {\n                    handler = handlers[i];\n\n                    /*istanbul ignore else */\n                    if (handler) {\n                        handler(bp);\n                    }\n                }\n                $timeout(angular.noop);\n            }\n\n\n            function registerQuery(name) {\n                if (!angular.isDefined(enquire.queries[mediaQueries[name]])) {\n                    enquire.register(mediaQueries[name], function () {\n                        updateStatus(name);\n                    });\n                }\n            }\n\n            for (p in mediaQueries) {\n                /*istanbul ignore else */\n                if (mediaQueries.hasOwnProperty(p)) {\n                    registerQuery(p);\n                }\n            }\n        }\n\n        /* istanbul ignore next boilerplate RequireJS detection */\n        if (typeof define === 'function' && define.amd) {\n            // AMD. Register as an anonymous module.\n            require(['enquire'], registerEnquire);\n        } else if ($window.enquire) {\n            // Browser globals\n            registerEnquire(enquire);\n        }\n    }\n\n    runRegisterEnquire.$inject = ['$window', '$timeout'];\n\n    mediaBreakpoints = {\n        register: function (callback) {\n            handlers.push(callback);\n\n            //Fire handler immediately\n            callback(bp);\n        },\n\n        unregister: function (callback) {\n            var i;\n\n            for (i = 0; i < handlers.length; i += 1) {\n                if (handlers[i] === callback) {\n                    handlers.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        getCurrent: function () {\n            return bp;\n        }\n    };\n\n    angular.module('sky.mediabreakpoints', [])\n        .constant('bbMediaBreakpointsConfig', mediaBreakpointsConfig)\n        .run(runRegisterEnquire)\n        .factory('bbMediaBreakpoints', [function () {\n            return mediaBreakpoints;\n        }]);\n}());\n","/*jshint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var openModalCount = 0;\n\n    angular.module('sky.modal', ['sky.helpbutton', 'sky.resources', 'ui.bootstrap'])\n        .factory('bbModal', ['$uibModal', '$window', function ($uibModal, $window) {\n            return {\n                open: function (opts) {\n                    var bodyEl,\n                        isIOS,\n                        modalInstance,\n                        scrollTop;\n\n                    function modalClosed() {\n                        openModalCount--;\n                        if (isIOS) {\n                            bodyEl\n                                .removeClass('bb-modal-open-mobile')\n                                .scrollTop(scrollTop);\n                        }\n\n                        bodyEl = null;\n                    }\n\n                    isIOS = /iPad|iPod|iPhone/i.test($window.navigator.userAgent);\n                    bodyEl = $(document.body);\n\n                    // Change default values for modal options\n                    opts = angular.extend({\n                        backdrop: 'static',\n                        windowClass: 'bb-modal'\n                    }, opts);\n\n                    // Mobile browsers exhibit weird behavior when focusing on an input element\n                    // inside a position: fixed element (in this case the modal), and it also\n                    // doesn't propery prohibit scrolling on the window.  Adding this CSS class\n                    // will change the body position to fixed and the modal position to absolute\n                    // to work around this behavior.\n                    if (isIOS) {\n                        // Setting the body position to be fixed causes it to be scrolled to the\n                        // top.  Cache the current scrollTop and set it back when the modal is\n                        // closed.\n                        scrollTop = bodyEl.scrollTop();\n                        bodyEl.addClass('bb-modal-open-mobile');\n                    }\n\n                    modalInstance = $uibModal.open(opts);\n                    openModalCount++;\n\n                    modalInstance.result.then(modalClosed, modalClosed);\n\n                    return modalInstance;\n                }\n            };\n        }])\n        .directive('bbModal', ['$timeout', function ($timeout) {\n            function getPixelValue(val) {\n                val = val || '0';\n\n                return parseFloat(val.replace('px', ''));\n            }\n\n            function getModalBodyWrapperMargin(el) {\n                var margin = 0;\n\n                while (el.not('.modal-dialog') && el.length > 0) {\n                    margin += el.outerHeight() - el.height();\n\n                    el = el.parent();\n                }\n\n                return margin;\n            }\n\n            return {\n                controller: ['$scope', function ($scope) {\n                    this.setBodyEl = function (bodyEl) {\n                        $scope.bodyEl = bodyEl;\n                    };\n                }],\n                replace: true,\n                transclude: true,\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modal.html',\n                link: function ($scope, el) {\n                    var bodyEl,\n                        resizeTimeout,\n                        windowEl = $(window);\n\n                    function fitToWindow() {\n                        var margin,\n                            modalParentEl,\n                            newMaxHeight,\n                            reservedHeight;\n\n                        if (bodyEl && bodyEl.length > 0) {\n                            modalParentEl = el.parents('.modal-dialog');\n\n                            if (modalParentEl.length > 0) {\n                                margin = getPixelValue(modalParentEl.css('margin-bottom')) + getPixelValue(modalParentEl.css('margin-top'));\n\n                                reservedHeight = margin + el.find('.modal-header').outerHeight() + el.find('.modal-footer').outerHeight();\n\n                                // Account for the border, padding, etc. of the elements that wrap the modal body.\n                                reservedHeight += getModalBodyWrapperMargin(el);\n\n                                newMaxHeight = windowEl.height() - reservedHeight;\n\n                                bodyEl.css('max-height', newMaxHeight);\n                            }\n                        }\n                    }\n\n                    $scope.$watch('bodyEl', function (newValue) {\n                        bodyEl = newValue;\n                        fitToWindow();\n                    });\n\n                    $timeout(function () {\n                        fitToWindow();\n                    }, 0);\n\n                    windowEl.on('resize.bbModal' + $scope.$id, function () {\n                        $timeout.cancel(resizeTimeout);\n\n                        resizeTimeout = $timeout(function () {\n                            fitToWindow();\n                        }, 250);\n                    });\n\n                    el.on('$destroy', function () {\n                        windowEl.off('.bbModal' + $scope.$id);\n                    });\n                }\n            };\n        }])\n        .directive('bbModalBody', function () {\n            return {\n                link: function (scope, el, attrs, modalCtrl) {\n                    el.addClass('modal-body container-fluid');\n                    modalCtrl.setBodyEl(el);\n                },\n                require: '^bbModal',\n                restrict: 'A'\n            };\n        })\n        .directive('bbModalHeader', function () {\n            return {\n                controller: angular.noop,\n                replace: true,\n                transclude: true,\n                require: '^bbModal',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalheader.html',\n                scope: {\n                    bbModalHelpKey: '='\n                }\n            };\n        })\n        .directive('bbModalFooter', function () {\n            return {\n                controller: angular.noop,\n                replace: true,\n                transclude: true,\n                require: '^bbModal',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooter.html'\n            };\n        })\n        .directive('bbModalFooterButton', function () {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbutton.html'\n            };\n        })\n        .directive('bbModalFooterButtonPrimary', ['bbResources', function (bbResources) {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbuttonprimary.html',\n                link: function ($scope, el) {\n                    if (el.children().length === 0) {\n                        el.append(\"<span>\" + bbResources.modal_footer_primary_button + \"</span>\");\n                    }\n                }\n            };\n        }])\n        .directive('bbModalFooterButtonCancel', ['bbResources', function (bbResources) {\n            return {\n                replace: true,\n                transclude: true,\n                require: '^bbModalFooter',\n                restrict: 'E',\n                templateUrl: 'sky/templates/modal/modalfooterbuttoncancel.html',\n                link: function ($scope, el) {\n                    if (el.children().length === 0) {\n                        el.append(\"<span>\" + bbResources.modal_footer_cancel_button + \"</span>\");\n                    }\n                }\n            };\n        }]);\n}(jQuery));\n","/*global angular, define, require */\n\n(function () {\n    'use strict';\n\n    function bbMoment($window) {\n        return $window.moment;\n    }\n\n    bbMoment.$inject = ['$window'];\n\n    /*istanbul ignore next boilerplate require gunk */\n    function runRegisterMoment($window) {\n\n        function registerMoment(moment) {\n            $window.moment = moment;\n        }\n\n        if (angular.isUndefined($window.moment) && typeof define === 'function' && define.amd) {\n            require(['moment'], registerMoment);\n        }\n    }\n\n    runRegisterMoment.$inject = ['$window'];\n\n    angular.module('sky.moment', [])\n        .run(runRegisterMoment)\n        .factory('bbMoment', bbMoment);\n\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function toggleOpen(el, action) {\n        $(el)[action + 'Class']('open');\n    }\n\n    angular.module('sky.navbar', [])\n        .directive('bbNavbar', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: 'sky/templates/navbar/navbar.html',\n                link: function (scope, el) {\n                    /*jslint unparam: true */\n                    $(el).on('mouseenter', '.dropdown', function () {\n                        toggleOpen(this, 'add');\n                    }).on('mouseleave', '.dropdown', function () {\n                        toggleOpen(this, 'remove');\n                    }).on('click', '.dropdown-menu a', function () {\n                        toggleOpen($('.dropdown', el), 'remove');\n                    });\n                }\n            };\n        });\n}(jQuery));\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.omnibar', [])\n        .constant('bbOmnibarConfig', {\n            appLookupUrl: '',\n            enableHelp: false,\n            enableSearch: false,\n            productId: 'Sky',\n            searchPlaceholder: 'Search',\n            serviceName: 'Sky',\n            signOutUrl: '',\n            tenantId: '',\n            url: 'https://signin.blackbaud.com/omnibar.min.js'\n        })\n        .directive('bbOmnibar', ['$window', 'bbOmnibarConfig', function ($window, bbOmnibarConfig) {\n            return {\n                transclude: true,\n                template: '<div class=\"bb-omnibar-wrap\"></div><div class=\"bb-omnibar-menu-wrap\" ng-transclude></div>',\n                link: function (scope, el) {\n                    var omnibarEl = el.children('.bb-omnibar-wrap'),\n                        omnibarMenuEl = el.find('.bb-omnibar-menu-wrap .bb-omnibar-menu');\n\n                    function afterLoad() {\n                        var searchBox = omnibarEl.find('.searchbox'),\n                            searchContainer = omnibarEl.find('.searchContainer'),\n                            searchValue;\n\n                        // No longer need this holding div now that the menu was moved into the right location in the omnibar.\n                        el.children(\".bb-omnibar-menu-wrap\").remove();\n\n                        if (omnibarEl.find(\".mobile .productmenucontainer\").length === 0) {\n                            $(\".bb-navbar\").addClass(\"bb-navbar-showmobile\");\n                        }\n\n                        searchBox.attr('placeholder', bbOmnibarConfig.searchPlaceholder);\n\n                        scope.searchBox = searchBox;\n\n                        searchBox.on('keyup', function (event) {\n                            var value = searchBox.val();\n\n                            /*istanbul ignore else */\n                            if (value !== searchValue) {\n                                searchValue = value;\n\n                                scope.searchText = value;\n                                scope.$apply();\n                            }\n\n                            scope.$emit('searchBoxKeyUp', event.keyCode);\n                        });\n\n                        scope.$watch('searching', function (searching) {\n                            if (searching) {\n                                searchContainer.addClass('searching');\n                            } else {\n                                searchContainer.removeClass('searching');\n                            }\n                        });\n\n                        scope.$watch('searchText', function (searchText) {\n                            searchText = searchText || '';\n                            if (searchText !== searchBox.val()) {\n                                searchValue = searchText;\n                                searchBox.val(searchText);\n                            }\n                        });\n\n                        scope.$apply();\n\n                        if (angular.isFunction(bbOmnibarConfig.afterLoad)) {\n                            /* jshint validthis: true */\n                            bbOmnibarConfig.afterLoad.apply(this, arguments);\n                        }\n                    }\n\n                    function userLoaded(userData) {\n                        var omnibarIndicatesNullUserTime;\n\n                        //If the user ID loaded in the omnibar does not match the user who loaded the page, sign the\n                        //user out of the application.  This will result in a redirect back to the auth size to update\n                        //the user's claims or ask the user to log back in.\n                        if (userData.id !== bbOmnibarConfig.authenticationUserId && bbOmnibarConfig.signOutUrl) {\n\n                            if (userData.id === null) {\n                                //If userData.id ==null then it may just means the omnibar is stale or there was a problem\n                                //with the interaction of the omnibar and the rex shell SPA client side code.\n                                //\n                                //If we can use localStorage to track data across sessions, then attempt to log out of NXT once\n                                //and see if this fixes it, but avoid an infinite redirect loop with the Auth Svc.\n                                //\n                                //If the browser doesn't support localStorage, then just return.\n                                //\n                                //If we don't back to the auth sign in site here, then it will just stay on the current page\n                                //with the understanding that the omnibar may be in a state of acting as though the user\n                                //is signed out.  The page is still secure because the Auth claims are evaluated on the server.\n                                //This special case is just about dealing with an edge case issue with client side javascript.\n                                if ($window.localStorage) {\n                                    omnibarIndicatesNullUserTime = $window.localStorage.omnibarIndicatesNullUserTime;\n                                    \n                                    if (omnibarIndicatesNullUserTime && (new Date() - Date.parse(omnibarIndicatesNullUserTime)) / 1000 <= 10) {\n                                        // We just looped through Auth within the last 10 seconds, so don't leave again now.\n                                        return;\n                                    }\n\n                                    try {\n                                        // Stash the time that we're doing this redirect to avoid infinite loops.\n                                        $window.localStorage.omnibarIndicatesNullUserTime = (new Date()).toString();\n                                    } catch (e) {\n                                        // Safari private browsing will throw an exception on setting localStroage.\n                                        /*istanbul ignore next: super edge case */\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            }\n\n                            // Log out and redirect to auth service.\n                            $window.location.href = bbOmnibarConfig.signOutUrl;\n                        }\n\n                        if (angular.isFunction(bbOmnibarConfig.userLoaded)) {\n                            /* jshint validthis: true */\n                            bbOmnibarConfig.userLoaded.apply(this, arguments);\n                        }\n                    }\n\n                    $.ajax({\n                        cache: true,\n                        dataType: 'script',\n                        url: bbOmnibarConfig.url\n                    }).done(function () {\n                        var loadOptions = angular.extend({}, bbOmnibarConfig, {\n                            afterLoad: afterLoad,\n                            userLoaded: userLoaded,\n                            menuEl: omnibarMenuEl\n                        });\n\n                        $window.BBAUTH.Omnibar.load(omnibarEl, loadOptions);\n                    });\n                }\n            };\n        }])\n        .directive('bbOmnibarMenu', function () {\n            return {\n                replace: true,\n                require: '^bbOmnibar',\n                restrict: 'E',\n                transclude: true,\n                template: '<div class=\"bb-omnibar-menu\" ng-transclude></div>'\n            };\n        });\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.page', [])\n        .constant('bbPageConfig', {\n            redirectUrl: null,\n            notFoundUrl: null\n        })\n        .factory('bbPage', [function () {\n            var pageStatuses;\n\n            pageStatuses = {\n                LOADING: 0,\n                LOADED: 1,\n                NOT_AUTHORIZED: 2,\n                //ERROR: 3,\n                NOT_FOUND: 4\n            };\n\n            return {\n                pageStatuses: pageStatuses\n            };\n        }])\n        .directive('bbPage', ['$window', 'bbResources', 'bbPage', 'bbPageConfig', 'bbData', '$location',\n            function ($window, bbResources, bbPage, bbPageConfig, bbData, $location) {\n                function link(scope, element) {\n                    var loadManager,\n                        locals;\n\n                    function navigateAway() {\n                        $window.location.href = bbPageConfig.redirectUrl || $window.location.origin;\n                    }\n\n                    function noPageStatusSpecified() {\n                        return element.attr('bb-page-status') === undefined;\n                    }\n\n                    function onShowing() {\n                        if (scope.bbPageUsesLoadManager) {\n                            loadManager = locals.loadManager = bbData.loadManager({\n                                scope: scope,\n                                waitForFirstItem: true,\n                                nonblockWaitForAdditionalItems: true,\n                                isAggregate: true\n                            });\n                        }\n                    }\n\n                    locals = scope.locals = {\n                        navigateAway: navigateAway,\n                        noPageStatusSpecified: noPageStatusSpecified,\n                        pageStatuses: bbPage.pageStatuses,\n                        onShowing: onShowing\n                    };\n\n                    scope.resources = bbResources;\n\n                    scope.$watch('bbPageStatus', function (value, oldValue) {\n                        scope.value = \"something\";\n                        scope.oldValue = oldValue;\n\n                        if (!value) {\n                            scope.$emit(\"bbBeginWait\");\n                        } else if (value && !oldValue) {\n                            scope.$emit(\"bbEndWait\");\n                        }\n\n                        if (value === locals.pageStatuses.NOT_AUTHORIZED) {\n                            if (loadManager) {\n                                loadManager.cancelWaiting();\n                            }\n                        } else if (value === locals.pageStatuses.NOT_FOUND) {\n                            if (loadManager) {\n                                loadManager.cancelWaiting();\n                            }\n\n                            $location.path(bbPageConfig.notFoundUrl).replace();\n                        }\n\n                    });\n                }\n\n                return {\n                    restrict: 'E',\n                    scope: {\n                        bbPageStatus: '=?',\n                        bbPageUsesLoadManager: '@?'\n                    },\n                    templateUrl: 'sky/templates/page/page.html',\n                    transclude: true,\n                    link: link\n                };\n            }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var components = [{\n        name: 'Alert',\n        cls: 'alert'\n    }, {\n        name: 'Content',\n        cls: 'content'\n    }, {\n        name: 'KeyInfo',\n        cls: 'key-info'\n    }, {\n        name: 'Image',\n        cls: 'image'\n    }, {\n        name: 'Status',\n        cls: 'status'\n    }, {\n        name: 'Title',\n        cls: 'title'\n    }, {\n        name: 'Subtitle',\n        cls: 'subtitle'\n    }, {\n        name: 'ActionBar',\n        cls: 'action-bar'\n    }],\n    pageSummaryModule = angular.module('sky.pagesummary');\n\n    function makePageSummaryComponent(component) {\n        var controllerName,\n            name = component.name;\n\n        function Controller($scope) {\n            var vm = this;\n\n            $scope.$on('$destroy', function () {\n                vm.onDestroy();\n                vm = null;\n            });\n        }\n\n        Controller.$inject = ['$scope'];\n\n        function componentFn() {\n            function link(scope, el, attrs, ctrls) {\n                var vm = ctrls[0],\n                    bbPageSummary = ctrls[1];\n\n                vm.el = el;\n\n                bbPageSummary['set' + name](vm);\n            }\n\n            return {\n                restrict: 'E',\n                require: ['bbPageSummary' + name, '^bbPageSummary'],\n                controller: controllerName,\n                controllerAs: 'bbPageSummary' + name,\n                bindToController: true,\n                link: link,\n                scope: {}\n            };\n        }\n\n        controllerName = 'BBPageSummary' + name + 'Controller';\n\n        pageSummaryModule\n            .controller(controllerName, Controller)\n            .directive('bbPageSummary' + name, componentFn);\n    }\n\n    function getCtrlPropName(component) {\n        var name = component.name;\n\n        return name.charAt(0).toLowerCase() + name.substr(1) + 'Ctrl';\n    }\n\n    function BBPageSummaryController() {\n        var vm = this;\n\n        function addComponentSetter(component) {\n            var name = component.name;\n\n            vm['set' + name] = function (ctrl) {\n                var propName = getCtrlPropName(component);\n\n                vm[propName] = ctrl;\n\n                ctrl.onDestroy = function () {\n                    vm[propName] = null;\n                };\n            };\n        }\n\n        components.forEach(addComponentSetter);\n\n        vm.getPageSummaryLeftCls = function () {\n            return {\n                'col-sm-9': !!vm.keyInfoCtrl\n            };\n        };\n    }\n\n    function bbPageSummary(bbMediaBreakpoints) {\n        function link(scope, el, attrs, vm) {\n            function watchForComponent(component) {\n                scope.$watch(function () {\n                    return vm[getCtrlPropName(component)];\n                }, function (newValue) {\n                    if (newValue) {\n                        el.find('.bb-page-summary-' + component.cls)\n                            .empty()\n                            .append(newValue.el);\n                    }\n                });\n            }\n\n            function mediaBreakpointHandler(breakpoint) {\n                var keyInfoEl = el.find('.bb-page-summary-key-info'),\n                    toEl;\n\n                if (breakpoint.xs) {\n                    toEl = el.find('.bb-page-summary-key-info-xs');\n                } else {\n                    toEl = el.find('.bb-page-summary-key-info-sm');\n                }\n\n                if (!keyInfoEl.parent().is(toEl)) {\n                    toEl.append(keyInfoEl);\n                }\n            }\n\n            components.forEach(watchForComponent);\n\n            bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n            scope.$on('$destroy', function () {\n                bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n            });\n        }\n\n        return {\n            restrict: 'E',\n            controller: 'BBPageSummaryController',\n            controllerAs: 'bbPageSummary',\n            bindToController: true,\n            link: link,\n            scope: {},\n            templateUrl: 'sky/templates/pagesummary/pagesummary.directive.html',\n            transclude: true\n        };\n    }\n\n    bbPageSummary.$inject = ['bbMediaBreakpoints'];\n\n    pageSummaryModule\n        .controller('BBPageSummaryController', BBPageSummaryController)\n        .directive('bbPageSummary', bbPageSummary);\n\n    components.forEach(makePageSummaryComponent);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var evtNsPos = 0;\n\n    angular.module('sky.pagination', ['ui.bootstrap.pagination'])\n        .config(['uibPaginationConfig', function (paginationConfig) {\n            paginationConfig.maxSize = 4;\n            paginationConfig.itemsPerPage = 5;\n\n            paginationConfig.nextText = paginationConfig.previousText = '';\n        }])\n        .factory('bbPaging', function () {\n            return {\n                init: function (sourceData, config) {\n                    var paging;\n\n                    function setPageData() {\n                        var startingIndex,\n                            currentPage;\n\n                        if (!paging.disabled && sourceData) {\n                            currentPage = paging.currentPage - 1; // 1-based\n\n                            startingIndex = currentPage * paging.itemsPerPage;\n\n                            paging.items = sourceData.slice(startingIndex, startingIndex + paging.itemsPerPage);\n                        }\n                    }\n\n                    paging = {\n                        currentPage: 1,\n                        itemsPerPage: 5,\n                        totalItems: sourceData ? sourceData.length : 0,\n                        pageChanged: setPageData\n                    };\n\n                    angular.extend(paging, config);\n\n                    setPageData();\n\n                    return paging;\n                }\n            };\n        })\n        .directive('bbPagination', function () {\n            return {\n                restrict: 'A',\n                scope: {\n                    paginationDisabled: '=bbPaginationDisabled'\n                },\n                compile: function (el, attrs) {\n                    var pagedData = attrs.bbPagination;\n\n                    /*jslint white: true */\n                    el.html(\n                        '<uib-pagination ng-show=\"' + pagedData + '.totalItems > ' + pagedData + '.itemsPerPage\" total-items=\"' + pagedData + '.totalItems\" ng-model=\"' + pagedData + '.currentPage\" ng-change=\"' + pagedData + '.pageChanged()\" items-per-page=\"' + pagedData + '.itemsPerPage\"></uib-pagination>' +\n                        '<div class=\"clearfix\"></div>'\n                    );\n                    /*jslint white: false */\n\n                    return function (scope, el) {\n                        scope.$watch('paginationDisabled', function (newValue) {\n                            var paginationDummyEl,\n                                paginationEl;\n\n                            // Since we don't have complete control over the Angular Bootstrap UI pagination directive,\n                            // we can't disable it directly.  Instead just clone the pagination element, disable it\n                            // and show it while hiding the original element when pagination is disabled.\n                            if (angular.isDefined(newValue)) {\n                                paginationEl = el.find('.pagination');\n\n                                if (newValue) {\n                                    paginationDummyEl = paginationEl\n                                        .clone()\n                                        .addClass('bb-pagination-dummy');\n\n                                    paginationEl\n                                        .before(paginationDummyEl)\n                                        .hide();\n\n                                    paginationDummyEl.find('li').addClass('disabled');\n                                } else {\n                                    el.find('.bb-pagination-dummy').remove();\n                                    paginationEl.show();\n                                }\n                            }\n                        });\n                    };\n                }\n            };\n        })\n        .directive('bbPaginationContent', ['$timeout', '$window', '$animate', function ($timeout, $window, $animate) {\n            return {\n                link: function (scope, el) {\n                    var evtNs;\n\n                    evtNsPos += 1;\n\n                    evtNs = \"bbPaginationContent\" + evtNsPos;\n\n                    function removeWindowResizeHandler() {\n                        angular.element($window).off('.' + evtNs);\n                    }\n\n                    scope.$watch('pagedData', function () {\n                        var pageCount,\n                            pagedData,\n                            tries = 0,\n                            windowResizeTimeout;\n\n                        // Try for 1 second to set a min-height on paged data so the paging bar doesn't jump\n                        // up when the user hits a page with less than the max number of items.\n                        function trySetMinHeight() {\n                            $timeout(function () {\n                                var currentPage,\n                                    height = el.height(),\n                                    i,\n                                    maxHeight = 0;\n\n                                function changePage(pageNumber) {\n                                    /* Disable animation for the page change\n                                       to prevent issues with ng-repeat\n                                       that impact min-height measurements */\n                                    $animate.enabled(false, el);\n                                    pagedData.currentPage = pageNumber;\n\n                                    pagedData.pageChanged();\n                                    scope.$apply();\n                                    $animate.enabled(true, el);\n\n                                }\n\n                                if (height === 0 && tries < 5) {\n                                    tries += 1;\n                                    trySetMinHeight();\n                                    return;\n                                }\n\n                                el.addClass('bb-pagination-content bb-pagination-content-calculating');\n\n                                // Cache the current page so we can put it back.\n                                currentPage = pagedData.currentPage;\n\n                                // Reset the min height from any previous iteration.\n                                el.css('min-height', 0);\n\n                                // Navigate through each page and find the tallest page.\n                                for (i = 1; i <= pageCount; i += 1) {\n                                    changePage(i);\n                                    maxHeight = Math.max(el.height(), maxHeight);\n                                }\n\n                                // Set the min height to the height of the tallest page.\n                                el.css('min-height', maxHeight);\n\n                                // Navigate back to the initial page.\n                                changePage(currentPage);\n\n                                el.removeClass('bb-pagination-content-calculating');\n                            }, 200);\n                        }\n\n                        pagedData = scope.pagedData;\n\n                        if (angular.isDefined(scope.pagedData)) {\n                            pageCount = Math.ceil(pagedData.totalItems / (pagedData.itemsPerPage || 1));\n\n                            if (pageCount > 1) {\n                                trySetMinHeight();\n\n                                removeWindowResizeHandler();\n\n                                angular.element($window).on('resize.' + evtNs, function () {\n                                    if (windowResizeTimeout) {\n                                        $timeout.cancel(windowResizeTimeout);\n                                    }\n\n                                    windowResizeTimeout = $timeout(trySetMinHeight, 500);\n                                });\n\n                                el.on('$destroy', removeWindowResizeHandler);\n                            }\n                        }\n                    });\n                },\n                scope: {\n                    pagedData: '=bbPaginationContent'\n                }\n            };\n        }]);\n}());\n","/*jshint unused: false */\n/*global angular, bbPaletteConfig */\n\n(function () {\n'use strict';\n\nvar bbPaletteConfig;\n\n/* LINES BELOW ARE AUTO GENERATED */\nbbPaletteConfig = {\n    \"multi\": [\n        \"#1f91da\",\n        \"#f9b66d\",\n        \"#1dc8a6\",\n        \"#9176c6\",\n        \"#28d7d9\",\n        \"#ef6977\",\n        \"#919191\",\n        \"#7ec2ed\",\n        \"#fbcf9f\",\n        \"#75ebd3\",\n        \"#beaedd\",\n        \"#85e8ea\",\n        \"#f59ca6\",\n        \"#afafaf\"\n    ],\n    \"mono\": [\n        \"#156395\",\n        \"#1c84c6\",\n        \"#44a6e5\",\n        \"#83c4ed\",\n        \"#c1e1f6\"\n    ]\n};\n\nangular.module('sky.palette.config', [])\n    .constant('bbPaletteConfig', bbPaletteConfig);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.palette', ['sky.palette.config'])\n        .factory('bbPalette', ['bbPaletteConfig', function (bbPaletteConfig) {\n\n            function getPaletteByType(paletteType) {\n                return bbPaletteConfig[paletteType || 'multi'];\n            }\n\n            return {\n                getColorByIndex: function (index, paletteType) {\n                    var palette = getPaletteByType(paletteType);\n                    return palette[index % palette.length];\n                },\n                getColorSequence: function (requestedLength, paletteType) {\n\n                    var i,\n                        palette = getPaletteByType(paletteType),\n                        paletteLength,\n                        r = [];\n\n                    paletteLength = palette.length;\n                    requestedLength = requestedLength || paletteLength;\n\n                    for (i = 0; i < requestedLength; i++) {\n                        r.push(palette[i % paletteLength]);\n                    }\n\n                    return r;\n                }\n            };\n        }]);\n}());\n","/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    function bbPopoverTemplate($compile) {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function ($scope, el) {\n                var bbPopoverOpenAttr = 'bbPopoverOpen' + $scope.$id;\n\n                //prevent breaking change by adding quotes around template url and\n                //passing to new directive\n                /*istanbul ignore else */\n                if (!el.attr('bb-uib-popover-template')) {\n                    el.attr('bb-uib-popover-template', \"'\" + el.attr('bb-popover-template') + \"'\");\n                }\n\n                if (!el.attr('popover-is-open')) {\n                    el.attr('popover-is-open', bbPopoverOpenAttr);\n                }\n\n                $scope.bbPopoverAttr = el.attr('popover-is-open');\n\n\n                el.removeAttr('bb-popover-template');\n                $compile(el)($scope);\n            }\n        };\n    }\n\n    bbPopoverTemplate.$inject = ['$compile'];\n\n    function bbUibPopoverTemplate($uibTooltip) {\n        var tooltip = $uibTooltip('bbUibPopoverTemplate', 'popover', 'click', {\n            useContentExp: true\n        });\n\n        return tooltip;\n    }\n\n    bbUibPopoverTemplate.$inject = ['$uibTooltip'];\n\n    function bbUibPopoverTemplatePopup($window, $parse) {\n        return {\n            replace: true,\n            scope: { title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&', originScope: '&' },\n            link: function ($scope, el) {\n\n                var origScope = $scope.originScope(),\n                    popoverIsOpenAttr,\n                    windowEl = $($window),\n                    scopeId = $scope.$id;\n\n                popoverIsOpenAttr = origScope.bbPopoverAttr;\n\n                function closePopover() {\n\n                    /* Set the popover is open attribute this way to account for\n                       both variables directly on scope as well as using 'controller\n                       as'\n                    */\n                    /* istanbul ignore else: sanity check */\n                    if (angular.isDefined(origScope.$eval(popoverIsOpenAttr))) {\n                        $parse(popoverIsOpenAttr).assign(origScope, false);\n                    }\n                }\n\n                origScope.hide = function () {\n                    closePopover();\n                };\n\n                $scope.$watch('isOpen()', function (value) {\n                    if (value) {\n                        windowEl.on('click.popover' + scopeId, function (event) {\n                            if (!el.is(event.target) && el.has(event.target).length === 0 && $scope.isOpen) {\n                                $scope.$apply(function () {\n                                    closePopover();\n                                });\n                            }\n                        });\n                    }\n\n                });\n\n\n                $scope.$on('$destroy', function () {\n                    windowEl.off('click.popover' + scopeId);\n                });\n            },\n            templateUrl: 'sky/templates/popover/popup.html'\n        };\n    }\n    bbUibPopoverTemplatePopup.$inject = ['$window', '$parse'];\n\n    angular.module('sky.popover', ['ui.bootstrap.tooltip'])\n        .directive('bbUibPopoverTemplatePopup', bbUibPopoverTemplatePopup)\n        .directive('bbUibPopoverTemplate', bbUibPopoverTemplate)\n        .directive('bbPopoverTemplate', bbPopoverTemplate);\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    var serviceModules = [];\n    \n    function bbResoucesFilter(bbResources) {\n        return function (name) {\n            return bbResources[name];\n        };\n    }\n    \n    bbResoucesFilter.$inject = ['bbResources'];\n\n    angular.module('sky.resources', serviceModules)\n        .constant('bbResources', {\n            /* Strings are defined in separate JSON files located in js/sky/locales. */\n        })\n        .filter('bbResources', bbResoucesFilter);\n}());","/*jshint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var CLS_HIGHLIGHTING = 'bb-scroll-into-view-highlighting',\n        RETRY_INTERVAL = 100,\n        RETRY_MAX = 10;\n\n    angular.module('sky.scrollintoview', [])\n        .constant('bbScrollIntoViewConfig', {\n            reservedBottom: 0,\n            reservedTop: 0\n        })\n        .factory('bbScrollIntoView', ['$window', 'bbScrollIntoViewConfig', function ($window, bbScrollIntoViewConfig) {\n            function highlightEl(el, options) {\n                if (options.highlight) {\n\n                    // The automatic CSS class removal should be factored out once we have some more instances\n                    // where we use animations.\n                    el\n                        .addClass(CLS_HIGHLIGHTING)\n                        .one(\n                            'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',\n                            /*istanbul ignore next */\n                            function () {\n                                el.removeClass(CLS_HIGHLIGHTING);\n                            }\n                        );\n                }\n            }\n\n            function getScrollableParentEl(el) {\n                var overflowY,\n                    parentEl = el.parent();\n\n                while (parentEl.length > 0) {\n                    if (parentEl.is('body')) {\n                        return parentEl;\n                    }\n\n                    overflowY = parentEl.css('overflow-y');\n\n                    /*istanbul ignore else: sanity check (the computed overflow property will likely never return a non-string value) */\n                    if (angular.isString(overflowY)) {\n                        switch (overflowY.toUpperCase()) {\n                        case 'AUTO':\n                        case 'HIDDEN':\n                        case 'SCROLL':\n                            return parentEl;\n                        }\n                    }\n\n                    parentEl = parentEl.parent();\n                }\n            }\n\n            function getHtmlOrBodyScrollTop() {\n                return angular.element('html').scrollTop() || angular.element('body').scrollTop();\n            }\n\n            function scrollIntoView(el, options) {\n                var currentScrollTop,\n                    elBottom,\n                    elHeight,\n                    elOffset,\n                    elTop,\n                    elToScroll,\n                    isScrolledOffBottom,\n                    isScrolledOffTop,\n                    newScrollTop,\n                    parentEl,\n                    parentElIsBody,\n                    parentHeight,\n                    reservedBottom,\n                    reservedTop,\n                    viewportHeight;\n\n                parentEl = getScrollableParentEl(el);\n                parentElIsBody = parentEl.is('body');\n\n                options = options || {};\n\n                reservedBottom = options.reservedBottom;\n                reservedTop = options.reservedTop;\n\n                if (!angular.isDefined(reservedBottom)) {\n                    reservedBottom = 0;\n\n                    if (parentElIsBody) {\n                        reservedBottom = bbScrollIntoViewConfig.reservedBottom || 0;\n                    }\n                }\n\n                if (!angular.isDefined(reservedTop)) {\n                    reservedTop = 0;\n\n                    if (parentElIsBody) {\n                        reservedTop = bbScrollIntoViewConfig.reservedTop || 0;\n                    }\n                }\n\n                if (options.highlight) {\n                    reservedBottom += 50;\n                    reservedTop += 50;\n                }\n\n                if (parentElIsBody) {\n                    currentScrollTop = getHtmlOrBodyScrollTop();\n                } else {\n                    currentScrollTop = parentEl.scrollTop();\n                }\n\n                elOffset = el.offset();\n                elHeight = el.outerHeight();\n\n                elTop = elOffset.top;\n\n                if (!parentElIsBody) {\n                    elTop = (elTop - parentEl.offset().top) + currentScrollTop;\n                }\n\n                elBottom = elTop + elHeight;\n\n                parentHeight = parentElIsBody ? angular.element(window).height() : parentEl.height();\n\n                isScrolledOffBottom = elBottom > parentHeight + (currentScrollTop - reservedBottom);\n                isScrolledOffTop = elTop < (currentScrollTop + reservedTop);\n\n                if (isScrolledOffBottom || isScrolledOffTop) {\n                    if (isScrolledOffBottom) {\n                        newScrollTop = elBottom - (parentHeight - reservedBottom);\n                    }\n\n                    viewportHeight = parentHeight - (reservedTop + reservedBottom);\n\n                    // Ensure the top of the element is visible after scrolling even if it is currently\n                    // scrolled off the bottom of the viewport.\n                    if (!isScrolledOffBottom || elHeight > viewportHeight) {\n                        newScrollTop = elTop - reservedTop;\n                    }\n\n                    elToScroll = parentElIsBody ? angular.element('html, body') : parentEl;\n\n                    elToScroll.animate(\n                        {\n                            scrollTop: Math.round(newScrollTop)\n                        },\n                        {\n                            duration: 250,\n                            always: function () {\n                                highlightEl(el, options);\n                            }\n                        }\n                    );\n                } else {\n                    highlightEl(el, options);\n                }\n            }\n\n            return scrollIntoView;\n        }])\n        .directive('bbScrollIntoView', ['$timeout', 'bbScrollIntoViewConfig', 'bbScrollIntoView', function ($timeout, bbScrollIntoViewConfig, bbScrollIntoView) {\n            function link(scope, el, attrs) {\n                var options,\n                    previousTimeout,\n                    retryCount;\n\n                function doScroll(firstTry) {\n                    if (previousTimeout) {\n                        // Make sure any pending scrolling is canceled.\n                        $timeout.cancel(previousTimeout);\n                    }\n\n                    if (firstTry) {\n                        retryCount = 0;\n                    }\n\n                    /*istanbul ignore else: hard to reach in a unit test */\n                    if (el.is(':visible') && el.children('.collapsing').length === 0) {\n                        options = angular.extend({}, bbScrollIntoViewConfig);\n\n                        if (attrs.bbScrollIntoViewHighlight) {\n                            options.highlight = scope.$eval(attrs.bbScrollIntoViewHighlight);\n                        }\n\n                        bbScrollIntoView(el, options);\n                    } else if (retryCount < RETRY_MAX) {\n                        // Keep trying to scroll until the element is visible or we run out of retry attempts.\n                        retryCount++;\n                        previousTimeout = $timeout(doScroll, RETRY_INTERVAL);\n                    }\n                }\n\n                /*istanbul ignore else: sanity check */\n                if (attrs.bbScrollIntoView) {\n                    scope.$watch(attrs.bbScrollIntoView, function (newValue, oldValue) {\n                        if (newValue && newValue !== oldValue) {\n                            doScroll(true);\n                        }\n                    });\n                }\n            }\n\n            return {\n                link: link,\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.searchfield', ['sky.resources'])\n        .directive('uiSelectMatch', ['$timeout', function ($timeout) {\n            return {\n                restrict: 'EA',\n                replace: false,\n                require: '^uiSelect',\n                link: function (scope, element, attrs, $select) {\n                    var selectContainerEl,\n                        origSizeSearchInputFunc,\n                        matchEl,\n                        windowResizeTimeout;\n\n                    function sizeMatchItems() {\n                        //The main logic flow for this function was taken from the ui-select's \"sizeSearchInput()\" function.\n                        //Some things are done below in order to give the tags time to render before we try to fix any\n                        //text overflow issues that may be present.\n\n                        function updateIfVisible(containerOffsetWidth) {\n                            var visible = (containerOffsetWidth > 0);\n\n                            if (visible) {\n                                //Get the container width minus any padding\n                                containerOffsetWidth -= containerOffsetWidth - angular.element(selectContainerEl).width();\n\n                                //For each match item, set the properly width so that text overflows properly\n                                matchEl.find('.ui-select-match-item').css({\n                                    overflow: 'hidden',\n                                    textOverflow: 'ellipsis',\n                                    maxWidth: containerOffsetWidth\n                                });\n                            }\n\n                            return visible;\n                        }\n\n                        $timeout(function () { //Give tags time to render correctly\n                            updateIfVisible(selectContainerEl.offsetWidth);\n                        });\n                    }\n\n                    if ($select.multiple) {\n                        matchEl = element;\n                        selectContainerEl = matchEl.parent().parent()[0];\n                        origSizeSearchInputFunc = $select.sizeSearchInput;\n\n                        //Hook into the ui-select function that controls resizing for multi search\n                        $select.sizeSearchInput = function () {\n                            origSizeSearchInputFunc();\n                            sizeMatchItems();\n                        };\n\n                        //Resize any tags on load\n                        sizeMatchItems();\n\n                        $(window).on('resize.searchField' + scope.$id, function () {\n                            $timeout.cancel(windowResizeTimeout);\n\n                            windowResizeTimeout = $timeout(function () {\n                                sizeMatchItems();\n                            }, 250);\n                        });\n\n                        scope.$on('$destroy', function () {\n                            $(window).off('resize.searchField' + scope.$id);\n                        });\n                    }\n                }\n            };\n        }])\n        .directive('uiSelectChoices', ['$templateCache', 'bbResources', function ($templateCache, bbResources) {\n            return {\n                restrict: 'EA',\n                replace: false,\n                require: '^uiSelect',\n                link: function (scope, element, attrs, $select) {\n                    var searching,\n                        selectContainerEl,\n                        msgEl;\n\n                    function updateUIForSearch(showSearchingMsg) {\n                        var msg;\n\n                        // Remove the no results message if it's currently displayed\n                        if (msgEl) {\n                            msgEl.remove();\n                            msgEl = null;\n                        }\n\n                        if (searching && $select.items.length === 0) {\n                            // Display the \"Searching...\" or \"No results...\" message - only when we have empty results because we\n                            //don't want the message to popup over a list of results as the user types.\n                            msg = showSearchingMsg ? bbResources.searchfield_searching : bbResources.searchfield_no_records;\n\n                            msgEl = angular.element($templateCache.get('sky/templates/searchfield/choices.html'));\n                            msgEl.find('.bb-searchfield-no-records').text(msg);\n\n                            selectContainerEl.append(msgEl);\n                        }\n                    }\n\n                    function clearResults() {\n                        searching = false;\n                        $select.items = []; // Clear out current result set\n                        updateUIForSearch();\n                    }\n\n                    //Remote Searches Only\n                    //If the refresh attribute is set the control is being used as a remote search\n                    if (attrs.refresh) {\n                        selectContainerEl = angular.element(element).parent();\n                        searching = false;\n\n                        //Watch when the search field is opened/closed so that we can update the UI and remove\n                        //the no results message, and remove the results for the next search.\n                        scope.$watch('$select.open', function () {\n                            clearResults();\n                        });\n\n                        //Watch the search results collection for any changes.\n                        //NOTE: This does NOT fire when the collection is empty and the search result\n                        //comes back empty.  To handle that case, see the \"bbSearchFinished\" event below.\n                        scope.$watchCollection('$select.items', function () {\n                            updateUIForSearch();\n                        });\n\n                        //This event should be fired by the consuming code after it gets and stores the results\n                        //from the remote server.  This allows us to handle the problem above where $watchCollection\n                        //doesn't fire when the collection is empty and the results also come back empty.\n                        scope.$on(\"bbSearchFinished\", function () {\n                            updateUIForSearch();\n                        });\n\n                        //Watch all changes to the search text that the user is typing.\n                        scope.$watch('$select.search', function (search) {\n                            searching = (search && search.length > 0);\n\n                            if (searching) {\n                                //Initially shows the \"Searching...\" message until results come back from the remote server\n                                updateUIForSearch(true);\n                            } else {\n                                clearResults();\n                            }\n                        });\n                    }\n                }\n            };\n        }]);\n}(jQuery));\n","/*jslint nomen: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var tabScrollId = 0;\n    angular.module('sky.tabscroll', ['ui.bootstrap.tabs'])\n        .directive('bbTabScroll', ['$timeout', '$window', function ($timeout, $window) {\n            return {\n                link: function (scope, el, attrs) {\n                    var lastWindowResizeTimeout,\n                        lastWindowWidth;\n\n                    function getNavTabsEl() {\n                        return el.children('.nav-tabs');\n                    }\n\n                    function getScrollLeftForEl(navTabsEl, selector) {\n                        var elWidth,\n                            scrollLeft,\n                            tabEl,\n                            tabLeft,\n                            tabPosition,\n                            tabRight;\n\n                        if (angular.isString(selector)) {\n                            tabEl = navTabsEl.children(selector);\n                        } else {\n                            tabEl = selector;\n                        }\n\n                        tabPosition = tabEl.position();\n\n                        if (tabPosition) {\n                            tabLeft = tabPosition.left;\n\n                            if (tabLeft < 0) {\n                                scrollLeft = tabLeft + navTabsEl[0].scrollLeft;\n                            } else {\n                                elWidth = el.width();\n                                tabRight = tabLeft + tabEl.width();\n\n                                if (tabRight > elWidth) {\n                                    scrollLeft = navTabsEl[0].scrollLeft + (tabRight - elWidth);\n                                }\n                            }\n                        }\n\n                        return scrollLeft;\n                    }\n\n                    function getScrollLeft(navTabsEl) {\n                        return getScrollLeftForEl(navTabsEl, '.active') || 0;\n                    }\n\n                    function stopAnimateTabScroll(navTabsEl) {\n                        navTabsEl.stop(true, true);\n                    }\n\n                    function animateTabScroll(navTabsEl, scrollLeft, duration) {\n                        stopAnimateTabScroll(navTabsEl);\n\n                        navTabsEl\n                            .animate(\n                                {\n                                    scrollLeft: scrollLeft\n                                },\n                                {\n                                    duration: duration || 500\n                                }\n                            );\n                    }\n\n                    function showTabsCanScroll(force) {\n                        var hasOverflow,\n                            navTabsEl = getNavTabsEl(),\n                            overflowOccurred,\n                            scrollLeft;\n\n                        /*istanbul ignore else: sanity check */\n                        if (navTabsEl.length > 0) {\n                            hasOverflow = angular.isDefined(getScrollLeftForEl(navTabsEl, 'li:first')) ||\n                                angular.isDefined(getScrollLeftForEl(navTabsEl, 'li:last'));\n\n                            force = force || angular.isDefined(getScrollLeftForEl(navTabsEl, '.active'));\n\n                            overflowOccurred = !showTabsCanScroll.previousHadOverflow && hasOverflow;\n\n                            if (force || overflowOccurred) {\n                                scrollLeft = getScrollLeft(navTabsEl);\n\n                                stopAnimateTabScroll(navTabsEl);\n\n                                if (overflowOccurred) {\n                                    navTabsEl.scrollLeft(navTabsEl[0].scrollWidth - el.width());\n                                }\n\n                                animateTabScroll(navTabsEl, scrollLeft);\n                            }\n                        }\n\n                        showTabsCanScroll.previousHadOverflow = hasOverflow;\n                    }\n\n                    tabScrollId++;\n\n                    el.addClass('bb-tab-scroll');\n\n                    if (attrs.bbTabScrollReady) {\n                        scope.$watch(attrs.bbTabScrollReady, function (newValue, oldValue) {\n                            if (newValue && newValue !== oldValue) {\n                                showTabsCanScroll(true);\n                            }\n                        });\n                    }\n\n                    lastWindowWidth = $($window).width();\n\n                    // Show initial scroll animation whenever the window width changes.\n                    $($window).on('resize.tabscroll' + tabScrollId, function () {\n                        var windowWidth = $($window).width();\n\n                        if (lastWindowWidth !== windowWidth) {\n                            $timeout.cancel(lastWindowResizeTimeout);\n\n                            lastWindowResizeTimeout = $timeout(function () {\n                                showTabsCanScroll();\n                            }, 250);\n                        }\n\n                        lastWindowWidth = windowWidth;\n                    });\n\n                    // Ensure that when a tab is clicked the tab is fully visible and not partially\n                    // scrolled off either side.\n                    el.on('click', '> .nav-tabs > li', function () {\n                        var navTabsEl,\n                            scrollLeft;\n\n                        navTabsEl = getNavTabsEl();\n                        scrollLeft = getScrollLeftForEl(navTabsEl, $(this));\n\n                        if (angular.isDefined(scrollLeft)) {\n                            animateTabScroll(navTabsEl, scrollLeft, 250);\n                        }\n                    });\n\n                    el.on('$destroy', function () {\n                        $($window).off('.tabscroll' + tabScrollId);\n                    });\n                }\n            };\n        }]);\n}(jQuery));\n","/*jslint nomen: true, plusplus: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    var DROPDOWN_CARET_WIDTH = 45,\n        TAB_PADDING = 15;\n\n    function getTemplate($templateCache, name) {\n        return $templateCache.get('sky/templates/tabset/' + name + '.html');\n    }\n\n    function tabset($compile, $templateCache) {\n        return {\n            link: function ($scope, el, attr) {\n                var ulEl,\n                    liEl;\n\n                if (angular.isDefined(attr.bbTabsetAdd) || angular.isDefined(attr.bbTabsetOpen)) {\n                    ulEl = el.find('ul');\n                    liEl = angular.element(getTemplate($templateCache, 'tabbutton'));\n                    ulEl.append(liEl);\n\n                    if (angular.isDefined(attr.bbTabsetAdd)) {\n                        liEl.append($compile(getTemplate($templateCache, 'addbutton'))($scope));\n\n                        $scope.bbTabAdd = function () {\n                            $scope.$eval(attr.bbTabsetAdd);\n                        };\n                    }\n\n                    if (angular.isDefined(attr.bbTabsetOpen)) {\n                        liEl.append($compile(getTemplate($templateCache, 'openbutton'))($scope));\n\n                        $scope.bbTabOpen = function () {\n                            $scope.$eval(attr.bbTabsetOpen);\n                        };\n                    }\n                }\n            }\n        };\n    }\n\n    tabset.$inject = ['$compile', '$templateCache'];\n\n    function BBTabsetCollapsibleController($scope) {\n        var self = this;\n\n        self.updateCollapsibleHeader = function (header) {\n            $scope.bbTabsetOptions.selectedTabHeader = header;\n        };\n\n        self.tabAdded = function () {\n            if (!$scope.bbTabsetOptions) {\n                $scope.bbTabsetOptions = {\n                    isSmallScreen: false,\n                    tabCount: 0\n                };\n            }\n\n            if ($scope.bbTabsetOptions.isSmallScreen) {\n                $scope.setupCollapsibleTabs($scope.bbTabsetOptions.isSmallScreen && $scope.bbTabsetOptions.tabCount > 1);\n            }\n            $scope.bbTabsetOptions.tabCount++;\n        };\n\n        self.tabRemoved = function () {\n            $scope.bbTabsetOptions.tabCount--;\n        };\n\n    }\n\n    BBTabsetCollapsibleController.$inject = ['$scope'];\n\n    function bbTabsetCollapsible($compile, $templateCache, $window, bbMediaBreakpoints) {\n        return {\n            restrict: 'A',\n            controller: BBTabsetCollapsibleController,\n            link: function ($scope, el) {\n                var lastWindowWidth,\n                    tabCollapseId = $scope.$id;\n\n\n                function getBootstrapTabs() {\n                    return el.find('li:not(.bb-tab-button):not(.bb-tabset-dropdown)');\n                }\n\n                function getDropdownEl() {\n                    return angular.element(getTemplate($templateCache, 'dropdown'));\n                }\n\n                function setTabMaxWidth() {\n                    //later this will resize tabs to fit the window\n                    el.find('ul.nav-tabs li a').css('max-width', '');\n                }\n\n                function setDropdownMaxWidth() {\n                    var availableWidth,\n                        addOpenWidth = 0,\n                        addOpenButtonEl,\n                        i,\n                        dropdownTextMaxWidth;\n\n                    availableWidth = el.width();\n\n                    addOpenButtonEl = el.find('.bb-tab-button-wrap');\n\n                    for (i = 0; i < addOpenButtonEl.length; i++) {\n                        addOpenWidth += addOpenButtonEl.eq(i).width();\n                    }\n\n                    dropdownTextMaxWidth = availableWidth - addOpenWidth - DROPDOWN_CARET_WIDTH - TAB_PADDING;\n\n                    el.find('.bb-tab-header-text').css('max-width', (dropdownTextMaxWidth.toString() + 'px'));\n\n                    el.find('.bb-tabset-dropdown ul.dropdown-menu li a').css('max-width', (availableWidth.toString() + 'px'));\n\n                }\n\n                function setupCollapsibleTabs(isCollapsed) {\n                    var tabsEl,\n                        dropdownContainerEl,\n                        ulEl,\n                        dropdownButtonsEl;\n\n                    tabsEl = getBootstrapTabs();\n                    dropdownButtonsEl = el.find('.bb-tab-button-wrap');\n\n                    ulEl = el.find('ul:not(.bb-tabset-dropdown)');\n                    if (isCollapsed) {\n                        dropdownContainerEl = el.find('.bb-tabset-dropdown');\n\n                        ulEl.addClass('dropdown-menu');\n                        ulEl.removeClass('nav');\n                        ulEl.removeClass('nav-tabs');\n                        dropdownContainerEl.append(ulEl);\n                        dropdownContainerEl.append(dropdownButtonsEl);\n                        setDropdownMaxWidth();\n                    } else {\n                        ulEl.removeClass('dropdown-menu');\n                        ulEl.addClass('nav');\n                        ulEl.addClass('nav-tabs');\n\n                        el.prepend(ulEl);\n\n                        ulEl.find('.bb-tab-button').append(dropdownButtonsEl);\n                        setTabMaxWidth();\n                    }\n                }\n\n                $scope.setupCollapsibleTabs = setupCollapsibleTabs;\n\n                function mediaBreakpointHandler(newBreakpoints) {\n                    $scope.bbTabsetOptions.isSmallScreen = newBreakpoints.xs;\n                    setupCollapsibleTabs(newBreakpoints.xs && ($scope.bbTabsetOptions.tabCount > 1));\n                }\n                if (!$scope.bbTabsetOptions) {\n                    $scope.bbTabsetOptions = {\n                        isSmallScreen: false,\n                        tabCount: 0\n                    };\n                }\n\n                el.prepend($compile(getDropdownEl())($scope));\n\n                $scope.$watch('bbTabsetOptions.tabCount', function (newValue) {\n                    if ($scope.bbTabsetOptions.isSmallScreen) {\n                        if (newValue && newValue > 1) {\n                            setupCollapsibleTabs(true);\n                        } else {\n                            setupCollapsibleTabs(false);\n                        }\n                    }\n\n                });\n\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n\n                // Show initial scroll animation whenever the window width changes.\n                $($window).on('resize.tabcollapse' + tabCollapseId, function () {\n                    var windowWidth = $($window).width();\n\n                    if (lastWindowWidth !== windowWidth && $scope.bbTabsetOptions.isSmallScreen && $scope.bbTabsetOptions.tabCount > 1) {\n                        setDropdownMaxWidth();\n                    }\n\n                    lastWindowWidth = windowWidth;\n                });\n\n                $scope.$on('$destroy', function () {\n                    bbMediaBreakpoints.unregister(mediaBreakpointHandler);\n                    $($window).off('.tabcollapse' + tabCollapseId);\n                });\n            }\n        };\n    }\n\n    bbTabsetCollapsible.$inject = ['$compile', '$templateCache', '$window', 'bbMediaBreakpoints'];\n\n    function collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading) {\n        //get ui-bootstrap tab scope\n        var tabScope = el.isolateScope();\n        $scope.$watch(function () {\n            return tabScope.active;\n        }, function (active) {\n            if (active) {\n                bbTabsetCollapsibleCtrl.updateCollapsibleHeader(getTabHeading());\n            }\n        });\n\n        $scope.$watch(function () {\n            return getTabHeading();\n        }, function (collapseTitle) {\n            if (tabScope.active) {\n                bbTabsetCollapsibleCtrl.updateCollapsibleHeader(collapseTitle);\n            }\n        });\n\n        bbTabsetCollapsibleCtrl.tabAdded();\n\n        $scope.$on('$destroy', function () {\n            bbTabsetCollapsibleCtrl.tabRemoved();\n        });\n    }\n\n    function bbTabCollapseHeader() {\n        return {\n            require: '^bbTabsetCollapsible',\n            link: function ($scope, el, attr, bbTabsetCollapsibleCtrl) {\n                function getTabHeading() {\n                    return $scope.$eval(attr.bbTabCollapseHeader);\n                }\n\n                collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading);\n            }\n        };\n    }\n\n    function tab() {\n        return {\n            require: '?^bbTabsetCollapsible',\n            link: function ($scope, el, attr, bbTabsetCollapsibleCtrl) {\n                var tabScope = el.isolateScope();\n\n                function getTabHeading() {\n                    return tabScope.heading;\n                }\n\n                if (bbTabsetCollapsibleCtrl !== null && !angular.isDefined(attr.bbTabCollapseHeader)) {\n                    collapsibleTabTitle($scope, el, bbTabsetCollapsibleCtrl, getTabHeading);\n                }\n            }\n        };\n    }\n\n    angular.module('sky.tabset', ['ui.bootstrap.tabs', 'sky.mediabreakpoints'])\n        .directive('uibTabset', tabset)\n        .directive('tabset', tabset)\n        .directive('bbTabsetCollapsible', bbTabsetCollapsible)\n        .directive('bbTabCollapseHeader', bbTabCollapseHeader)\n        .directive('tab', tab)\n        .directive('uibTab', tab);\n\n}(jQuery));\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.tabsref', ['ui.bootstrap.tabs'])\n        .directive('bbTabSref', ['$rootScope', '$state', '$timeout', function ($rootScope, $state, $timeout) {\n            return {\n                require: ['^?tabset', '^?uibTabset'],\n                link: function (scope, el, attrs, controllers) {\n                    var active = attrs.active,\n                        sref = attrs.bbTabSref,\n                        stateChangeDeregistration,\n                        tabsetCtrl;\n\n                    tabsetCtrl = controllers[0] !== null ? controllers[0] : controllers[1];\n\n\n                    function checkCurrentState() {\n                        if ($state.is(sref)) {\n                            tabsetCtrl.select(el.isolateScope());\n                        }\n                    }\n\n                    /*istanbul ignore else sanity check */\n                    if (active && sref) {\n                        checkCurrentState();\n\n                        stateChangeDeregistration = $rootScope.$on('$stateChangeSuccess', function () {\n                            checkCurrentState();\n                        });\n\n                        scope.$watch(active, function (newValue) {\n                            if (newValue && !$state.is(sref)) {\n                                // JPB - Delay calling state.go because the state change will fail\n                                // if it is triggered while in the middle of processing of another state change.\n                                // This can happen if you browse to the page without specifying the state of a particular tab\n                                // and then this code tries to switch you over to the state of the first tab.\n                                $timeout(function () {\n                                    $state.go(sref);\n                                });\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            stateChangeDeregistration();\n                        });\n                    }\n                }\n            };\n        }]);\n}());\n","/*jslint nomen: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var BB_TEMPLATE_RESULT = 'bb-template-result';\n\n    function createItemClassName(index) {\n        return 'bb-template-item-' + index;\n    }\n\n    function insertTemplateItems(templateEl, items) {\n        var i,\n            n;\n\n        // Move each item into the template element.\n        for (i = 0, n = items.length; i < n; i++) {\n            items[i].appendTo(templateEl.find('.' + createItemClassName(i)));\n        }\n    }\n\n    angular.module('sky.templating', ['sky.format'])\n        .directive('bbTemplate', ['bbFormat', function (bbFormat) {\n            function createTemplateHtml(template) {\n                // The template string itself should not contain HTML, so be sure to escape it to avoid HTML injection.\n                template = bbFormat.escape(template);\n\n                // Replace {0}, {1}, etc. with span elements that will serve as placeholders for the item elements.\n                return template.replace(/\\{(\\d+)\\}/g, function (match, number) {\n                    /*jslint unparam: true */\n                    return '<span class=\"' + createItemClassName(number) + '\"></span>';\n                });\n            }\n\n            return {\n                controller: ['$scope', function ($scope) {\n                    $scope.items = [];\n\n                    this.addItem = function (item) {\n                        $scope.items.push(item);\n                    };\n                }],\n                link: function (scope, el) {\n\n                    scope.$watch('template', function (newValue) {\n                        var newEl,\n                            oldEl = el.find('.' + BB_TEMPLATE_RESULT),\n                            templateHtml;\n\n                        if (angular.isDefined(newValue)) {\n                            templateHtml = createTemplateHtml(newValue);\n\n                            // Create and append a new template item, move the existing items to it, then\n                            // destroy the old items.  Doing it in this order should ensure any elements\n                            // with bindings remain bound after being moved.\n                            newEl = angular.element('<span class=\"' + BB_TEMPLATE_RESULT + '\">' + templateHtml + '</span>')\n                                .appendTo(el);\n\n                            insertTemplateItems(newEl, scope.items);\n\n                            // Remove old elements if they exist.\n                            oldEl.remove();\n                        }\n                    });\n                },\n                scope: {\n                    template: '=bbTemplate'\n                },\n                restrict: 'A'\n            };\n        }])\n        .directive('bbTemplateItem', function () {\n            return {\n                link: function (scope, el, attr, bbFormatCtrl) {\n                    /*jslint unparam: true */\n                    bbFormatCtrl.addItem(el);\n                },\n                require: '^bbTemplate',\n                restrict: 'AE'\n            };\n        });\n}());\n","/*jslint plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var modules = [\n            'sky.resources',\n            'sky.scrollintoview',\n            'sky.modal'\n        ];\n\n    function getNewlineCount(value) {\n        var matches = value.match(/\\n/gi);\n\n        if (matches) {\n            return matches.length;\n        }\n\n        return 0;\n    }\n\n    function createEl($templateCache, templateName) {\n        return angular.element($templateCache.get('sky/templates/textexpand/' + templateName + '.html'));\n    }\n\n    function BBTextExpandController(textExpandContent, headerContent, closeText) {\n        var self = this;\n        self.textExpandContent = textExpandContent;\n        self.headerContent = headerContent;\n        self.closeText = closeText;\n    }\n\n    BBTextExpandController.$inject = ['textExpandContent', 'headerContent', 'closeText'];\n\n    angular.module('sky.textexpand', modules)\n        .directive('bbTextExpandRepeater', ['$templateCache', 'bbResources', function ($templateCache, bbResources) {\n            function link(scope, el, attrs) {\n                scope.$watch(attrs.bbTextExpandRepeaterData, function (data) {\n                    var length,\n                        maxToShow,\n                        seeMoreEl,\n                        seeMoreText = bbResources.text_expand_see_more,\n                        seeLessText = bbResources.text_expand_see_less;\n\n                    if (data) {\n                        length = data.length;\n                        maxToShow = +attrs.bbTextExpandRepeaterMax;\n                        seeMoreEl = createEl($templateCache, 'seemore').text(seeMoreText);\n\n                        if (length > maxToShow) {\n                            el.find('li:gt(' + (maxToShow - 1) + ')').addClass('bb-text-expand-toggle-li').hide().end().append(\n                                seeMoreEl.click(function () {\n                                    seeMoreEl.siblings('.bb-text-expand-toggle-li').toggle(100);\n                                    if (seeMoreEl.hasClass('bb-text-expand-see-more')) {\n                                        seeMoreEl.text(seeLessText);\n                                    } else {\n                                        seeMoreEl.text(seeMoreText);\n                                    }\n\n                                    seeMoreEl.toggleClass('bb-text-expand-see-more');\n\n                                    return false;\n                                })\n                            );\n                        }\n                    }\n                });\n            }\n\n            return {\n                link: link\n            };\n        }])\n        .directive('bbTextExpand', ['$templateCache', 'bbResources', 'bbScrollIntoView', 'bbModal', function ($templateCache, bbResources, bbScrollIntoView, bbModal) {\n            function link(scope, el, attrs) {\n                var isExpanded,\n                    maxLength = +attrs.bbTextExpandMaxLength || 200,\n                    maxExpandedLength = +attrs.bbTextExpandMaxExpandedLength || 600,\n                    maxNewlines = 1,\n                    maxExpandedNewlines = +attrs.bbTexExpandMaxExpandedNewlines || 3;\n\n                function getTruncatedText(value, length, newlines) {\n                    var i;\n\n                    if (newlines && getNewlineCount(value) >= newlines) {\n                        value = value.replace(/\\s+/gi, ' ');\n                    }\n\n                    // Jump ahead one character and see if it's a space, and if it isn't,\n                    // back up to the first space and break there so a word doesn't get cut\n                    // in half.\n                    for (i = length; i > length - 10; i--) {\n                        if (/\\s/.test(value.charAt(i))) {\n                            length = i;\n                            break;\n                        }\n                    }\n\n                    return value.substr(0, length);\n                }\n\n                scope.$watch(attrs.bbTextExpand, function (newValue) {\n                    var collapsedText,\n                        expandedText,\n                        containerEl,\n                        currentHeight,\n                        ellipsisEl,\n                        expandEl,\n                        newHeight,\n                        textEl,\n                        spaceEl;\n\n                    function animateText(previousText, newText, newExpandText, showEllipsis) {\n                        // Measure the current height so we can animate from it.\n                        currentHeight = containerEl.height();\n\n                        expandEl.text(newExpandText);\n                        textEl.text(newText);\n\n                        newHeight = containerEl.height();\n\n                        if (newHeight < currentHeight) {\n                            // The new text is smaller than the old text, so put the old text back before doing\n                            // the collapse animation to avoid showing a big chunk of whitespace.\n                            textEl.text(previousText);\n                        }\n\n                        ellipsisEl.text(showEllipsis ? '...' : '');\n\n                        containerEl\n                            .height(currentHeight)\n                            .animate(\n                                {\n                                    height: newHeight\n                                },\n                                250,\n                                function () {\n                                    if (newHeight < currentHeight) {\n                                        textEl.text(newText);\n                                    }\n                                    containerEl.css('height', 'auto');\n                                }\n                            );\n                    }\n\n                    containerEl = createEl($templateCache, 'container');\n\n                    /* istanbul ignore else: nothing happens when there's no value, so there's nothing to test. */\n                    if (newValue) {\n                        collapsedText = getTruncatedText(newValue, maxLength, maxNewlines);\n                        expandedText = getTruncatedText(newValue, maxExpandedLength, maxExpandedNewlines); // Get text based on max expanded length\n\n                        if (collapsedText !== newValue) {\n                            isExpanded = true;\n\n                            textEl = createEl($templateCache, 'text').text(collapsedText);\n                            ellipsisEl = createEl($templateCache, 'ellipsis');\n                            spaceEl = createEl($templateCache, 'space');\n                            expandEl = createEl($templateCache, 'seemore').text(bbResources.text_expand_see_more);\n\n\n                            containerEl\n                                .empty()\n                                .append(textEl)\n                                .append(ellipsisEl)\n                                .append(spaceEl)\n                                .append(expandEl);\n\n                            if (getNewlineCount(newValue) >= maxExpandedNewlines || newValue.length > maxExpandedLength) {\n                                expandEl.on('click', function () {\n                                    bbModal.open({\n                                        templateUrl: 'sky/templates/textexpand/expandmodal.html',\n                                        controller: BBTextExpandController,\n                                        controllerAs: 'expandCtrl',\n                                        resolve: {\n                                            textExpandContent: function () {\n                                                return newValue;\n                                            },\n                                            headerContent: function () {\n                                                return scope.$eval(attrs.bbTextExpandModalTitle) || bbResources.text_expand_modal_title;\n                                            },\n                                            closeText: function () {\n                                                return bbResources.text_expand_close_text;\n                                            }\n                                        }\n                                    });\n                                });\n\n                            } else {\n                                expandEl.on('click', function () {\n                                    if (isExpanded) {\n                                        animateText(collapsedText, expandedText, bbResources.text_expand_see_less, (expandedText !== newValue));\n                                    } else {\n                                        animateText(expandedText, collapsedText, bbResources.text_expand_see_more, true);\n                                    }\n\n                                    bbScrollIntoView(expandEl);\n                                    isExpanded = !isExpanded;\n\n                                    return false;\n                                });\n                            }\n\n\n                        } else {\n                            containerEl.text(newValue);\n                        }\n                    }\n\n                    el.empty().append(containerEl);\n\n                    /* istanbul ignore next: these internal variables can't be tested. */\n                    el.on('$destroy', function () {\n                        containerEl = null;\n                        expandEl = null;\n                        textEl = null;\n                        spaceEl = null;\n                    });\n                });\n            }\n\n            return {\n                link: link\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    //Removes the specified tiles from the source container and appends them\n    //in the specified order to the target container.\n    function moveTilesToContainer(sourceContainer, targetContainer, tiles) {\n        angular.forEach(tiles, function (tileId) {\n            var tile = sourceContainer.find('[data-tile-id=\"' + tileId + '\"]');\n            targetContainer.append(tile);\n        });\n    }\n\n    //Returns an array of tile names in the order they appear in the specified container.\n    function parseTileOrder(container) {\n        var tiles = [];\n        container.find('[data-tile-id]').each(function () {\n            tiles.push(angular.element(this).data('tile-id'));\n        });\n        return tiles;\n    }\n\n    angular.module('sky.tiles', ['sky.mediabreakpoints'])\n        .directive('bbTile', ['$timeout', function ($timeout) {\n            return {\n                link: function (scope, el, attrs, dashboardCtrl) {\n                    var dashboardState = {},\n                        displayModeChanging = false,\n                        tileInitialized = false;\n\n                    //determines whether or not a tile is collapsed\n                    function tileIsCollapsed(tileId, tiles) {\n                        var i,\n                            len = tiles.length,\n                            tile;\n\n                        for (i = 0; i < len; i++) {\n                            tile = tiles[i];\n\n                            if (tile.id === tileId) {\n                                return scope.smallTileDisplayMode ? tile.collapsed_small : tile.collapsed;\n                            }\n                        }\n\n                        return !!scope.smallTileDisplayMode;\n                    }\n\n                    //sets the collapsed state of the tile based on the tile settings and the display mode\n                    function updateTileState(tiles) {\n                        var collapsed,\n                            oldCollapsed;\n\n                        tiles = tiles || /*istanbul ignore next: default value */ [];\n\n                        oldCollapsed = scope.isCollapsed;\n\n                        collapsed = tileIsCollapsed(scope.tileId, tiles);\n\n                        if (oldCollapsed === collapsed) {\n                            displayModeChanging = false;\n                        }\n\n                        scope.isCollapsed = collapsed;\n\n                        if (collapsed && !tileInitialized) {\n                            //in some cases the tile-content div is left in a partially collapsed state.\n                            //   this will ensure that the tile is styled corretly and the tile is completely collapsed\n                            $timeout(function () {\n                                var contentEl;\n                                contentEl = el.find('.bb-tile-content');\n                                contentEl.removeClass('collapsing').addClass('collapse');\n                            }, 1);\n                        }\n                    }\n\n                    function updateHeaderContent() {\n                        var wrapperEl;\n\n                        scope.hasHeaderContent = !!scope.headerContentEl;\n\n                        if (scope.headerContentEl) {\n                            wrapperEl = el.find('.bb-tile-header-with-content:first');\n\n                            wrapperEl.append(scope.headerContentEl);\n                        }\n                    }\n\n                    function initializeTile(data) {\n                        $timeout(function () {\n                            var tiles = data.tiles || /*istanbul ignore next: default value */ [];\n\n                            if (!tileInitialized) {\n                                //retrieve the tile id from the parent container\n                                scope.tileId = el.parent().attr('data-tile-id') || /*istanbul ignore next: default value */ '';\n                                scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\n                            }\n\n                            updateTileState(tiles);\n\n                            tileInitialized = true;\n                        });\n                    }\n\n                    scope.isCollapsed = scope.bbTileCollapsed || false;\n                    scope.smallTileDisplayMode = false;\n                    scope.tileId = '';\n\n                    scope.titleClick = function () {\n                        scope.isCollapsed = !scope.isCollapsed;\n                        scope.scrollIntoView = !scope.isCollapsed;\n                    };\n\n                    //listens for the tileModeChanged event from the tileDashboard and updates the collapsed state of the tiles based on whether or not the tiles are in small display mode\n                    scope.$on('tileDisplayModeChanged', function (event, data) {\n                        /*jslint unparam: true */\n                        scope.smallTileDisplayMode = data.smallTileDisplayMode || false;\n\n                        if (tileInitialized) {\n                            displayModeChanging = true;\n                            updateTileState(data.tiles);\n                        }\n                    });\n\n                    //listens for the tilesInitialized event from the tileDashboard and updates the initial collapsed state of the tiles\n                    scope.$on('tilesInitialized', function (event, data) {\n                        /*jslint unparam: true */\n\n                        initializeTile(data);\n                    });\n\n                    //if the collapsed state changes, notify the tileDashboard\n                    scope.$watch('isCollapsed', function () {\n                        if (tileInitialized && !displayModeChanging) {\n                            $timeout(function () {\n                                scope.$emit('tileStateChanged', {\n                                    tileId: scope.tileId,\n                                    collapsed: scope.isCollapsed\n                                });\n                            });\n                        }\n                        displayModeChanging = false;\n\n                        if (!scope.isCollapsed) {\n                            $timeout(function () {\n                                scope.$broadcast('tileRepaint');\n                            });\n                        }\n\n                        scope.bbTileCollapsed = scope.isCollapsed;\n                    });\n\n                    if (attrs.bbTileCollapsed) {\n                        scope.$watch('bbTileCollapsed', function (newValue) {\n                            scope.isCollapsed = newValue;\n                        });\n                    }\n\n                    scope.hasSettings = !!attrs.bbTileSettingsClick;\n\n                    updateHeaderContent();\n\n                    //If the dashboard has already been initialized and this tile hasn't, initialize tile.\n                    if (dashboardCtrl !== null) {\n                        if (dashboardCtrl.dashboardInitialized() && !tileInitialized) {\n                            dashboardState = dashboardCtrl.getDashboardState();\n                            initializeTile(dashboardState);\n                            dashboardCtrl.layoutTiles();\n                        }\n                    }\n                },\n                replace: true,\n                restrict: 'E',\n                require: '?^^bbTileDashboard',\n                scope: {\n                    bbTileCollapsed: '=?',\n                    bbTileSettingsClick: '&?',\n                    tileHeader: '=bbTileHeader'\n                },\n                controller: ['$scope', function ($scope) {\n                    this.setHeaderContentEl = function (el) {\n                        $scope.headerContentEl = el;\n                    };\n                }],\n                templateUrl: 'sky/templates/tiles/tile.html',\n                transclude: true\n            };\n        }])\n        .directive('bbTileHeaderContent', function () {\n            return {\n                replace: true,\n                require: '^bbTile',\n                restrict: 'E',\n                link: function (scope, el, attrs, tileCtrl) {\n                    tileCtrl.setHeaderContentEl(el);\n                },\n                templateUrl: 'sky/templates/tiles/tileheadercontent.html',\n                transclude: true\n            };\n        })\n        .directive('bbTileHeaderCheck', function () {\n            return {\n                replace: true,\n                require: '^bbTileHeaderContent',\n                restrict: 'E',\n                templateUrl: 'sky/templates/tiles/tileheadercheck.html'\n            };\n        })\n        .directive('bbTileSection', function () {\n            return {\n                restrict: 'A',\n                template: function (el) {\n                    el.addClass('bb-tile-content-section');\n                }\n            };\n        })\n        .directive('bbTileDashboard', ['$timeout', 'bbMediaBreakpoints', function ($timeout, bbMediaBreakpoints) {\n            return {\n                replace: true,\n                restrict: 'E',\n                scope: {\n                    tiles: '=bbTiles',\n                    layout: '=bbLayout',\n                    allCollapsed: '=bbTileDashboardAllCollapsed'\n                },\n                link: function (scope, element, attrs) {\n                    var column1 = element.find('[data-dashboard-column=\"1\"]'),\n                        column2 = element.find('[data-dashboard-column=\"2\"]'),\n                        singleColumnMode = false,\n                        sortableOptions;\n\n                    scope.dashboardInitialized = false;\n                    scope.smallTileDisplayMode = false;\n\n                    //Inspects the tiles in each column and updates model accordingly.\n                    function parseColumnTiles() {\n                        scope.$apply(function () {\n                            var layout = scope.layout;\n\n                            if (singleColumnMode) {\n                                layout.one_column_layout = parseTileOrder(column1);\n                            } else {\n                                layout.two_column_layout[0] = parseTileOrder(column1);\n                                layout.two_column_layout[1] = parseTileOrder(column2);\n                            }\n                        });\n                    }\n\n                    //Layouts out the tiles based on the current one column or two column configuration\n                    function layoutTiles() {\n                        var layout = scope.layout;\n\n                        if (layout) {\n                            if (singleColumnMode) {\n                                moveTilesToContainer(element, column1, layout.one_column_layout);\n                            } else {\n                                moveTilesToContainer(element, column1, layout.two_column_layout[0]);\n                                moveTilesToContainer(element, column2, layout.two_column_layout[1]);\n                            }\n                        }\n                    }\n\n                    function fireDisplayModeChanged() {\n                        scope.$broadcast('tileDisplayModeChanged', {\n                            smallTileDisplayMode: scope.smallTileDisplayMode,\n                            tiles: scope.tiles\n                        });\n                    }\n\n                    function mediabreakpointChangeHandler(breakPoints) {\n                        singleColumnMode = (breakPoints.xs || breakPoints.sm);\n                        layoutTiles();\n\n                        if (singleColumnMode) {\n                            element.removeClass('bb-page-content-multicolumn');\n                            column2.hide();\n                        } else {\n                            element.addClass('bb-page-content-multicolumn');\n                            column2.show();\n                        }\n\n                        scope.smallTileDisplayMode = breakPoints.xs;\n\n                        fireDisplayModeChanged();\n                    }\n\n                    //Setup jQuery sortable (drag and drop) options for the dashboard columns\n                    sortableOptions = {\n                        connectWith: '[data-dashboard-column]',\n                        update: parseColumnTiles,\n                        opacity: 0.8,\n                        handle: '.bb-tile-grab-handle',\n                        placeholder: 'placeholder bb-tile',\n                        forcePlaceholderSize: true,\n                        revert: 250\n                    };\n\n                    //Setup jQuery sortable drag/drop for the columns\n                    column1.sortable(sortableOptions);\n                    column2.sortable(sortableOptions);\n\n                    bbMediaBreakpoints.register(mediabreakpointChangeHandler);\n\n                    scope.layoutTiles = layoutTiles;\n\n                    element.on('$destroy', function () {\n                        bbMediaBreakpoints.unregister(mediabreakpointChangeHandler);\n                    });\n\n                    scope.$watch('tiles', function () {\n                        $timeout(function () {\n                            layoutTiles();\n                            scope.$broadcast('tilesInitialized', {\n                                smallTileDisplayMode: scope.smallTileDisplayMode,\n                                tiles: scope.tiles\n                            });\n\n                            scope.dashboardInitialized = true;\n                        });\n                    });\n\n                    scope.$watch('allCollapsed', function (newValue) {\n                        var i,\n                            n,\n                            tiles = scope.tiles;\n\n                        // Check for an explicit true/false here since null/undefined is the\n                        // indeterminate state.\n                        if (newValue === true || newValue === false) {\n                            for (i = 0, n = tiles.length; i < n; i++) {\n                                if (scope.smallTileDisplayMode) {\n                                    tiles[i].collapsed_small = newValue;\n                                } else {\n                                    tiles[i].collapsed = newValue;\n                                }\n                            }\n\n                            fireDisplayModeChanged();\n                        }\n                    });\n\n                    scope.$on('tileStateChanged', function (event, data) {\n                        /*jslint unparam: true */\n                        scope.$apply(function () {\n                            var allCollapsed = null,\n                                collapsed,\n                                collapsedProp,\n                                i,\n                                n,\n                                tile,\n                                tileId = data.tileId || /*istanbul ignore next: default value */ '',\n                                tiles = scope.tiles;\n\n                            collapsed = data.collapsed || false;\n                            collapsedProp = scope.smallTileDisplayMode ? 'collapsed_small' : 'collapsed';\n\n                            for (i = 0, n = tiles.length; i < n; i++) {\n                                tile = tiles[i];\n\n                                if (tile.id === tileId) {\n                                    tile[collapsedProp] = collapsed;\n                                }\n\n                                if (i > 0 && tile[collapsedProp] !== allCollapsed) {\n                                    allCollapsed = null;\n                                } else {\n                                    allCollapsed = tile[collapsedProp];\n                                }\n                            }\n\n                            if (attrs.bbTileDashboardAllCollapsed) {\n                                scope.allCollapsed = allCollapsed;\n                            }\n                        });\n                    });\n                },\n                controller: ['$scope', function ($scope) {\n                    var self = this;\n\n                    self.getDashboardState = function () {\n                        return {tiles: $scope.tiles, smallTileDisplayMode: $scope.smallTileDisplayMode};\n                    };\n\n                    self.dashboardInitialized = function () {\n                        return $scope.dashboardInitialized;\n                    };\n\n                    self.layoutTiles = function () {\n                        /* This timeout is in place to allow a state change to\n                           complete before laying out tiles\n                        */\n                        $timeout(function () {\n                            $scope.layoutTiles();\n                        });\n                    };\n                }],\n                templateUrl: 'sky/templates/tiles/tiledashboard.html'\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    function nextId() {\n        nextId.index = nextId.index || 0;\n        nextId.index++;\n        return 'bbtoast-' + nextId.index;\n    }\n\n    function validateOptions(opts) {\n        if (opts.message && opts.templateUrl) {\n            throw 'You must not provide both a message and a templateUrl.';\n        } else if (!opts.message && !opts.templateUrl) {\n            throw 'You must provide either a message or a templateUrl.';\n        }\n    }\n\n    angular.module('sky.toast', ['toastr'])\n        .config(['toastrConfig', function (toastrConfig) {\n            angular.extend(toastrConfig, {\n                closeButton: true,\n                newestOnTop: true,\n                positionClass: 'toast-bottom-right',\n                tapToDismiss: false,\n                timeOut: 6000\n            });\n        }])\n        .factory('bbToast', ['toastr', '$templateCache', '$compile', '$controller', '$rootScope', '$q', '$injector', function (toastr, $templateCache, $compile, $controller, $rootScope, $q, $injector) {\n            //Based on $modal approach to resolves\n            function getResolvePromises(resolves) {\n                var promisesArr = [];\n                angular.forEach(resolves, function (value) {\n                    if (angular.isFunction(value) || angular.isArray(value)) {\n                        promisesArr.push($q.when($injector.invoke(value)));\n                    }\n                });\n                return promisesArr;\n            }\n\n            function open(message, config) {\n                config = config || {};\n                config.iconClass = 'bb-toast';\n                return toastr.info(message, '', config);\n            }\n\n            function openMessage(opts) {\n                return open(opts.message);\n            }\n\n            function openWithTemplate(opts) {\n                var controller = opts.controller,\n                    controllerLocals,\n                    elId,\n                    resolveIter = 0,\n                    resolvesPromise,\n                    templateHtml,\n                    toast,\n                    toastScope;\n\n                function insertTemplateInToast() {\n                    var templateEl = toast.el.find('#' + elId);\n\n                    templateEl.html(templateHtml);\n\n                    if (controller) {\n                        $controller(controller, controllerLocals);\n                        $compile(templateEl)(controllerLocals.$scope);\n                    }\n                }\n\n                opts.resolve = opts.resolve || {};\n\n                resolvesPromise = $q.all(getResolvePromises(opts.resolve));\n\n                resolvesPromise.then(function (resolvedVars) {\n                    if (controller) {\n                        controllerLocals = {};\n                        controllerLocals.$scope = $rootScope.$new();\n                        angular.forEach(opts.resolve, function (value, key) {\n                            controllerLocals[key] = resolvedVars[resolveIter++];\n                        });\n                    }\n\n                    templateHtml = $templateCache.get(opts.templateUrl);\n\n                    elId = nextId();\n\n                    toast = open(\"<div id='\" + elId + \"'></div>\", { allowHtml: true });\n                    toastScope = toast.scope;\n\n                    //We need to hook in after the toast element has been created and the temporary message\n                    //defined above exists, but before the toast is visually displayed.  The toastr code adds\n                    //an init function to the scope when the toast directive is being linked.  An EvalAsync\n                    //after this occurs will allow us to hook in at the correct moment.\n                    toastScope.$watch('init', function () {\n                        toastScope.$evalAsync(function () {\n                            insertTemplateInToast();\n                        });\n                    });\n                });\n            }\n\n            return {\n                open: function (opts) {\n                    opts = opts || {};\n                    validateOptions(opts);\n\n                    if (opts.templateUrl) {\n                        openWithTemplate(opts);\n                    } else {\n                        openMessage(opts);\n                    }\n                }\n            };\n        }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n\n    function bbTooltip($compile) {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function ($scope, el) {\n                //Add bootstrap directive\n                /*istanbul ignore else */\n                if (!el.attr('uib-tooltip-template')) {\n                    el.attr('uib-tooltip-template', \"'\" + el.attr('bb-tooltip') + \"'\");\n                }\n\n                el.removeAttr('bb-tooltip');\n                $compile(el)($scope);\n            }\n        };\n    }\n\n    bbTooltip.$inject = ['$compile'];\n\n    angular.module('sky.tooltip', ['ui.bootstrap.tooltip'])\n        .directive('bbTooltip', bbTooltip);\n\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.utilities', ['sky.format'])\n        .filter('encodeURIComponent', ['$window', function ($window) {\n            return function (value) {\n                return $window.encodeURIComponent(value);\n            };\n        }])\n        .filter('format', ['bbFormat', function (bbFormat) {\n            return function () {\n                return bbFormat.formatText.apply(this, arguments);\n            };\n        }]);\n}());\n","/*global angular */\n\n(function () {\n    'use strict';\n    angular.module('sky.validation', [])\n        .directive('bbEmailValidation', [function () {\n            var EMAIL_REGEXP = /[\\w\\-]+@([\\w\\-]+\\.)+[\\w\\-]+/;\n            return {\n                require: 'ngModel',\n                restrict: '',\n                link: function (scope, elm, attrs, ctrl) {\n                    /*jslint unparam: true */\n                    if (ctrl && ctrl.$validators.email) {\n                        ctrl.$validators.email = function (modelValue) {\n                            return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\n                        };\n                    }\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var CLS_VIEWKEEPER_FIXED = 'bb-viewkeeper-fixed',\n        config = {\n            viewportMarginTop: 0\n        },\n        ViewKeeper;\n\n    function nextId() {\n        nextId.index = nextId.index || 0;\n        nextId.index++;\n        return 'viewkeeper-' + nextId.index;\n    }\n\n    function getSpacerId(vk) {\n        return vk.id + \"-spacer\";\n    }\n\n    function setElPosition(elQ, left, top, bottom, width) {\n        elQ.css({\n            \"top\": top,\n            \"bottom\": bottom,\n            \"left\": left\n        });\n\n        /*istanbul ignore else: sanity check */\n        if (width !== null) {\n            elQ.css({ \"width\": width });\n        }\n    }\n\n    function unfixEl(vk) {\n        var elQ = angular.element(vk.el),\n            width;\n\n        angular.element(\"#\" + getSpacerId(vk)).remove();\n\n        elQ.removeClass(CLS_VIEWKEEPER_FIXED);\n\n        vk.currentElFixedLeft = null;\n        vk.currentElFixedTop = null;\n        vk.currentElFixedBottom = null;\n        vk.currentElFixedWidth = null;\n\n        if (vk.setWidth) {\n            width = \"auto\";\n        }\n        setElPosition(elQ, \"\", \"\", \"\", width);\n    }\n\n    function calculateVerticalOffset(vk) {\n        var offset,\n            verticalOffSetElTop;\n\n        offset = vk.verticalOffSet;\n\n        if (vk.verticalOffSetEl) {\n            verticalOffSetElTop = vk.verticalOffSetEl.css('top');\n\n            /*istanbul ignore else: sanity check */\n            if (verticalOffSetElTop) {\n                verticalOffSetElTop = parseInt(verticalOffSetElTop, 10);\n                if (isNaN(verticalOffSetElTop)) {\n                    verticalOffSetElTop = 0;\n                }\n            }\n\n            offset += (vk.verticalOffSetEl.outerHeight() + verticalOffSetElTop);\n        }\n\n        return offset;\n    }\n\n    ViewKeeper = function (options) {\n        var id,\n            vk = this;\n\n        options = options || /* istanbul ignore next */ {};\n\n        vk.fixToBottom = options.fixToBottom;\n        vk.setWidth = options.setWidth;\n        vk.id = id = nextId();\n        vk.el = options.el;\n        vk.boundaryEl = options.boundaryEl;\n        vk.verticalOffSet = options.verticalOffSet || 0;\n        vk.setPlaceholderHeight = (options.setPlaceholderHeight !== false);\n        vk.onStateChanged = options.onStateChanged;\n        vk.isFixed = false;\n\n        if (options.verticalOffSetElId) {\n            vk.verticalOffSetEl = angular.element('#' + options.verticalOffSetElId);\n\n            vk.verticalOffSetEl.on('afterViewKeeperSync.' + id, function () {\n                vk.syncElPosition();\n            });\n        }\n\n        angular.element(window).on(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id, function () {\n            vk.syncElPosition();\n        });\n    };\n\n    ViewKeeper.prototype = {\n\n        syncElPosition: function () {\n            var anchorTop,\n                anchorHeight,\n                isCurrentlyFixed,\n                currentElFixedLeft,\n                currentElFixedTop,\n                currentElFixedBottom,\n                currentElFixedWidth,\n                documentQ,\n                fixEl,\n                boundaryBottom,\n                boundaryOffset,\n                boundaryQ,\n                boundaryTop,\n                elFixedLeft,\n                elFixedTop,\n                elFixedBottom,\n                elFixedWidth,\n                elHeight,\n                elQ,\n                needsUpdating,\n                scrollLeft,\n                scrollTop,\n                spacerHeight,\n                spacerId,\n                spacerQ,\n                verticalOffSet,\n                vk = this,\n                width;\n\n            isCurrentlyFixed = vk.isFixed;\n\n            verticalOffSet = calculateVerticalOffset(vk);\n\n            elQ = angular.element(vk.el);\n\n            // When the element isn't visible, its size can't be calculated, so don't attempt syncing position in this case.\n            if (!elQ.is(':visible')) {\n                return;\n            }\n\n            boundaryQ = angular.element(vk.boundaryEl);\n            spacerId = getSpacerId(vk);\n\n            spacerQ = angular.element(\"#\" + spacerId);\n            documentQ = angular.element(window.document);\n\n            boundaryOffset = boundaryQ.offset();\n            boundaryTop = boundaryOffset.top;\n            boundaryBottom = boundaryTop + boundaryQ.height();\n\n            scrollLeft = documentQ.scrollLeft();\n            scrollTop = documentQ.scrollTop();\n\n            elHeight = elQ.outerHeight(true);\n\n            if (vk.fixToBottom) {\n                elFixedBottom = 0;\n            } else {\n                // If the element needs to be fixed, this will calculate its position.  The position will be 0 (fully visible) unless\n                // the user is scrolling the boundary out of view.  In that case, the element should begin to scroll out of view with the\n                // rest of the boundary by setting its top position to a negative value.\n                elFixedTop = Math.min((boundaryBottom - elHeight) - scrollTop, verticalOffSet);\n            }\n\n\n            elFixedWidth = boundaryQ.width();\n            elFixedLeft = boundaryOffset.left - scrollLeft;\n\n            currentElFixedLeft = vk.currentElFixedLeft;\n            currentElFixedTop = vk.currentElFixedTop;\n            currentElFixedBottom = vk.currentElFixedBottom;\n            currentElFixedWidth = vk.currentElFixedWidth;\n\n            if (spacerQ.length > 0) {\n                anchorTop = spacerQ.offset().top;\n                anchorHeight = spacerQ.outerHeight(true);\n            } else {\n                anchorTop = elQ.offset().top;\n                anchorHeight = elHeight;\n            }\n\n            if (vk.fixToBottom) {\n                //Fix el if the natural bottom of the element would not be on the screen\n                fixEl = (anchorTop + anchorHeight > scrollTop + window.innerHeight);\n            } else {\n                fixEl = scrollTop + verticalOffSet + config.viewportMarginTop > anchorTop;\n            }\n\n            if ((fixEl && currentElFixedLeft === elFixedLeft && currentElFixedTop === elFixedTop && currentElFixedBottom === elFixedBottom && currentElFixedWidth === elFixedWidth) || (!fixEl && !(currentElFixedLeft !== undefined && currentElFixedLeft !== null))) {\n                // The element is either currently fixed and its position and width do not need to change, or the element is not\n                // currently fixed and does not need to be fixed.  No changes are needed.\n                needsUpdating = false;\n            } else {\n                needsUpdating = true;\n            }\n\n            if (needsUpdating) {\n                if (fixEl) {\n                    vk.isFixed = true;\n                    if (spacerQ.length === 0) {\n                        if (vk.setPlaceholderHeight) {\n                            spacerHeight = elHeight;\n                        } else {\n                            spacerHeight = 0;\n                        }\n                        elQ.after('<div id=\"' + spacerId + '\" style=\"height: ' + spacerHeight + 'px;\"></div>');\n                    }\n\n                    elQ.addClass(CLS_VIEWKEEPER_FIXED);\n\n                    vk.currentElFixedTop = elFixedTop;\n                    vk.currentElFixedBottom = elFixedBottom;\n                    vk.currentElFixedLeft = elFixedLeft;\n                    vk.currentElFixedWidth = elFixedWidth;\n\n                    if (vk.setWidth) {\n                        width = elFixedWidth;\n                    }\n\n                    setElPosition(elQ, elFixedLeft, elFixedTop, elFixedBottom, width);\n                } else {\n                    vk.isFixed = false;\n                    unfixEl(vk);\n                }\n\n                //If we changed if the item is fixed, fire the callback\n                if (vk.onStateChanged && isCurrentlyFixed !== vk.isFixed) {\n                    vk.onStateChanged();\n                }\n            }\n            elQ.trigger('afterViewKeeperSync');\n        },\n\n        scrollToTop: function () {\n            var anchorTop,\n                elQ,\n                documentQ,\n                spacerId,\n                spacerQ,\n                verticalOffset,\n                vk = this;\n\n            verticalOffset = calculateVerticalOffset(vk);\n\n            documentQ = angular.element(window.document);\n            spacerId = getSpacerId(vk);\n            spacerQ = angular.element(\"#\" + spacerId);\n            elQ = angular.element(vk.el);\n\n            if (spacerQ.length > 0) {\n                anchorTop = spacerQ.offset().top;\n            } else {\n                anchorTop = elQ.offset().top;\n            }\n\n            documentQ.scrollTop(anchorTop - verticalOffset - config.viewportMarginTop);\n        },\n\n        destroy: function () {\n            var id,\n                vk = this;\n\n            if (!vk.isDestroyed) {\n                id = vk.id;\n\n                angular.element(window).off(\"scroll.\" + id + \", resize.\" + id + \", orientationchange.\" + id);\n                unfixEl(vk);\n\n                if (vk.verticalOffSetEl) {\n                    vk.verticalOffSetEl.off(\"afterViewKeeperSync.\" + vk.id);\n                    vk.verticalOffSetEl = null;\n                }\n\n                vk.isDestroyed = true;\n            }\n        }\n\n    };\n\n    angular.module('sky.viewkeeper', ['sky.mediabreakpoints', 'sky.window'])\n        .constant('bbViewKeeperConfig', config)\n        .factory('bbViewKeeperBuilder', function () {\n            return {\n                create: function (options) {\n                    return new ViewKeeper(options);\n                }\n            };\n        })\n        .run(['$document', '$window', 'bbMediaBreakpoints', 'bbViewKeeperConfig', function ($document, $window, bbMediaBreakpoints, bbViewKeeperConfig) {\n            function mediaBreakpointHandler(breakpoints) {\n                //For user agents in which the omnibar follows you down the page, the ViewKeeper needs\n                //to adjust for the height of the omnibar.\n\n                //Ideally these values should be driven from a more appropriate source (omnibar js?)\n                bbViewKeeperConfig.viewportMarginTop = breakpoints.xs ? 50 : 30;\n            }\n\n            if (/iPad|iPod|iPhone/i.test($window.navigator.userAgent)) {\n                //On iOS the omnibar doesn't scroll with you.  Need to account for this on the styling.\n                angular.element('body').addClass('omnibar-not-fixed');\n\n                //On iOS we need to have special handling when entering textboxes to correct an issue with fixed\n                //elements used by view keeper when the keyboard flys out.\n                angular.element(document).on('focus', 'input', function () {\n                    angular.element('body').addClass('bb-viewkeeper-ignore-fixed');\n                }).on('blur', 'input', function () {\n                    angular.element('body').removeClass('bb-viewkeeper-ignore-fixed');\n                });\n            } else {\n                bbMediaBreakpoints.register(mediaBreakpointHandler);\n            }\n        }])\n        .directive('bbViewKeeper', ['bbViewKeeperBuilder', function (bbViewKeeperBuilder) {\n            function link(scope, el) {\n                var vk;\n\n                function destroyVk() {\n                    if (vk) {\n                        vk.destroy();\n                        vk = null;\n                    }\n                }\n\n                el.on('$destroy', function () {\n                    destroyVk();\n                });\n\n                scope.$watch('bbBoundaryElId', function () {\n                    var boundaryEl,\n                        bbBoundaryElId = scope.bbBoundaryElId;\n\n                    /*istanbul ignore else */\n                    if (bbBoundaryElId) {\n                        boundaryEl = angular.element('#' + bbBoundaryElId);\n\n                        /*istanbul ignore else */\n                        if (boundaryEl.length === 1) {\n                            destroyVk();\n\n                            vk = bbViewKeeperBuilder.create({\n                                el: el[0],\n                                boundaryEl: boundaryEl[0],\n                                setWidth: true\n                            });\n                        }\n                    }\n                });\n            }\n\n            return {\n                link: link,\n                restrict: 'A',\n                scope: {\n                    bbBoundaryElId: '='\n                }\n            };\n        }])\n        .directive('bbScrollingViewKeeper', ['$window', 'bbWindow', function ($window, bbWindow) {\n            return {\n                scope: {\n                    bbScrollingViewKeeper: \"=\"\n                },\n                link: function (scope, element) {\n                    var elementStart,\n                        scrollPos,\n                        prevScroll,\n                        scrollingDown = true,\n                        tempTop,\n                        verticalOffset,\n                        id = scope.$id;\n\n                    function scroll() {\n                        if (!element.is(':visible')) {\n                            return;\n                        }\n\n                        if (angular.element('.bb-omnibar>.desktop').is(':visible')) {\n                            verticalOffset = angular.element('.bb-omnibar>.desktop>.bar').outerHeight();\n                        } else {\n                            verticalOffset = 0;\n                        }\n\n                        if (scope.bbScrollingViewKeeper && scope.bbScrollingViewKeeper.viewKeeperOffsetElId) {\n                            verticalOffset += angular.element('#' + scope.bbScrollingViewKeeper.viewKeeperOffsetElId).outerHeight();\n                        }\n\n                        if (!elementStart) {\n                            elementStart = element.offset().top;\n                        }\n                        scrollPos = $window.scrollY || $window.pageYOffset || $window.document.body.scrollTop || 0;\n                        if (prevScroll > scrollPos) {\n                            scrollingDown = false;\n                        } else {\n                            scrollingDown = true;\n                        }\n                        prevScroll = scrollPos;\n\n                        if (scrollPos >= elementStart - verticalOffset && element.height() + verticalOffset <= $window.document.body.offsetHeight) {\n                            if (element.height() + verticalOffset < $window.innerHeight) {\n                                tempTop = 0;\n\n                                element.removeClass('bb-grid-filters-fixed-bottom').addClass('bb-grid-filters-fixed-top');\n\n                                element.css({\n                                    top: verticalOffset + 'px'\n                                });\n                            } else if (scrollingDown) {\n                                if (element.offset().top + element.height() >= scrollPos + $window.innerHeight) {\n                                    /*istanbul ignore else: sanity check */\n                                    if (!tempTop) {\n                                        tempTop = element.offset().top - elementStart;\n                                    }\n\n                                    element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom');\n\n                                    element.css({\n                                        top: tempTop\n                                    });\n                                } else {\n                                    tempTop = 0;\n                                    element.css({\n                                        top: ''\n                                    });\n                                    element.removeClass('bb-grid-filters-fixed-top').addClass('bb-grid-filters-fixed-bottom');\n                                }\n                            } else {\n                                if (element.offset().top < scrollPos + verticalOffset) {\n                                    /*istanbul ignore else: sanity check */\n                                    if (!tempTop) {\n                                        tempTop = element.offset().top - elementStart;\n                                    }\n\n                                    element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom ');\n\n                                    element.css({\n                                        top: tempTop\n                                    });\n                                } else {\n                                    tempTop = 0;\n\n                                    element.removeClass('bb-grid-filters-fixed-bottom').addClass('bb-grid-filters-fixed-top');\n\n                                    element.css({\n                                        top: verticalOffset + 'px'\n                                    });\n                                }\n                            }\n                        } else {\n                            tempTop = 0;\n                            element.removeClass('bb-grid-filters-fixed-top bb-grid-filters-fixed-bottom grid-filters-fixed-top grid-filters-fixed-bottom');\n                            element.css({\n                                top: 0\n                            });\n                        }\n                    }\n\n                    if (!bbWindow.isIosUserAgent()) {\n                        angular.element($window).on('scroll.' + id + ', orientationchange.' + id, scroll);\n\n                        element.on('$destroy', function () {\n                            angular.element($window).off(\"scroll.\" + id + \", orientationchange.\" + id);\n                        });\n                    }\n                },\n                restrict: 'A'\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular, jQuery */\n\n(function ($) {\n    'use strict';\n\n    angular.module('sky.wait', [])\n        .factory('bbWait', ['$timeout', function ($timeout) {\n\n            var addWait,\n                removeWait,\n                clearBlockOptions,\n                fullPageClearBlockOptions,\n                fullPageVisibleBlockOptions,\n                fullPageZIndex = 20000,\n                nonBlockWaitCountAttr = 'bb-wait-non-block-count',\n                visibleBlockOptions,\n                showingWaitAttr = 'bb-wait-showingwait',\n                waitCountAttr = 'bb-wait-count';\n\n            visibleBlockOptions = {\n                message: '<div class=\"bb-wait-wrap\"><div class=\"bb-wait-spinner\"></div></div>'\n            };\n\n            clearBlockOptions = {\n                message: \"\",\n                fadeOut: 0,\n                fadeIn: 0,\n                overlayCSS: {\n                    opacity: 0\n                }\n            };\n\n            fullPageClearBlockOptions = angular.copy(clearBlockOptions);\n            fullPageClearBlockOptions.overlayCSS[\"z-index\"] = fullPageZIndex;\n\n            fullPageVisibleBlockOptions = angular.copy(visibleBlockOptions);\n            fullPageVisibleBlockOptions.overlayCSS = { \"z-index\": fullPageZIndex };\n            fullPageVisibleBlockOptions.css = { \"z-index\": fullPageZIndex + 1 };\n\n            function isBlockUISupported() {\n                // Returns whether jquery.blockUI is loaded.\n                return ($ && $.blockUI);\n            }\n\n            function isFullPage(el) {\n                // Returns whether the element specified should be causing a\n                // full page wait rather than just on the element itself.\n                return $(el)[0] === document.body;\n            }\n\n            function getWaitCount(el, nonblocking) {\n                // Returns the elements current wait count\n                var attr = nonblocking ? nonBlockWaitCountAttr : waitCountAttr;\n                return parseInt($(el).data(attr) || 0, 10);\n            }\n\n            function setWaitCount(el, count, nonblocking) {\n                var attr = nonblocking ? nonBlockWaitCountAttr : waitCountAttr;\n\n                // Sets the elements current wait count\n                if (!count) {\n                    $(el).removeData(attr);\n                } else {\n                    $(el).data(attr, count);\n                }\n            }\n\n            function nonblockEl(el, options) {\n                var childOptions = angular.extend({}, options),\n                    nonblock = $(el).children(\".bb-wait-nonblock\");\n\n                if (nonblock.length === 0) {\n                    nonblock = $(\"<div class='bb-wait-nonblock'></div>\");\n                    $(el).append(nonblock);\n                    $(nonblock).click(function () {\n                        nonblock.hide();\n                    });\n                }\n                nonblock.show();\n\n                childOptions.nonblocking = false;\n\n                addWait(nonblock[0], childOptions);\n            }\n\n            function unNonblockEl(el, options) {\n                var childOptions = angular.extend({}, options),\n                    nonblock = $(el).children(\".bb-wait-nonblock\");\n\n                if (nonblock.length > 0) {\n                    childOptions.nonblocking = false;\n                    removeWait(nonblock[0], childOptions);\n                }\n            }\n\n            function blockEl(el, options) {\n                // Shows the element block UI.\n\n                var customBlockOptions,\n                    $el = $(el);\n\n                if (!isBlockUISupported()) {\n                    return;\n                }\n\n                /* istanbul ignore if: this doesn't seem ever be hit; maybe revisit. */\n                if ($el.data(showingWaitAttr)) {\n                    // If we're already showing the block, then don't start this again.\n                    // Using a different flag than the count itself to support delaying the unblock.\n                    return;\n                }\n\n                function showFullBlock() {\n                    /* istanbul ignore if: this doesn't seem ever be hit; maybe revisit. */\n                    if (!$el.data(showingWaitAttr)) {\n                        // If we're no longer showing the wait then the block was removed before the visible block was added.\n                        // We shouldn't continue to add the visible block.\n                        return;\n                    }\n\n                    if (isFullPage(el)) {\n                        $.blockUI(angular.extend({}, fullPageVisibleBlockOptions, customBlockOptions));\n                    } else {\n                        $el.block(angular.extend({}, visibleBlockOptions, customBlockOptions));\n                    }\n                }\n\n                options = angular.extend({}, {\n                    visualBlockDelay: 300\n                }, options || /* istanbul ignore next: sanity check */ {});\n\n                customBlockOptions = {\n                    fadeIn: options.fadeIn\n                };\n\n                $el.data(showingWaitAttr, true);\n\n                if (options.visualBlockDelay) {\n                    if (isFullPage(el)) {\n                        $.blockUI(fullPageClearBlockOptions);\n                    } else {\n                        $el.block(clearBlockOptions);\n                    }\n\n                    $timeout(showFullBlock, options.visualBlockDelay);\n                } else {\n                    showFullBlock();\n                }\n            }\n\n            function unblockEl(el) {\n                // Removes the element block UI.\n\n                // Including a setTimeout here so that if a block is immediately re-added, then there won't be a blink\n                // between turning off the current block and then adding another.\n                // This timeout could default to something higher than 0 or we could make it configurable if needed.\n                // A set timeout of 0 handles blocks added without async operations before starting another, which\n                // would indicate that the block should have been maintained anyways.\n                $timeout(function () {\n                    var $el;\n\n                    /* istanbul ignore else: sanity check */\n                    if (getWaitCount(el) === 0) {\n                        $el = $(el);\n\n                        if (!isBlockUISupported()) {\n                            return;\n                        }\n\n                        if (isFullPage(el)) {\n                            $.unblockUI();\n                        } else {\n                            $el.unblock();\n                        }\n                        $el.removeData(showingWaitAttr);\n                    }\n                }, 0);\n            }\n\n            addWait = function (el, options) {\n                var count;\n                options = options || {};\n\n                // Increases the element wait count and shows the wait if the count is above 0.\n                count = getWaitCount(el, options.nonblocking);\n                count += 1;\n\n                setWaitCount(el, count, options.nonblocking);\n                if (count === 1) {\n                    if (options.nonblocking) {\n                        nonblockEl(el, options);\n                    } else {\n                        blockEl(el, options);\n                    }\n                }\n            };\n\n            removeWait = function (el, options) {\n                var count;\n                options = options || {};\n\n                // Decreases the element wait count and hides the wait if the count is at 0.\n                count = getWaitCount(el, options.nonblocking);\n                if (count > 0) {\n                    count -= 1;\n\n                    setWaitCount(el, count, options.nonblocking);\n                    if (count === 0) {\n                        if (options.nonblocking) {\n                            unNonblockEl(el, options);\n                        } else {\n                            unblockEl(el, options);\n                        }\n                    }\n                }\n            };\n\n            function clearAllWaits(el) {\n                // Forcibly clears out the wait count for an element\n                setWaitCount(el, 0);\n                unblockEl(el);\n                setWaitCount(el, 0, true);\n                unNonblockEl(el);\n            }\n\n            if (isBlockUISupported()) {\n                // Clear any blockUI defaults.  Specifying these in the block call itself just gets appended to the defaults\n                // but is incapable of generically clearing them all.\n                $.blockUI.defaults.css = {};\n                $.blockUI.defaults.overlayCSS = {};\n            }\n\n            return {\n                beginElWait: function (el, options) {\n                    addWait(el, options);\n                },\n                beginPageWait: function (options) {\n                    addWait(document.body, options);\n                },\n                clearElWait: function (el) {\n                    clearAllWaits(el);\n                },\n                clearPageWait: function () {\n                    clearAllWaits(document.body);\n                },\n                endElWait: function (el, options) {\n                    removeWait(el, options);\n                },\n                endPageWait: function (options) {\n                    removeWait(document.body, options);\n                }\n            };\n        }])\n        .directive('bbWait', ['bbWait', function (bbWait) {\n            /// <summary>\n            /// This directive provides an attribute that can be placed on elements indicating whether they should or shouldn't be blocked for waiting.\n            /// </summary>\n            return {\n                restrict: 'A',\n                link: function (scope, el, attrs) {\n                    var firstScopeLoad = true;\n                    scope.$watch(attrs.bbWait, function (value, oldValue) {\n                        if (value && (!oldValue || firstScopeLoad)) {\n                            bbWait.beginElWait(el);\n                        } else if (oldValue && !value) {\n                            bbWait.endElWait(el);\n                        }\n                        firstScopeLoad = false;\n                    });\n                }\n            };\n        }]);\n\n}(jQuery));\n","/*global angular*/\n\n(function () {\n    'use strict';\n\n    angular.module('sky.window', [])\n        .constant('bbWindowConfig', {\n            productName: ''\n        })\n        .factory('bbWindow', ['$window', 'bbWindowConfig', '$timeout', '$document', function ($window, bbWindowConfig, $timeout, $document) {\n            var scrollbarWidth;\n\n            function calculateScrollbarWidth() {\n                var inner,\n                    outer,\n                    w1,\n                    w2;\n\n                inner = angular.element('<p></p>');\n                inner.css('width', '100%');\n                inner.css('height', '200px');\n\n                outer = angular.element('<div></div>');\n                outer.css('position', 'absolute');\n                outer.css('top', '0px');\n                outer.css('left', '0px');\n                outer.css('visibility', 'hidden');\n                outer.css('width', '200px');\n                outer.css('height', '150px');\n                outer.css('overflow', 'hidden');\n\n                outer.append(inner);\n\n                $document.find('body').append(outer);\n\n                w1 = inner[0].offsetWidth;\n\n                outer.css('overflow', 'scroll');\n                w2 = inner[0].offsetWidth;\n\n                /*istanbul ignore next: sanity check */\n                if (w1 === w2) {\n                    w2 = outer[0].clientWidth;\n                }\n                outer.remove();\n                return (w1 - w2);\n            }\n\n            return {\n                setWindowTitle: function (title) {\n                    var textToAppend = bbWindowConfig.productName;\n\n                    if (textToAppend) {\n                        title = title || '';\n\n                        if (title) {\n                            title += ' - ';\n                        }\n\n                        title += textToAppend;\n                    }\n\n                    //Adding a delay so the setWindowTitle method can be safely called after an angular\n                    //state change without taking affect until after the browser has completed its\n                    //state change.  Without this, the previous page will be renamed in the browser history.\n                    $timeout(function () {\n                        $window.document.title = title;\n                    });\n                },\n                getScrollbarWidth: function () {\n                    if (!scrollbarWidth && scrollbarWidth !== 0) {\n                        scrollbarWidth = calculateScrollbarWidth();\n                    }\n\n                    return scrollbarWidth;\n                },\n                isIosUserAgent: function () {\n                    return /iPad|iPod|iPhone/i.test($window.navigator.userAgent);\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true, plusplus: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('sky.wizard', ['sky.resources', 'ui.bootstrap.tabs'])\n        .directive('bbWizard', function () {\n            return {\n                link: function (scope, el) {\n                    /*jslint unparam: true */\n                    el.addClass('bb-wizard');\n                },\n                restrict: 'A'\n            };\n        })\n        .directive('bbWizardStepComplete', function () {\n            return {\n                link: function (scope, el, attrs) {\n                    scope.$watch(attrs.bbWizardStepComplete, function (newValue) {\n                        el[newValue ? 'addClass' : 'removeClass']('bb-wizard-step-complete');\n                    });\n                }\n            };\n        })\n        .factory('bbWizardNavigator', ['bbResources', function (bbResources) {\n            function stepIsDisabled(step) {\n                return angular.isFunction(step.disabled) && step.disabled();\n            }\n\n            return {\n                init: function (options) {\n                    /*jslint unparam: true */\n                    var steps,\n                        finish;\n\n                    function getPreviousStep() {\n                        var i,\n                            n,\n                            previousStep,\n                            step;\n\n                        for (i = 0, n = steps.length; i < n; i++) {\n                            step = steps[i];\n\n                            if (step.active && i > 0) {\n                                previousStep = steps[i - 1];\n\n                                if (!stepIsDisabled(previousStep)) {\n                                    return previousStep;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        return null;\n                    }\n\n                    function getNextStep() {\n                        var i,\n                            n,\n                            nextStep,\n                            step;\n\n                        for (i = 0, n = steps.length; i < n; i++) {\n                            step = steps[i];\n\n                            if (step.active && i + 1 < n) {\n                                nextStep = steps[i + 1];\n\n                                if (!stepIsDisabled(nextStep)) {\n                                    return nextStep;\n                                }\n\n                                break;\n                            }\n                        }\n\n                        return null;\n                    }\n\n                    function setActiveStep(step) {\n                        if (step) {\n                            step.active = true;\n                        }\n                    }\n\n                    function lastStepIsActive() {\n                        return steps[steps.length - 1].active;\n                    }\n\n                    options = options || {};\n\n                    steps = options.steps;\n                    finish = options.finish;\n\n                    return {\n                        previousText: function () {\n                            return bbResources.wizard_navigator_previous;\n                        },\n                        nextText: function () {\n                            return lastStepIsActive() ? bbResources.wizard_navigator_finish : bbResources.wizard_navigator_next;\n                        },\n                        goToPrevious: function () {\n                            setActiveStep(getPreviousStep());\n                        },\n                        goToNext: function () {\n                            if (lastStepIsActive()) {\n                                if (angular.isFunction(finish)) {\n                                    finish();\n                                }\n                            } else {\n                                setActiveStep(getNextStep());\n                            }\n                        },\n                        previousDisabled: function () {\n                            return !getPreviousStep();\n                        },\n                        nextDisabled: function () {\n                            return !getNextStep() && !lastStepIsActive();\n                        }\n                    };\n                }\n            };\n        }]);\n}());\n","/*jslint browser: true */\n/*global angular */\n\n(function () {\n    'use strict';\n\n    var modules = [\n        'sky.actionbar',\n        'sky.alert',\n        'sky.autofocus',\n        'sky.autonumeric',\n        'sky.avatar',\n        'sky.check',\n        'sky.checklist',\n        'sky.contextmenu',\n        'sky.data',\n        'sky.datepicker',\n        'sky.daterangepicker',\n        'sky.error',\n        'sky.format',\n        'sky.grids',\n        'sky.help',\n        'sky.helpbutton',\n        'sky.highlight',\n        'sky.mediabreakpoints',\n        'sky.modal',\n        'sky.moment',\n        'sky.navbar',\n        'sky.omnibar',\n        'sky.palette',\n        'sky.page',\n        'sky.pagesummary',\n        'sky.pagination',\n        'sky.popover',\n        'sky.resources',\n        'sky.scrollintoview',\n        'sky.searchfield',\n        'sky.tabscroll',\n        'sky.tabset',\n        'sky.tabsref',\n        'sky.templates',\n        'sky.templating',\n        'sky.textexpand',\n        'sky.tiles',\n        'sky.tooltip',\n        'sky.utilities',\n        'sky.validation',\n        'sky.viewkeeper',\n        'sky.wait',\n        'sky.window',\n        'sky.wizard'\n    ];\n\n    try {\n        angular.module('toastr');\n        modules.push('sky.toast');\n    } catch (ignore) {\n        /* The toastr module isn't defined.  Do not load sky.toast module */\n    }\n\n    try {\n        angular.module('ngFileUpload');\n        modules.push('sky.fileattachments');\n    } catch (ignore) {\n\n    }\n\n    angular.module('sky', modules);\n\n}());\n","/*jshint unused: false */\n/*global angular */\n\n(function () {\n'use strict';\n\nvar bbResourcesOverrides;\n\nbbResourcesOverrides = {\"action_bar_actions\":\"Actions\",\"alert_close\":\"Close\",\"autonumeric_abbr_billions\":\"b\",\"autonumeric_abbr_millions\":\"m\",\"autonumeric_abbr_thousands\":\"k\",\"avatar_error_not_image_description\":\"Please choose a file that is a valid image.\",\"avatar_error_not_image_title\":\"File is not an image.\",\"avatar_error_too_large_description\":\"Please choose an image that is less than {0}.\",\"avatar_error_too_large_title\":\"File is too large.\",\"checklist_select_all\":\"Select all\",\"checklist_clear_all\":\"Clear all\",\"checklist_no_items\":\"No items found\",\"grid_back_to_top\":\"Back to top\",\"grid_column_picker_all_categories\":\"All\",\"grid_column_picker_description_header\":\"Description\",\"grid_column_picker_header\":\"Choose columns to show in the list\",\"grid_column_picker_name_header\":\"Column\",\"grid_column_picker_search_placeholder\":\"Search by name\",\"grid_column_picker_submit\":\"Apply changes\",\"grid_columns_button\":\" Choose columns\",\"grid_filters_apply\":\"Apply filters\",\"grid_filters_button\":\"Filters\",\"grid_filters_clear\":\"Clear\",\"grid_filters_header\":\"Filter\",\"grid_filters_hide\":\"Hide\",\"grid_filters_summary_header\":\"Filter:\",\"grid_load_more\":\"Load more\",\"grid_search_placeholder\":\"Find in this list\",\"grid_column_picker_search_no_columns\":\"No columns found\",\"modal_footer_cancel_button\":\"Cancel\",\"modal_footer_primary_button\":\"Save\",\"month_short_april\":\"Apr\",\"month_short_august\":\"Aug\",\"month_short_december\":\"Dec\",\"month_short_february\":\"Feb\",\"month_short_january\":\"Jan\",\"month_short_july\":\"Jul\",\"month_short_june\":\"Jun\",\"month_short_march\":\"Mar\",\"month_short_may\":\"May\",\"month_short_november\":\"Nov\",\"month_short_october\":\"Oct\",\"month_short_september\":\"Sep\",\"page_noaccess_button\":\"Return to a non-classified page\",\"page_noaccess_description\":\"Sorry, you don't have rights to this page.\\nIf you feel you should, please contact your system administrator.\",\"page_noaccess_header\":\"Move along, there's nothing to see here\",\"text_expand_see_less\":\"See less\",\"text_expand_see_more\":\"See more\",\"text_expand_modal_title\":\"Expanded view\",\"text_expand_close_text\":\"Close\",\"grid_action_bar_clear_selection\":\"Clear selection\",\"grid_action_bar_cancel_mobile_actions\":\"Cancel\",\"grid_action_bar_choose_action\":\"Choose an action\",\"date_field_invalid_date_message\":\"Please enter a valid date\",\"date_range_picker_this_week\":\"This week\",\"date_range_picker_last_week\":\"Last week\",\"date_range_picker_next_week\":\"Next week\",\"date_range_picker_this_month\":\"This month\",\"date_range_picker_last_month\":\"Last month\",\"date_range_picker_next_month\":\"Next month\",\"date_range_picker_this_calendar_year\":\"This calendar year\",\"date_range_picker_last_calendar_year\":\"Last calendar year\",\"date_range_picker_next_calendar_year\":\"Next calendar year\",\"date_range_picker_this_fiscal_year\":\"This fiscal year\",\"date_range_picker_last_fiscal_year\":\"Last fiscal year\",\"date_range_picker_next_fiscal_year\":\"Next fiscal year\",\"date_range_picker_this_quarter\":\"This quarter\",\"date_range_picker_last_quarter\":\"Last quarter\",\"date_range_picker_next_quarter\":\"Next quarter\",\"date_range_picker_at_any_time\":\"At any time\",\"date_range_picker_today\":\"Today\",\"date_range_picker_tomorrow\":\"Tomorrow\",\"date_range_picker_yesterday\":\"Yesterday\",\"date_range_picker_specific_range\":\"Specific range\",\"date_range_picker_filter_description_this_week\":\"{0} for this week\",\"date_range_picker_filter_description_last_week\":\"{0} from last week\",\"date_range_picker_filter_description_next_week\":\"{0} for next week\",\"date_range_picker_filter_description_this_month\":\"{0} for this month\",\"date_range_picker_filter_description_last_month\":\"{0} from last month\",\"date_range_picker_filter_description_next_month\":\"{0} for next month\",\"date_range_picker_filter_description_this_calendar_year\":\"{0} for this calendar year\",\"date_range_picker_filter_description_last_calendar_year\":\"{0} from last calendar year\",\"date_range_picker_filter_description_next_calendar_year\":\"{0} for next calendar year\",\"date_range_picker_filter_description_this_fiscal_year\":\"{0} for this fiscal year\",\"date_range_picker_filter_description_last_fiscal_year\":\"{0} from last fiscal year\",\"date_range_picker_filter_description_next_fiscal_year\":\"{0} for next fiscal year\",\"date_range_picker_filter_description_this_quarter\":\"{0} for this quarter\",\"date_range_picker_filter_description_last_quarter\":\"{0} from last quarter\",\"date_range_picker_filter_description_next_quarter\":\"{0} for next quarter\",\"date_range_picker_filter_description_at_any_time\":\"{0} at any time\",\"date_range_picker_filter_description_today\":\"{0} for today\",\"date_range_picker_filter_description_yesterday\":\"{0} from yesterday\",\"date_range_picker_filter_description_tomorrow\":\"{0} for tomorrow\",\"date_range_picker_filter_description_specific_range\":\"{0} from {1} to {2}\",\"date_range_picker_from_date\":\"From date\",\"date_range_picker_to_date\":\"To date\",\"date_range_picker_min_date_error\":\"End date must be after start date\",\"date_range_picker_max_date_error\":\"Start date must be before end date\",\"errormodal_ok\":\"OK\",\"file_size_b_plural\":\"{0} bytes\",\"file_size_b_singular\":\"{0} byte\",\"file_size_kb\":\"{0} KB\",\"file_size_mb\":\"{0} MB\",\"file_size_gb\":\"{0} GB\",\"file_upload_drag_file_here\":\"Drag a file here\",\"file_upload_drop_files_here\":\"Drop files here\",\"file_upload_invalid_file\":\"This file type is invalid\",\"file_upload_link_placeholder\":\"http://www.something.com/file\",\"file_upload_or_click_to_browse\":\"or click to browse\",\"file_upload_paste_link\":\"Paste a link to a file\",\"file_upload_paste_link_done\":\"Done\",\"searchfield_searching\":\"Searching...\",\"searchfield_no_records\":\"Sorry, no matching records found\",\"wizard_navigator_finish\":\"Finish\",\"wizard_navigator_next\":\"Next\",\"wizard_navigator_previous\":\"Previous\",\"datepicker_today\":\"Today\",\"datepicker_clear\":\"Clear\",\"datepicker_close\":\"Done\"};\n\nangular.module('sky.resources')\n    .config(['bbResources', function (bbResources) {\n        angular.extend(bbResources, bbResourcesOverrides);\n    }]);\n}());\n","angular.module('sky.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('sky/templates/actionbar/actionbar.html',\n        '<div class=\"bb-action-bar\">\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/actionbar/actionbaritem.html',\n        '<button class=\"btn bb-btn-secondary bb-action-bar-item-button\" type=\"button\">\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/actionbar/actionbaritemgroup.html',\n        '<div class=\"bb-action-bar-group\">\\n' +\n        '    <div class=\"bb-action-bar-buttons hidden-xs\">\\n' +\n        '        <ng-transclude />\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-action-bar-dropdown hidden-sm hidden-md hidden-lg\">\\n' +\n        '        <div uib-dropdown>\\n' +\n        '             <button class=\"btn bb-btn-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\\n' +\n        '            {{bbActionBarItemGroup.title}}<span class=\"caret\"/>\\n' +\n        '            </button>\\n' +\n        '\\n' +\n        '            <ul uib-dropdown-menu>\\n' +\n        '\\n' +\n        '            </ul>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/alert/alert.html',\n        '<div class=\"alert\" ng-class=\"[\\'alert-\\' + (bbAlert.bbAlertType || \\'warning\\'), bbAlert.bbAlertCloseable === \\'true\\' ? \\'alert-dismissible\\' : null]\" ng-show=\"!bbAlert.bbAlertClosed\" role=\"alert\">\\n' +\n        '    <button ng-show=\"bbAlert.bbAlertCloseable === \\'true\\'\" type=\"button\" class=\"close\" ng-click=\"bbAlert.close({$event: $event})\">\\n' +\n        '        <span aria-hidden=\"true\">&times;</span>\\n' +\n        '        <span class=\"sr-only\">{{\\'alert_close\\' | bbResources}}</span>\\n' +\n        '    </button>\\n' +\n        '    <div ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/avatar/avatar.directive.html',\n        '<div class=\"bb-avatar\" ng-switch=\"bbAvatar.canChange\">\\n' +\n        '  <div ng-switch-when=\"true\">\\n' +\n        '    <div\\n' +\n        '       class=\"bb-avatar-file-drop\"\\n' +\n        '       bb-file-drop\\n' +\n        '       bb-file-drop-change=\"bbAvatar.photoDrop(files, rejectedFiles)\"\\n' +\n        '       bb-file-drop-accept=\"\\'image/*\\'\"\\n' +\n        '       >\\n' +\n        '      <ng-include src=\"\\'sky/templates/avatar/avatarinner.include.html\\'\" onload=\"bbAvatar.onTemplateLoad()\"></ng-include>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '  <div ng-switch-default>\\n' +\n        '    <ng-include src=\"\\'sky/templates/avatar/avatarinner.include.html\\'\" onload=\"bbAvatar.onTemplateLoad()\"></ng-include>\\n' +\n        '  </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/avatar/avatarinner.include.html',\n        '<div class=\"bb-avatar-wrapper\">\\n' +\n        '  <div class=\"bb-avatar-image\" ng-show=\"bbAvatar.bbAvatarSrc\"></div>\\n' +\n        '  <canvas class=\"bb-avatar-initials\" ng-show=\"bbAvatar.showInitials()\"></canvas>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/check/styled.html',\n        '<span role=\"input\"></span>\\n' +\n        '');\n    $templateCache.put('sky/templates/check/wrapper.html',\n        '<label class=\"bb-check-wrapper\"></label>\\n' +\n        '');\n    $templateCache.put('sky/templates/checklist/checklist.html',\n        '<div>\\n' +\n        '    <div>\\n' +\n        '        <div ng-if=\"bbChecklistIncludeSearch\" class=\"bb-checklist-filter-bar\">\\n' +\n        '            <div class=\"bb-checklist-search\">\\n' +\n        '                <input type=\"text\" class=\"bb-checklist-search-box\" maxlength=\"255\" placeholder=\"{{bbChecklistSearchPlaceholder}}\" ng-model=\"locals.searchText\" ng-model-options=\"{debounce: bbChecklistSearchDebounce}\" data-bbauto-field=\"ChecklistSearch\">\\n' +\n        '                <div class=\"bb-checklist-search-icon\">\\n' +\n        '                    <i class=\"fa fa-search\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div ng-if=\"bbChecklistCategories && bbChecklistCategories.length > 0\" class=\"bb-checklist-filter-bar bb-checklist-category-bar\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-sm\" ng-click=\"locals.filterByCategory()\" ng-class=\"locals.selectedCategory ? \\'btn-default\\' : \\'btn-primary\\'\">{{\\'grid_column_picker_all_categories\\' | bbResources}}</button>\\n' +\n        '            <button ng-repeat=\"category in bbChecklistCategories\" type=\"button\" class=\"btn btn-sm\" ng-click=\"locals.filterByCategory(category)\" ng-class=\"locals.selectedCategory === category ? \\'btn-primary\\' : \\'btn-default\\'\">{{category}}</button>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"bb-checklist-filter-bar bb-checklist-select-all-bar\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-link\" data-bbauto-field=\"ChecklistSelectAll\" ng-click=\"locals.selectAll()\">{{\\'checklist_select_all\\' | bbResources}}</button>\\n' +\n        '            <button type=\"button\" class=\"btn btn-link\" data-bbauto-field=\"ChecklistClear\" ng-click=\"locals.clear()\">{{\\'checklist_clear_all\\' | bbResources}}</button>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-checklist-wrapper\" ng-switch=\"bbChecklistMode\">\\n' +\n        '        <div ng-switch-when=\"list\" data-bbauto-repeater=\"ChecklistItems\" data-bbauto-repeater-count=\"{{locals.filteredItems.length}}\">\\n' +\n        '            <label class=\"bb-checklist-list-row\" ng-repeat=\"item in locals.filteredItems\" data-bbauto-field=\"{{item.name}}\">\\n' +\n        '                <div class=\"bb-checklist-list-col bb-checklist-list-col-checkbox\">\\n' +\n        '                    <input\\n' +\n        '                           bb-check\\n' +\n        '                           type=\"checkbox\"\\n' +\n        '                           checklist-model=\"bbChecklistSelectedItems\"\\n' +\n        '                           checklist-value=\"item\"\\n' +\n        '                           />\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-checklist-list-col\">\\n' +\n        '                    <div class=\"bb-checklist-list-title\" bb-highlight=\"locals.searchText\" ng-bind=\"item.title\"></div>\\n' +\n        '                    <div class=\"bb-checklist-list-description\" bb-highlight=\"locals.searchText\" ng-bind=\"item.description\"></div>\\n' +\n        '                </div>\\n' +\n        '            </label>\\n' +\n        '        </div>\\n' +\n        '        <table class=\"table bb-checklist-table\" ng-switch-default>\\n' +\n        '            <thead>\\n' +\n        '                <tr>\\n' +\n        '                    <th class=\"bb-checklist-checkbox-column\"></th>\\n' +\n        '                    <th ng-repeat=\"column in locals.columns\" class=\"{{column.class}}\" ng-style=\"{\\'width\\': column.width}\">{{column.caption}}</th>\\n' +\n        '                </tr>\\n' +\n        '            </thead>\\n' +\n        '            <tbody bb-highlight=\"locals.searchText\" bb-highlight-beacon=\"locals.highlightRefresh\" data-bbauto-repeater=\"ChecklistItems\" data-bbauto-repeater-count=\"{{locals.filteredItems.length}}\">\\n' +\n        '                <tr ng-repeat=\"item in locals.filteredItems\" ng-click=\"locals.rowClicked(item);\" class=\"bb-checklist-row\">\\n' +\n        '                    <td>\\n' +\n        '                        <input bb-check type=\"checkbox\" checklist-model=\"bbChecklistSelectedItems\" checklist-value=\"item\" data-bbauto-field=\"{{item[bbChecklistAutomationField]}}\" />\\n' +\n        '                    </td>\\n' +\n        '                    <td ng-repeat=\"column in locals.columns\" class=\"{{column.class}}\" data-bbauto-field=\"{{column.automationId}}\" data-bbauto-index=\"{{$parent.$index}}\">{{item[column.field]}}</td>\\n' +\n        '                </tr>\\n' +\n        '            </tbody>\\n' +\n        '        </table>\\n' +\n        '        <div class=\"bb-checklist-no-items\" ng-if=\"!locals.filteredItems.length\">{{bbChecklistNoItemsMessage || (\\'checklist_no_items\\' | bbResources)}}</div>\\n' +\n        '    </div>\\n' +\n        '    <div ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/contextmenu.html',\n        '<div class=\"bb-context-menu\" data-bbauto-field=\"ContextMenuActions\" uib-dropdown>\\n' +\n        '    <bb-context-menu-button data-bbauto-field=\"ContextMenuAnchor\" ng-click=\"contextButtonStopPropagation($event)\" uib-dropdown-toggle></bb-context-menu-button>\\n' +\n        '    <ul uib-dropdown-menu role=\"menu\">\\n' +\n        '        <ng-transclude/>\\n' +\n        '    </ul>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/menubutton.html',\n        '<button type=\"button\" class=\"btn bb-btn-secondary bb-context-menu-btn\"><i class=\"fa fa-ellipsis-h\"></i></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/menuitem.html',\n        '<li role=\"presentation\"><a role=\"menuitem\" href=\"javascript:void(0)\" ng-click=\"clickItem()\"><ng-transclude/></a></li>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/submenu.html',\n        '<div class=\"bb-submenu\">\\n' +\n        '    <uib-accordion>\\n' +\n        '        <uib-accordion-group is-open=\"accordionLocals.accordionOpen\">\\n' +\n        '\\n' +\n        '            <uib-accordion-heading ng-if=\"accordionLocals.staticHeader\">\\n' +\n        '                <div ng-click=\"toggleAccordion($event)\">\\n' +\n        '                    <span>\\n' +\n        '                        {{heading}}\\n' +\n        '                    <span>\\n' +\n        '                    <i ng-class=\"\\'fa-chevron-\\' + (accordionLocals.accordionOpen ? \\'up\\' : \\'down\\')\" class=\"fa bb-submenu-chevron\"></i>\\n' +\n        '                </div>\\n' +\n        '            </uib-accordion-heading>\\n' +\n        '            <ng-transclude></ng-transclude>\\n' +\n        '        </uib-accordion-group>\\n' +\n        '    </uib-accordion>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/contextmenu/submenuheading.html',\n        '<uib-accordion-heading>\\n' +\n        '    <div ng-click=\"toggleAccordion($event)\">\\n' +\n        '        <ng-transclude></ng-transclude>\\n' +\n        '        <i ng-class=\"\\'fa-chevron-\\' + (accordionLocals.accordionOpen ? \\'up\\' : \\'down\\')\" class=\"fa bb-submenu-chevron\"></i>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '</uib-accordion-heading>\\n' +\n        '');\n    $templateCache.put('sky/templates/datefield/datefield.html',\n        '<span class=\"add-on input-group-btn\">\\n' +\n        '    <button type=\"button\" class=\"btn btn-default bb-date-field-calendar-button\">\\n' +\n        '        <i class=\"fa fa-calendar\"></i>\\n' +\n        '    </button>\\n' +\n        '</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/datepicker/datepicker.html',\n        '<div>\\n' +\n        '    <div ng-if=\"locals.loaded\" class=\"input-group bb-datefield\">\\n' +\n        '        <input name=\"{{locals.inputName}}\" type=\"text\" class=\"form-control\" ng-model=\"locals.date\" is-open=\"locals.opened\" datepicker-options=\"locals.dateOptions\" uib-datepicker-popup=\"{{format}}\" show-button-bar=\"locals.showButtonBar\" current-text=\"{{resources.datepicker_today}}\" clear-text=\"{{resources.datepicker_clear}}\" close-text=\"{{resources.datepicker_close}}\" datepicker-append-to-body=\"{{locals.appendToBody}}\" close-on-date-selection=\"{{locals.closeOnSelection}}\" bb-datepicker-custom-validate=\"{{locals.hasCustomValidation}}\" placeholder=\"{{placeholderText}}\" max-date=\"maxDate\" min-date=\"minDate\" ng-required=\"locals.required\" bb-min-date bb-max-date />\\n' +\n        '        <span class=\"bb-datepicker-button-container add-on input-group-btn\" ng-class=\"{\\'bb-datefield-open\\': locals.opened}\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-default bb-date-field-calendar-button\" ng-click=\"locals.open($event)\">\\n' +\n        '                <i class=\"fa fa-calendar\"></i>\\n' +\n        '            </button>\\n' +\n        '        </span>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/daterangepicker/daterangepicker.html',\n        '<div class=\"form-inline\" ng-form=\"bbDateRangePickerCtrl.dateRangeForm\">\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"bbDateRangePickerCtrl.pickerLabel && !bbDateRangePickerCtrl.noLabels\">{{bbDateRangePickerCtrl.pickerLabel}}</label>\\n' +\n        '      <select data-bbauto-field=\"{{bbDateRangePickerCtrl.bbDateRangePickerAutomationId}}_DateRangeType\"\\n' +\n        '        class=\"form-control\"\\n' +\n        '        ng-options=\"bbDateRangePickerCtrl.getDateRangeTypeCaption(t) for t in (bbDateRangePickerCtrl.bbDateRangePickerOptions.availableDateRangeTypes || bbDateRangePickerCtrl.defaultDateRangeOptions)\"\\n' +\n        '        ng-model=\"bbDateRangePickerCtrl.bbDateRangePickerValue.dateRangeType\" />\\n' +\n        '    </div>\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\" ng-if=\"bbDateRangePickerCtrl.specificRangeIsVisible\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"!bbDateRangePickerCtrl.noLabels\">{{::bbDateRangePickerCtrl.resources.date_range_picker_from_date}}</label>\\n' +\n        '      <bb-datepicker ng-model=\"bbDateRangePickerCtrl.fromDate\" max-date=\"bbDateRangePickerCtrl.maxDate\" bb-datepicker-name=\"fromDate\" datepicker-append-to-body=\"true\" placeholder=\"bbDateRangePickerCtrl.fromPlaceholder\"></bb-datepicker>\\n' +\n        '      <label class=\"bb-date-range-picker-date-format-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.fromDate.$error.dateFormat\">{{::bbDateRangePickerCtrl.resources.date_field_invalid_date_message}}</label>\\n' +\n        '      <label class=\"bb-date-range-picker-date-max-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.fromDate.$error.maxDate\">{{::bbDateRangePickerCtrl.resources.date_range_picker_max_date_error}}</label>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"form-group bb-date-range-picker-form-group\" ng-if=\"bbDateRangePickerCtrl.specificRangeIsVisible\">\\n' +\n        '      <label class=\"bb-date-range-picker-label\" ng-if=\"!bbDateRangePickerCtrl.noLabels\">{{::bbDateRangePickerCtrl.resources.date_range_picker_to_date}}</label>\\n' +\n        '      <bb-datepicker ng-model=\"bbDateRangePickerCtrl.toDate\" min-date=\"bbDateRangePickerCtrl.minDate\" bb-datepicker-name=\"toDate\" datepicker-append-to-body=\"true\" placeholder=\"bbDateRangePickerCtrl.toPlaceholder\"></bb-datepicker>\\n' +\n        '      <label class=\"bb-date-range-picker-date-format-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.toDate.$error.dateFormat\">{{::bbDateRangePickerCtrl.resources.date_field_invalid_date_message}}</label>\\n' +\n        '      <label class=\"bb-date-range-picker-date-min-error error\" ng-show=\"bbDateRangePickerCtrl.dateRangeForm.toDate.$error.minDate\">{{::bbDateRangePickerCtrl.resources.date_range_picker_min_date_error}}</label>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/error/error.directive.html',\n        '<div class=\"row\">\\n' +\n        '  <section class=\"col-xs-12 text-center\">\\n' +\n        '    <div class=\"bb-error-image\" ng-show=\"bbError.imageCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-title\" ng-show=\"bbError.titleCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-description\" ng-show=\"bbError.descriptionCtrl\"></div>\\n' +\n        '    <div class=\"bb-error-action\" ng-show=\"bbError.actionCtrl\"></div>\\n' +\n        '    <ng-transclude></ng-transclude>\\n' +\n        '  </section>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/error/errormodal.template.html',\n        '<bb-modal>\\n' +\n        '  <div class=\"modal-form\">\\n' +\n        '    <div bb-modal-body>\\n' +\n        '      <bb-error>\\n' +\n        '        <bb-error-title>\\n' +\n        '          {{bbErrorModal.options.errorTitle}}\\n' +\n        '        </bb-error-title>\\n' +\n        '        <bb-error-description>\\n' +\n        '          {{bbErrorModal.options.errorDescription}}\\n' +\n        '        </bb-error-description>\\n' +\n        '        <bb-error-action>\\n' +\n        '          <button type=\"button\" class=\"btn btn-primary\" ng-click=\"bbErrorModal.close()\">{{\\'errormodal_ok\\' | bbResources}}</button>\\n' +\n        '        </bb-error-action>\\n' +\n        '      </bb-error>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '</bb-modal>\\n' +\n        '');\n    $templateCache.put('sky/templates/fileattachments/filedrop.html',\n        '<div class=\"row bb-file-drop-row\">\\n' +\n        '    <div class=\"col-xs-12 bb-file-drop-col\" ng-class=\"{\\'col-sm-6\\': bbFileDrop.allowLinks}\">\\n' +\n        '        <div\\n' +\n        '             class=\"bb-file-drop bb-file-drop-target\"\\n' +\n        '             ngf-drop\\n' +\n        '             ngf-keep=\"false\"\\n' +\n        '             ngf-drag-over-class=\"{accept: \\'bb-file-drop-accept\\', reject: \\'bb-file-drop-reject\\'}\"\\n' +\n        '             ngf-change=\"bbFileDrop.fileChange($files, $event, $rejectedFiles)\"\\n' +\n        '             >\\n' +\n        '            <div class=\"bb-file-drop-contents\" ng-if=\"!bbFileDrop.hasTranscludeContents\">\\n' +\n        '                <div class=\"bb-file-drop-contents-not-over\">\\n' +\n        '                    <h4>{{\\'file_upload_drag_file_here\\' | bbResources}}</h4>\\n' +\n        '                    <h5>{{\\'file_upload_or_click_to_browse\\' | bbResources}}</h5>\\n' +\n        '                    <i class=\"fa fa-cloud-upload bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-file-drop-contents-accept\">\\n' +\n        '                    <h4>{{\\'file_upload_drop_files_here\\' | bbResources}}</h4>\\n' +\n        '                    <i class=\"fa fa-bullseye bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-file-drop-contents-reject\">\\n' +\n        '                    <h4>{{\\'file_upload_invalid_file\\' | bbResources}}</h4>\\n' +\n        '                    <i class=\"fa fa-times-circle bb-file-upload-icon\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-file-drop-contents-custom\" ng-transclude></div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"col-sm-6 col-xs-12 bb-file-drop-col\" ng-if=\"bbFileDrop.allowLinks\">\\n' +\n        '        <div class=\"bb-file-drop-contents\">\\n' +\n        '            <div class=\"bb-file-drop-link\">\\n' +\n        '                <h4 class=\"bb-file-drop-link-header\">{{\\'file_upload_paste_link\\' | bbResources}}</h4>\\n' +\n        '                <div class=\"form-group\">\\n' +\n        '                    <input\\n' +\n        '                           type=\"text\"\\n' +\n        '                           class=\"form-control\"\\n' +\n        '                           placeholder=\"{{\\'file_upload_link_placeholder\\' | bbResources}}\"\\n' +\n        '                           ng-model=\"bbFileDrop.url\"\\n' +\n        '                           ng-keypress=\"$event.keyCode === 13 && bbFileDrop.addLink($event)\"\\n' +\n        '                           />\\n' +\n        '                </div>\\n' +\n        '                <button type=\"button\" class=\"btn btn-primary\" ng-disabled=\"!bbFileDrop.url\" ng-click=\"bbFileDrop.addLink($event)\">\\n' +\n        '                    {{\\'file_upload_paste_link_done\\' | bbResources}}\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/fileattachments/fileitem.html',\n        '<div class=\"bb-file-item\">\\n' +\n        '    <div class=\"row bb-file-item-title\">\\n' +\n        '        <div class=\"col-xs-10\">\\n' +\n        '            <div class=\"bb-file-item-name\">\\n' +\n        '                <strong>{{item.name || item.url}}</strong>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-file-item-size\" ng-if=\"bbFileItem.isFile()\">\\n' +\n        '                ({{item.size | bbFileSize}})\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"col-xs-2\">\\n' +\n        '            <div class=\"pull-right\">\\n' +\n        '                <button type=\"button\" class=\"btn bb-btn-secondary bb-file-item-btn-delete\" ng-click=\"itemDelete()\">\\n' +\n        '                    <i class=\"glyphicon glyphicon-trash\"></i>\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"row\">\\n' +\n        '        <div ng-switch=\"bbFileItem.isImg()\" class=\"col-xs-3\">\\n' +\n        '            <div ng-switch-when=\"true\" class=\"center-block\">\\n' +\n        '              <img ng-if=\"item.url\" class=\"bb-file-item-preview-img\" ng-src=\"{{item.url}}\" />\\n' +\n        '              <img ng-if=\"!item.url\" class=\"bb-file-item-preview-img\" ngf-src=\"item\" />\\n' +\n        '            </div>\\n' +\n        '            <div ng-switch-when=\"false\" class=\"bb-file-item-preview-other\">\\n' +\n        '                <i class=\"fa\" ng-class=\"bbFileItem.otherCls\"></i>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"col-xs-9\" ng-transclude>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/actionbar.html',\n        '<div ng-show=\"locals.showActionBar\" data-bbauto-view=\"GridActionBar\">\\n' +\n        '    <div ng-if=\"!locals.showMobileActions\" class=\"bb-grid-action-bar\">\\n' +\n        '        <div ng-if=\"!locals.mobileButtons\" class=\"bb-grid-action-bar-buttons\" ng-repeat=\"action in locals.actions\">\\n' +\n        '            <button type=\"button\" class=\"btn\" ng-class=\"{\\'btn-primary\\': action.isPrimary, \\'bb-btn-secondary\\': !action.isPrimary}\" data-bbauto-field=\"{{action.automationId}}\" ng-click=\"action.actionCallback()\" ng-disabled=\"action.selections.length < 1\">{{action.title}} ({{action.selections.length}})</button>\\n' +\n        '        </div>\\n' +\n        '        <div ng-if=\"locals.mobileButtons\" class=\"bb-grid-action-bar-buttons\">\\n' +\n        '            <button type=\"button\" class=\"btn btn-primary\" ng-click=\"locals.chooseAction()\">\\n' +\n        '                <span>{{resources.grid_action_bar_choose_action}}</span>\\n' +\n        '            </button>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-grid-action-bar-clear-selection\" ng-click=\"locals.clearSelection()\">\\n' +\n        '            {{resources.grid_action_bar_clear_selection}}\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '    <div ng-if=\"locals.showMobileActions\" class=\"bb-grid-action-bar-mobile-buttons\">\\n' +\n        '        <div class=\"bb-grid-action-bar-btn-container\">\\n' +\n        '            <div ng-repeat=\"action in locals.actions\">\\n' +\n        '                <button type=\"button\" class=\"bb-grid-action-bar-mobile-btn btn btn-block btn-lg\" ng-class=\"{\\'btn-primary\\': action.isPrimary, \\'bb-btn-secondary\\': !action.isPrimary}\" ng-click=\"action.actionCallback()\" ng-disabled=\"action.selections.length < 1\">{{action.title}} ({{action.selections.length}})</button>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-grid-action-bar-mobile-cancel bb-grid-action-bar-clear-selection\" ng-click=\"locals.cancelChooseAction()\">\\n' +\n        '            {{resources.grid_action_bar_cancel_mobile_actions}}\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/columnpicker.html',\n        '<bb-modal data-bbauto-view=\"ColumnPicker\">\\n' +\n        '  <bb-modal-header bb-modal-help-key=\"$parent.columnPickerHelpKey\">{{\\'grid_column_picker_header\\' | bbResources}}</bb-modal-header>\\n' +\n        '  <div bb-modal-body>\\n' +\n        '    <bb-checklist\\n' +\n        '                  bb-checklist-items=\"columns\" \\n' +\n        '                  bb-checklist-selected-items=\"locals.selectedColumns\" \\n' +\n        '                  bb-checklist-include-search=\"\\'true\\'\" \\n' +\n        '                  bb-checklist-search-placeholder=\"{{\\'grid_column_picker_search_placeholder\\' | bbResources}}\" \\n' +\n        '                  bb-checklist-no-items-message=\"{{\\'grid_column_picker_search_no_columns\\' | bbResources}}\"\\n' +\n        '                  bb-checklist-categories=\"categories\" \\n' +\n        '                  bb-checklist-mode=\"list\" \\n' +\n        '                  bb-checklist-filter-local\\n' +\n        '                  >\\n' +\n        '    </bb-checklist>\\n' +\n        '  </div>\\n' +\n        '  <bb-modal-footer>\\n' +\n        '    <bb-modal-footer-button-primary data-bbauto-field=\"ColumnPickerSubmit\" ng-click=\"applyChanges()\">{{\\'grid_column_picker_submit\\' | bbResources}}</bb-modal-footer-button-primary>\\n' +\n        '    <bb-modal-footer-button-cancel data-bbauto-field=\"ColumnPickerCancel\"></bb-modal-footer-button-cancel>\\n' +\n        '  </bb-modal-footer>\\n' +\n        '</bb-modal>');\n    $templateCache.put('sky/templates/grids/dropdown.html',\n        '<div class=\"bb-context-menu\" data-bbauto-field=\"ContextMenuActions\" uib-dropdown dropdown-append-to-body ng-if=\"locals.items.length > 0\" is-open=\"locals.is_open\">\\n' +\n        '    <bb-context-menu-button data-bbauto-field=\"ContextMenuAnchor\" ng-click=\"locals.toggleDropdown($event)\">\\n' +\n        '    </bb-context-menu-button>\\n' +\n        '    <ul uib-dropdown-menu role=\"menu\">\\n' +\n        '        <bb-context-menu-item ng-repeat=\"item in locals.items\" bb-context-menu-action=\"item.cmd()\">{{item.title}}</bb-context-menu-item>\\n' +\n        '    </ul>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filters.html',\n        '<div style=\"display:none;\">\\n' +\n        '    <div bb-scrolling-view-keeper=\"viewKeeperOptions\" class=\"bb-grid-filters grid-filters\">\\n' +\n        '        <div class=\"bb-grid-filters-box\" bb-scroll-into-view=\"locals.expanded\">\\n' +\n        '            <div class=\"bb-grid-filters-icon\" ng-click=\"locals.expanded = !locals.expanded\"></div>\\n' +\n        '            <div class=\"bb-grid-filters-container\" style=\"display:none;\">\\n' +\n        '                <div class=\"bb-grid-filters-header\" ng-click=\"locals.expanded = !locals.expanded\">\\n' +\n        '                    <h4 class=\"bb-grid-filters-header-title\">{{resources.grid_filters_header}}</h4>\\n' +\n        '                    <span class=\"bb-grid-filters-header-hide\">{{resources.grid_filters_hide}}</span>\\n' +\n        '                </div>\\n' +\n        '                <div class=\"bb-grid-filters-body\" ng-transclude></div>\\n' +\n        '                <div class=\"bb-grid-filters-footer\">\\n' +\n        '                    <button data-bbauto-field=\"ApplyGridFilters\" class=\"btn btn-primary\" type=\"submit\" ng-click=\"applyFilters()\">{{resources.grid_filters_apply}}</button>\\n' +\n        '                    <button data-bbauto-field=\"ClearGridFilters\" class=\"btn bb-btn-secondary\" type=\"button\" ng-click=\"clearFilters()\">{{resources.grid_filters_clear}}</button>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filtersgroup.html',\n        '<div class=\"form-group\" ng-class=\"isCollapsed ? \\'collapsed\\' : \\'collapsible\\'\">\\n' +\n        '    <div ng-click=\"isCollapsed = !isCollapsed\">\\n' +\n        '        <i ng-class=\"\\'glyphicon-chevron-\\' + (isCollapsed ? \\'down\\' : \\'up\\')\" class=\"bb-grid-filters-body-group-header-icon glyphicon\"></i>\\n' +\n        '        <label>{{bbGridFiltersGroupLabel}}</label>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filters-body-group-content\" uib-collapse=\"!!isCollapsed\" ng-transclude></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/filterssummary.html',\n        '<div class=\"toolbar bb-table-toolbar bb-applied-filter-bar\">\\n' +\n        '    <div class=\"bb-applied-filter-header\">\\n' +\n        '        <span>{{resources.grid_filters_summary_header}}</span>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-applied-filter-content\" ng-click=\"openFilterMenu()\">\\n' +\n        '        <span class=\"bb-applied-filter-text\" data-bbauto-field=\"FilterSummaryText\" ng-transclude></span>\\n' +\n        '        <span class=\"fa fa-times close\" data-bbauto-field=\"FilterSummaryRemove\" ng-click=\"clearFilters(); $event.stopPropagation();\"></span>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/grid.html',\n        '<section class=\"bb-grid-container\" data-bbauto-grid=\"{{options.automationId}}\" data-bbauto-timestamp=\"{{locals.timestamp}}\" data-bbauto-repeater=\"{{options.automationId}}\" data-bbauto-repeater-count=\"{{locals.rowcount}}\">\\n' +\n        '\\n' +\n        '\\n' +\n        '    <div class=\"bb-grid-toolbar-viewkeeper\">\\n' +\n        '        <div ng-if=\"!customToolbar.hasCustomToolbar\">\\n' +\n        '            <div ng-show=\"locals.showToolbar\">\\n' +\n        '                <bb-grid-toolbar>\\n' +\n        '                    <ng-transclude></ng-transclude>\\n' +\n        '                </bb-grid-toolbar>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '\\n' +\n        '        <div ng-if=\"customToolbar.hasCustomToolbar\">\\n' +\n        '            <div ng-show=\"locals.showToolbar\">\\n' +\n        '                <ng-transclude></ng-transclude>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div class=\"clearfix\"></div>\\n' +\n        '\\n' +\n        '    <div class=\"table-responsive\" bb-wait=\"options.loading\">\\n' +\n        '        <table id=\"{{locals.gridId}}\" class=\"bb-grid-table\" ng-class=\"{\\'grid-multiselect\\' : locals.multiselect}\"></table>\\n' +\n        '        <div class=\"bb-grid-empty-wait\" ng-if=\"locals.hasWaitAndEmpty()\" bb-wait=\"locals.hasWaitAndEmpty()\"></div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div ng-if=\"!paginationOptions\" class=\"bb-table-loadmore\" data-bbauto-field=\"LoadMoreButton\" ng-show=\"options.hasMoreRows\" ng-click=\"locals.loadMore()\">\\n' +\n        '        <span class=\"fa fa-cloud-download\"></span>\\n' +\n        '        <button type=\"button\" class=\"btn btn-link\">{{resources.grid_load_more}}</button>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div ng-if=\"paginationOptions\" class=\"bb-grid-pagination-container\">\\n' +\n        '        <uib-pagination ng-show=\"paginationOptions.recordCount > options.data.length\" total-items=\"paginationOptions.recordCount\" items-per-page=\"paginationOptions.itemsPerPage\" ng-model=\"locals.currentPage\" ng-change=\"paginationOptions.pageChanged()\" max-size=\"paginationOptions.maxPages\"></uib-pagination>\\n' +\n        '        <div class=\"clearfix\"></div>\\n' +\n        '    </div>\\n' +\n        '\\n' +\n        '    <div class=\"bb-grid-action-bar-and-back-to-top\">\\n' +\n        '        <bb-grid-action-bar ng-if=\"locals.multiselect && multiselectActions && updateMultiselectActions\" bb-multiselect-actions=\"multiselectActions\" bb-selections-updated=\"updateMultiselectActions(selections)\">\\n' +\n        '        </bb-grid-action-bar>\\n' +\n        '        <div class=\"bb-table-backtotop\" data-bbauto-field=\"BackToTopButton\" ng-show=\"locals.isScrolled\" ng-click=\"locals.backToTop();\">\\n' +\n        '            <span style=\"float:left\">\\n' +\n        '                <span class=\"fa fa-arrow-up \"></span>\\n' +\n        '                <button type=\"button\" class=\"btn btn-link\">{{resources.grid_back_to_top}}</button>\\n' +\n        '            </span>\\n' +\n        '            <span style=\"float:right\">\\n' +\n        '                <span class=\"fa fa-arrow-up \"></span>\\n' +\n        '                <button type=\"button\" class=\"btn btn-link\">{{resources.grid_back_to_top}}</button>\\n' +\n        '            </span>\\n' +\n        '            <div class=\"clearfix\"></div>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/gridtoolbar.html',\n        '<div class=\"bb-grid-toolbar-container\">\\n' +\n        '    <div class=\"clearfix toolbar bb-table-toolbar\">\\n' +\n        '        <button type=\"button\" data-bbauto-field=\"AddButton\" class=\"bb-grid-toolbar-btn btn-success btn\" ng-show=\"toolbarLocals.hasAdd\" ng-click=\"options.onAddClick()\">\\n' +\n        '            <i class=\"fa fa-plus-circle\"></i>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\" ng-show=\"options.onAddClickLabel\">{{options.onAddClickLabel}}</span>\\n' +\n        '        </button>\\n' +\n        '        <div class=\"bb-grid-toolbar-button-container\">\\n' +\n        '            <ng-transclude></ng-transclude>\\n' +\n        '        </div>\\n' +\n        '        <div class=\"bb-search-container search-container\">\\n' +\n        '            <input type=\"text\" placeholder=\"{{resources.grid_search_placeholder}}\" ng-model=\"searchText\" ng-keyup=\"$event.keyCode == 13 && toolbarLocals.applySearchText()\" data-bbauto-field=\"SearchBox\" />\\n' +\n        '            <div class=\"bb-search-icon fa fa-search\" data-bbauto-field=\"SearchButton\" ng-click=\"toolbarLocals.applySearchText()\"></div>\\n' +\n        '        </div>\\n' +\n        '        <button type=\"button\" class=\"btn bb-btn-secondary bb-grid-toolbar-btn bb-column-picker-btn\" data-bbauto-field=\"ColumnPickerButton\" ng-show=\"!options.hideColPicker\" ng-click=\"toolbarLocals.openColumnPicker()\">\\n' +\n        '            <span class=\"fa fa-columns\"></span>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\">{{resources.grid_columns_button}}</span>\\n' +\n        '        </button>\\n' +\n        '        <button type=\"button\" class=\"btn bb-btn-secondary bb-grid-toolbar-btn bb-filter-btn\" ng-class=\"{\\'bb-filters-inline-active\\': options.filtersAreActive}\" data-bbauto-field=\"FilterButton\" ng-show=\"!options.hideFilters\" ng-click=\"toolbarLocals.toggleFilterMenu()\">\\n' +\n        '            <span class=\"fa fa-filter\"></span>\\n' +\n        '            <span class=\"bb-toolbar-btn-label\">{{resources.grid_filters_button}}</span>\\n' +\n        '        </button>\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filter-summary-container\">\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-filter-inline-container\" ng-hide=\"options.hasInlineFilters && !toolbarLocals.filtersVisible\">\\n' +\n        '    </div>\\n' +\n        '    <div class=\"bb-grid-top-scrollbar\">\\n' +\n        '        <div></div>\\n' +\n        '    </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/grids/seemore.html',\n        '<div bb-text-expand=\"data\" bb-text-expand-max-length=\"100\" style=\"white-space: pre-wrap\"></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modal.html',\n        '<div class=\"bb-modal-content-wrapper\" ng-transclude></div>');\n    $templateCache.put('sky/templates/modal/modalfooter.html',\n        '<div class=\"modal-footer\" ng-transclude></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modalfooterbutton.html',\n        '<button class=\"btn bb-btn-secondary\" type=\"button\" ng-transclude></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/modal/modalfooterbuttoncancel.html',\n        '<button class=\"btn btn-link\" type=\"button\" ng-click=\"$parent.$parent.$dismiss(\\'cancel\\');\" ng-transclude></button>');\n    $templateCache.put('sky/templates/modal/modalfooterbuttonprimary.html',\n        '<button class=\"btn btn-primary\" type=\"submit\" ng-transclude></button>');\n    $templateCache.put('sky/templates/modal/modalheader.html',\n        '<div class=\"modal-header\">\\n' +\n        '    <h1 class=\"bb-dialog-header\" ng-transclude></h1>\\n' +\n        '    <div class=\"fa fa-times close\" ng-click=\"$parent.$parent.$dismiss(\\'close\\');\"></div>\\n' +\n        '    <div bb-help-button bb-help-key=\"{{bbModalHelpKey}}\" bb-set-help-key-override=\"true\" data-bbauto-field=\"ModalHelpButton\" ng-if=\"bbModalHelpKey\"></div>\\n' +\n        '    <div class=\"clearfix\"></div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/navbar/navbar.html',\n        '<nav class=\"navbar navbar-default bb-navbar\" ng-transclude></nav>');\n    $templateCache.put('sky/templates/page/page.html',\n        '<section ng-if=\"locals.noPageStatusSpecified() || bbPageStatus === locals.pageStatuses.LOADED\">\\n' +\n        '    <div ng-transclude ng-init=\"locals.onShowing()\"></div>\\n' +\n        '</section>\\n' +\n        '<section class=\"container-fluid bb-page-content-column-container\" ng-show=\"bbPageStatus === locals.pageStatuses.NOT_AUTHORIZED\">\\n' +\n        '    <div class=\"row\">\\n' +\n        '        <section class=\"bb-page-content-column col-xs-12 text-center\">\\n' +\n        '            <div class=\"m\">\\n' +\n        '                <h3>\\n' +\n        '                    {{resources.page_noaccess_header}}\\n' +\n        '                </h3>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-page-noaccess-description\">{{resources.page_noaccess_description}}</div>\\n' +\n        '            <div class=\"m-lg\">\\n' +\n        '                <button type=\"button\" class=\"btn btn-lg btn-primary\" ng-click=\"locals.navigateAway()\" data-bbauto-field=\"NavigateAwayButton\">\\n' +\n        '                    {{resources.page_noaccess_button}}\\n' +\n        '                </button>\\n' +\n        '            </div>\\n' +\n        '        </section>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/pagesummary/pagesummary.directive.html',\n        '<div class=\"bb-page-header\">\\n' +\n        '  <div class=\"container-fluid\">\\n' +\n        '    <div class=\"bb-page-summary-alert\"></div>\\n' +\n        '    <div class=\"row\">\\n' +\n        '      <div class=\"bb-page-summary-left col-xs-12\" ng-class=\"bbPageSummary.getPageSummaryLeftCls()\">\\n' +\n        '        <div class=\"bb-page-summary-image\" ng-show=\"bbPageSummary.imageCtrl\"></div>\\n' +\n        '        <div>\\n' +\n        '          <h1 class=\"bb-page-summary-title\" ng-show=\"bbPageSummary.titleCtrl\"></h1>\\n' +\n        '          <h2 class=\"bb-page-summary-subtitle\" ng-show=\"bbPageSummary.subtitleCtrl\"></h2>\\n' +\n        '          <div class=\"bb-page-summary-status\" ng-show=\"bbPageSummary.statusCtrl\"></div>\\n' +\n        '          <div class=\"bb-page-summary-key-info-xs\"></div>\\n' +\n        '          <div class=\"bb-page-summary-content\"></div>\\n' +\n        '        </div>\\n' +\n        '      </div>\\n' +\n        '      <div class=\"bb-page-summary-key-info-sm col-sm-3 hidden-xs\" ng-class=\"bbPageSummary.getKeyInfoCls()\">\\n' +\n        '        <div class=\"bb-page-summary-key-info\"></div>\\n' +\n        '      </div>\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '  <ng-transclude></ng-transclude>\\n' +\n        '</div>\\n' +\n        '<div class=\"bb-page-summary-action-bar\"></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/popover/popup.html',\n        '<div class=\"popover {{placement}}\"\\n' +\n        '    tooltip-animation-class=\"fade\"\\n' +\n        '    uib-tooltip-classes\\n' +\n        '    ng-class=\"{ in: isOpen() }\">\\n' +\n        '  <div class=\"arrow\"></div>\\n' +\n        '\\n' +\n        '  <div class=\"popover-inner\">\\n' +\n        '    <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\\n' +\n        '    <div class=\"popover-content\"\\n' +\n        '        uib-tooltip-template-transclude=\"contentExp()\"\\n' +\n        '        tooltip-template-transclude-scope=\"originScope()\"></div>\\n' +\n        '  </div>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/searchfield/choices.html',\n        '<ul class=\"ui-select-choices ui-select-choices-content dropdown-menu\">\\n' +\n        '  <li class=\"bb-searchfield-no-records\"></li>\\n' +\n        '</ul>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabs/tab.html',\n        '<div ng-hide=\"!tabsInitialized\" data-bbauto-field=\"{{bbTabAutomationId}}\" class=\"responsiveTabControl\">\\n' +\n        '    <ul ng-transclude>\\n' +\n        '\\n' +\n        '    </ul>\\n' +\n        '</div>');\n    $templateCache.put('sky/templates/tabset/addbutton.html',\n        '<button ng-click=\"bbTabAdd()\" type=\"button\" class=\"bb-tab-button-wrap btn bb-tab-button-add bb-btn-secondary\">\\n' +\n        '  <span class=\"btn bb-btn-secondary\"><i class=\"fa fa-lg fa-plus-circle\"></i></span>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/dropdown.html',\n        '<div class=\"bb-tabset-dropdown nav nav-tabs\" uib-dropdown ng-show=\"bbTabsetOptions.isSmallScreen &amp;&amp; bbTabsetOptions.tabCount > 1\">\\n' +\n        '  <button type=\"button\" class=\"btn btn-primary bb-tab-dropdown-button\" uib-dropdown-toggle><div class=\"bb-tab-header-text\">{{bbTabsetOptions.selectedTabHeader}}</div><i class=\"fa fa-caret-down\"></i></button>\\n' +\n        '</div>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/openbutton.html',\n        '<button ng-click=\"bbTabOpen()\" type=\"button\" class=\"bb-tab-button-wrap bb-tab-button-open btn bb-btn-secondary\">\\n' +\n        '  <span class=\"btn bb-btn-secondary\"><i class=\"fa fa-lg fa-folder-open-o\"></i></span>\\n' +\n        '</button>\\n' +\n        '');\n    $templateCache.put('sky/templates/tabset/tabbutton.html',\n        '<li class=\"bb-tab-button\"></li>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/container.html',\n        '<div></div>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/ellipsis.html',\n        '<span class=\"bb-text-expand-ellipsis\">...</span>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/expandmodal.html',\n        '<bb-modal>\\n' +\n        '  <bb-modal-header>\\n' +\n        '    {{expandCtrl.headerContent}}\\n' +\n        '  </bb-modal-header>\\n' +\n        '  <div class=\"modal-form\">\\n' +\n        '    <div bb-modal-body>\\n' +\n        '      <div>\\n' +\n        '        <span class=\"bb-text-expand-text\">{{expandCtrl.textExpandContent}}</span>\\n' +\n        '      </div>\\n' +\n        '    </div>\\n' +\n        '    <bb-modal-footer>\\n' +\n        '      <bb-modal-footer-button-cancel>{{::expandCtrl.closeText}}</bb-modal-footer-button-cancel>\\n' +\n        '    </bb-modal-footer>\\n' +\n        '  </div>\\n' +\n        '</bb-modal>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/seemore.html',\n        '<button type=\"button\" class=\"btn bb-btn-link-inline bb-text-expand-see-more\"></button>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/space.html',\n        '<span class=\"bb-text-expand-space\"> </span>\\n' +\n        '');\n    $templateCache.put('sky/templates/textexpand/text.html',\n        '<span class=\"bb-text-expand-text\"></span>\\n' +\n        '');\n    $templateCache.put('sky/templates/tiles/tile.html',\n        '<section ng-class=\"isCollapsed ? \\'collapsed\\' : \\'collapsible\\'\" class=\"bb-tile\">\\n' +\n        '    <div bb-scroll-into-view=\"scrollIntoView\">\\n' +\n        '        <div class=\"bb-tile-title\" ng-click=\"titleClick()\">\\n' +\n        '            <div class=\"bb-tile-header-with-content\">\\n' +\n        '                <h2 class=\"bb-tile-header\">{{tileHeader}}</h2>\\n' +\n        '            </div>\\n' +\n        '            <div class=\"bb-tile-header-column-tools\">\\n' +\n        '                <div class=\"bb-tile-tools\">\\n' +\n        '                    <button type=\"button\" ng-class=\"\\'fa-chevron-\\' + (isCollapsed ? \\'down\\' : \\'up\\')\" class=\"fa bb-tile-chevron\"></button>\\n' +\n        '                    <button type=\"button\" ng-if=\"hasSettings\" class=\"bb-tile-settings bb-icon bb-icon-config\" ng-click=\"$event.stopPropagation();bbTileSettingsClick();\"></button>\\n' +\n        '                    <i class=\"bb-tile-grab-handle glyphicon glyphicon-th\" ng-click=\"$event.stopPropagation()\"></i>\\n' +\n        '                </div>\\n' +\n        '            </div>\\n' +\n        '        </div>\\n' +\n        '        <div uib-collapse=\"isCollapsed\" class=\"bb-tile-content\" ng-transclude>\\n' +\n        '        </div>\\n' +\n        '    </div>\\n' +\n        '</section>\\n' +\n        '');\n    $templateCache.put('sky/templates/tiles/tiledashboard.html',\n        '<div class=\"row\">\\n' +\n        '  <div class=\"col-md-6 bb-page-content-tile-column bb-page-content-tile-column-sortable\" data-dashboard-column=\"1\">\\n' +\n        '    <div ng-repeat=\"tile in tiles\" data-tile-id=\"{{tile.id}}\" data-ui-view=\"{{tile.view_name}}\" id=\"{{tile.view_name}}\">\\n' +\n        '    </div>\\n' +\n        '  </div>\\n' +\n        '\\n' +\n        '  <div class=\"col-md-6 bb-page-content-tile-column bb-page-content-tile-column-sortable\" data-dashboard-column=\"2\">\\n' +\n        '  </div>\\n' +\n        '</div>');\n    $templateCache.put('sky/templates/tiles/tileheadercheck.html',\n        '<i class=\"fa fa-check bb-tile-header-check\"></i>');\n    $templateCache.put('sky/templates/tiles/tileheadercontent.html',\n        '<div class=\"bb-tile-header-content\" ng-transclude></div>');\n}]);\n"]}